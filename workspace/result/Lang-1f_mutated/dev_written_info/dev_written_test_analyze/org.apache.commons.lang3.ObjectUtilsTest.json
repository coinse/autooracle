{
  "filepath": "/tmp/Lang-1f/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "ObjectUtilsTest",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 48,
      "end_line": 674,
      "comment": "\n * Unit tests {@link org.apache.commons.lang3.ObjectUtils}.\n *\n * @version $Id$\n "
    },
    {
      "type": "field",
      "varNames": [
        "FOO"
      ],
      "begin_line": 49,
      "end_line": 49,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "BAR"
      ],
      "begin_line": 50,
      "end_line": 50,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testConstructor()",
      "begin_line": 53,
      "end_line": 61,
      "comment": "-----------------------------------------------------------------------"
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testIsNull()",
      "begin_line": 64,
      "end_line": 70,
      "comment": "-----------------------------------------------------------------------"
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testFirstNonNull()",
      "begin_line": 72,
      "end_line": 88,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testEquals()",
      "begin_line": 91,
      "end_line": 98,
      "comment": "-----------------------------------------------------------------------"
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testNotEqual()",
      "begin_line": 100,
      "end_line": 107,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testHashCode()",
      "begin_line": 109,
      "end_line": 113,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testHashCodeMulti_multiple_emptyArray()",
      "begin_line": 115,
      "end_line": 119,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testHashCodeMulti_multiple_nullArray()",
      "begin_line": 121,
      "end_line": 125,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testHashCodeMulti_multiple_likeList()",
      "begin_line": 127,
      "end_line": 140,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStringBuffer()",
      "begin_line": 183,
      "end_line": 202,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStringBuilder()",
      "begin_line": 204,
      "end_line": 230,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStrBuilder()",
      "begin_line": 232,
      "end_line": 252,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringAppendable()",
      "begin_line": 254,
      "end_line": 280,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testToString_Object()",
      "begin_line": 282,
      "end_line": 286,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testToString_ObjectString()",
      "begin_line": 288,
      "end_line": 292,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testNull()",
      "begin_line": 294,
      "end_line": 301,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testMax()",
      "begin_line": 303,
      "end_line": 327,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testMin()",
      "begin_line": 329,
      "end_line": 353,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testCompare()",
      "begin_line": 358,
      "end_line": 375,
      "comment": "\n     * Tests {@link ObjectUtils#compare(Comparable, Comparable, boolean)}.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testMedian()",
      "begin_line": 377,
      "end_line": 392,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testMedian_nullItems()",
      "begin_line": 394,
      "end_line": 397,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testMedian_emptyItems()",
      "begin_line": 399,
      "end_line": 402,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian()",
      "begin_line": 404,
      "end_line": 417,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian_nullComparator()",
      "begin_line": 419,
      "end_line": 422,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian_nullItems()",
      "begin_line": 424,
      "end_line": 427,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian_emptyItems()",
      "begin_line": 429,
      "end_line": 432,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testMode()",
      "begin_line": 434,
      "end_line": 444,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testCloneOfCloneable()",
      "begin_line": 449,
      "end_line": 454,
      "comment": "\n     * Tests {@link ObjectUtils#clone(Object)} with a cloneable object.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testCloneOfNotCloneable()",
      "begin_line": 459,
      "end_line": 463,
      "comment": "\n     * Tests {@link ObjectUtils#clone(Object)} with a not cloneable object.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testCloneOfUncloneable()",
      "begin_line": 468,
      "end_line": 477,
      "comment": "\n     * Tests {@link ObjectUtils#clone(Object)} with an uncloneable object.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testCloneOfStringArray()",
      "begin_line": 482,
      "end_line": 486,
      "comment": "\n     * Tests {@link ObjectUtils#clone(Object)} with an object array.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testCloneOfPrimitiveArray()",
      "begin_line": 491,
      "end_line": 494,
      "comment": "\n     * Tests {@link ObjectUtils#clone(Object)} with an array of primitives.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testPossibleCloneOfCloneable()",
      "begin_line": 499,
      "end_line": 504,
      "comment": "\n     * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testPossibleCloneOfNotCloneable()",
      "begin_line": 509,
      "end_line": 513,
      "comment": "\n     * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a not cloneable object.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testPossibleCloneOfUncloneable()",
      "begin_line": 518,
      "end_line": 527,
      "comment": "\n     * Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.testConstMethods()",
      "begin_line": 529,
      "end_line": 604,
      "comment": ""
    },
    {
      "type": "class_interface",
      "name": "CloneableString",
      "is_interface": false,
      "parent_types": [
        "MutableObject\u003cString\u003e",
        "java.lang.Cloneable"
      ],
      "begin_line": 609,
      "end_line": 619,
      "comment": "\n     * String that is cloneable.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 610,
      "end_line": 610,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.CloneableString.CloneableString(java.lang.String)",
      "begin_line": 611,
      "end_line": 613,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.CloneableString.clone()",
      "begin_line": 615,
      "end_line": 618,
      "comment": ""
    },
    {
      "type": "class_interface",
      "name": "UncloneableString",
      "is_interface": false,
      "parent_types": [
        "MutableObject\u003cString\u003e",
        "java.lang.Cloneable"
      ],
      "begin_line": 624,
      "end_line": 629,
      "comment": "\n     * String that is not cloneable.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "serialVersionUID"
      ],
      "begin_line": 625,
      "end_line": 625,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.UncloneableString.UncloneableString(java.lang.String)",
      "begin_line": 626,
      "end_line": 628,
      "comment": ""
    },
    {
      "type": "class_interface",
      "name": "NonComparableCharSequence",
      "is_interface": false,
      "parent_types": [
        "java.lang.CharSequence"
      ],
      "begin_line": 631,
      "end_line": 664,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "value"
      ],
      "begin_line": 632,
      "end_line": 632,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.NonComparableCharSequence.NonComparableCharSequence(java.lang.String)",
      "begin_line": 639,
      "end_line": 643,
      "comment": "\n         * Create a new NonComparableCharSequence instance.\n         *\n         * @param value\n         "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.NonComparableCharSequence.charAt(int)",
      "begin_line": 645,
      "end_line": 648,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.NonComparableCharSequence.length()",
      "begin_line": 650,
      "end_line": 653,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.NonComparableCharSequence.subSequence(int, int)",
      "begin_line": 655,
      "end_line": 658,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.NonComparableCharSequence.toString()",
      "begin_line": 660,
      "end_line": 663,
      "comment": ""
    },
    {
      "type": "class_interface",
      "name": "CharSequenceComparator",
      "is_interface": false,
      "parent_types": [
        "java.util.Comparator\u003cjava.lang.CharSequence\u003e"
      ],
      "begin_line": 666,
      "end_line": 673,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ObjectUtilsTest.CharSequenceComparator.compare(java.lang.CharSequence, java.lang.CharSequence)",
      "begin_line": 668,
      "end_line": 671,
      "comment": ""
    }
  ]
}