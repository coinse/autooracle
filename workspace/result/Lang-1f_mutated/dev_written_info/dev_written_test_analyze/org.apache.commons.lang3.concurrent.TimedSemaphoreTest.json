{
  "filepath": "/tmp/Lang-1f/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "TimedSemaphoreTest",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 39,
      "end_line": 478,
      "comment": "\n * Test class for TimedSemaphore.\n *\n * @version $Id$\n "
    },
    {
      "type": "field",
      "varNames": [
        "PERIOD"
      ],
      "begin_line": 41,
      "end_line": 41,
      "comment": " Constant for the time period. "
    },
    {
      "type": "field",
      "varNames": [
        "UNIT"
      ],
      "begin_line": 44,
      "end_line": 44,
      "comment": " Constant for the time unit. "
    },
    {
      "type": "field",
      "varNames": [
        "LIMIT"
      ],
      "begin_line": 47,
      "end_line": 47,
      "comment": " Constant for the default limit. "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testInit()",
      "begin_line": 52,
      "end_line": 69,
      "comment": "\n     * Tests creating a new instance.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testInitInvalidPeriod()",
      "begin_line": 75,
      "end_line": 78,
      "comment": "\n     * Tries to create an instance with a negative period. This should cause an\n     * exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testInitDefaultService()",
      "begin_line": 84,
      "end_line": 95,
      "comment": "\n     * Tests whether a default executor service is created if no service is\n     * provided.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testStartTimer()",
      "begin_line": 100,
      "end_line": 116,
      "comment": "\n     * Tests starting the timer.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownOwnExecutor()",
      "begin_line": 122,
      "end_line": 129,
      "comment": "\n     * Tests the shutdown() method if the executor belongs to the semaphore. In\n     * this case it has to be shut down.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownSharedExecutorNoTask()",
      "begin_line": 135,
      "end_line": 145,
      "comment": "\n     * Tests the shutdown() method for a shared executor service before a task\n     * was started. This should do pretty much nothing.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.prepareStartTimer(java.util.concurrent.ScheduledExecutorService, java.util.concurrent.ScheduledFuture\u003c?\u003e)",
      "begin_line": 153,
      "end_line": 158,
      "comment": "\n     * Prepares an executor service mock to expect the start of the timer.\n     *\n     * @param service the mock\n     * @param future the future\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownSharedExecutorTask()",
      "begin_line": 164,
      "end_line": 178,
      "comment": "\n     * Tests the shutdown() method for a shared executor after the task was\n     * started. In this case the task must be canceled.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testShutdownMultipleTimes()",
      "begin_line": 183,
      "end_line": 198,
      "comment": "\n     * Tests multiple invocations of the shutdown() method.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireLimit()",
      "begin_line": 203,
      "end_line": 232,
      "comment": "\n     * Tests the acquire() method if a limit is set.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireMultipleThreads()",
      "begin_line": 240,
      "end_line": 268,
      "comment": "\n     * Tests the acquire() method if more threads are involved than the limit.\n     * This method starts a number of threads that all invoke the semaphore. The\n     * semaphore\u0027s limit is set to 1, so in each period only a single thread can\n     * acquire the semaphore.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireNoLimit()",
      "begin_line": 275,
      "end_line": 290,
      "comment": "\n     * Tests the acquire() method if no limit is set. A test thread is started\n     * that calls the semaphore a large number of times. Even if the semaphore\u0027s\n     * period does not end, the thread should never block.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testPassAfterShutdown()",
      "begin_line": 295,
      "end_line": 300,
      "comment": "\n     * Tries to call acquire() after shutdown(). This should cause an exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testAcquireMultiplePeriods()",
      "begin_line": 308,
      "end_line": 320,
      "comment": "\n     * Tests a bigger number of invocations that span multiple periods. The\n     * period is set to a very short time. A background thread calls the\n     * semaphore a large number of times. While it runs at last one end of a\n     * period should be reached.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testGetAverageCallsPerPeriod()",
      "begin_line": 325,
      "end_line": 344,
      "comment": "\n     * Tests the methods for statistics.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.testGetAvailablePermits()",
      "begin_line": 349,
      "end_line": 367,
      "comment": "\n     * Tests whether the available non-blocking calls can be queried.\n     "
    },
    {
      "type": "class_interface",
      "name": "TimedSemaphoreTestImpl",
      "is_interface": false,
      "parent_types": [
        "TimedSemaphore"
      ],
      "begin_line": 373,
      "end_line": 431,
      "comment": "\n     * A specialized implementation of {@code TimedSemaphore} that is easier to\n     * test.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "schedFuture"
      ],
      "begin_line": 375,
      "end_line": 375,
      "comment": " A mock scheduled future. "
    },
    {
      "type": "field",
      "varNames": [
        "latch"
      ],
      "begin_line": 378,
      "end_line": 378,
      "comment": " A latch for synchronizing with the main thread. "
    },
    {
      "type": "field",
      "varNames": [
        "periodEnds"
      ],
      "begin_line": 381,
      "end_line": 381,
      "comment": " Counter for the endOfPeriod() invocations. "
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.TimedSemaphoreTestImpl(long, java.util.concurrent.TimeUnit, int)",
      "begin_line": 383,
      "end_line": 386,
      "comment": ""
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.TimedSemaphoreTestImpl(java.util.concurrent.ScheduledExecutorService, long, java.util.concurrent.TimeUnit, int)",
      "begin_line": 388,
      "end_line": 391,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.getPeriodEnds()",
      "begin_line": 398,
      "end_line": 402,
      "comment": "\n         * Returns the number of invocations of the endOfPeriod() method.\n         *\n         * @return the endOfPeriod() invocations\n         "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.acquire()",
      "begin_line": 407,
      "end_line": 413,
      "comment": "\n         * Invokes the latch if one is set.\n         "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.endOfPeriod()",
      "begin_line": 418,
      "end_line": 422,
      "comment": "\n         * Counts the number of invocations.\n         "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.TimedSemaphoreTestImpl.startTimer()",
      "begin_line": 427,
      "end_line": 430,
      "comment": "\n         * Either returns the mock future or calls the super method.\n         "
    },
    {
      "type": "class_interface",
      "name": "SemaphoreThread",
      "is_interface": false,
      "parent_types": [
        "java.lang.Thread"
      ],
      "begin_line": 438,
      "end_line": 477,
      "comment": "\n     * A test thread class that will be used by tests for triggering the\n     * semaphore. The thread calls the semaphore a configurable number of times.\n     * When this is done, it can notify the main thread.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "semaphore"
      ],
      "begin_line": 440,
      "end_line": 440,
      "comment": " The semaphore. "
    },
    {
      "type": "field",
      "varNames": [
        "latch"
      ],
      "begin_line": 443,
      "end_line": 443,
      "comment": " A latch for communication with the main thread. "
    },
    {
      "type": "field",
      "varNames": [
        "count"
      ],
      "begin_line": 446,
      "end_line": 446,
      "comment": " The number of acquire() calls. "
    },
    {
      "type": "field",
      "varNames": [
        "latchCount"
      ],
      "begin_line": 449,
      "end_line": 449,
      "comment": " The number of invocations of the latch. "
    },
    {
      "type": "constructor",
      "signature": "SemaphoreThread(TimedSemaphore, CountDownLatch, int, int)",
      "begin_line": 451,
      "end_line": 456,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.TimedSemaphoreTest.SemaphoreThread.run()",
      "begin_line": 463,
      "end_line": 476,
      "comment": "\n         * Calls acquire() on the semaphore for the specified number of times.\n         * Optionally the latch will also be triggered to synchronize with the\n         * main test thread.\n         "
    }
  ]
}