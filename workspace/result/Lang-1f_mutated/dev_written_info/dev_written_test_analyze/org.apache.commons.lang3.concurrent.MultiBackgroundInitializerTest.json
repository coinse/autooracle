{
  "filepath": "/tmp/Lang-1f/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "MultiBackgroundInitializerTest",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 38,
      "end_line": 381,
      "comment": "\n * Test class for {@link MultiBackgroundInitializer}.\n *\n * @version $Id$\n "
    },
    {
      "type": "field",
      "varNames": [
        "CHILD_INIT"
      ],
      "begin_line": 40,
      "end_line": 40,
      "comment": " Constant for the names of the child initializers. "
    },
    {
      "type": "field",
      "varNames": [
        "initializer"
      ],
      "begin_line": 43,
      "end_line": 43,
      "comment": " The initializer to be tested. "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.setUp()",
      "begin_line": 45,
      "end_line": 48,
      "comment": ""
    },
    {
      "type": "method",
      "signature": "checkChild(BackgroundInitializer, ExecutorService)",
      "begin_line": 59,
      "end_line": 69,
      "comment": "\n     * Tests whether a child initializer has been executed. Optionally the\n     * expected executor service can be checked, too.\n     *\n     * @param child the child initializer\n     * @param expExec the expected executor service (null if the executor should\n     * not be checked)\n     * @throws ConcurrentException if an error occurs\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testAddInitializerNullName()",
      "begin_line": 75,
      "end_line": 78,
      "comment": "\n     * Tests addInitializer() if a null name is passed in. This should cause an\n     * exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testAddInitializerNullInit()",
      "begin_line": 84,
      "end_line": 87,
      "comment": "\n     * Tests addInitializer() if a null initializer is passed in. This should\n     * cause an exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeNoChildren()",
      "begin_line": 92,
      "end_line": 100,
      "comment": "\n     * Tests the background processing if there are no child initializers.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.checkInitialize()",
      "begin_line": 108,
      "end_line": 131,
      "comment": "\n     * Helper method for testing the initialize() method. This method can\n     * operate with both an external and a temporary executor service.\n     *\n     * @return the result object produced by the initializer\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeTempExec()",
      "begin_line": 136,
      "end_line": 141,
      "comment": "\n     * Tests background processing if a temporary executor is used.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeExternalExec()",
      "begin_line": 146,
      "end_line": 158,
      "comment": "\n     * Tests background processing if an external executor service is provided.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeChildWithExecutor()",
      "begin_line": 164,
      "end_line": 181,
      "comment": "\n     * Tests the behavior of initialize() if a child initializer has a specific\n     * executor service. Then this service should not be overridden.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testAddInitializerAfterStart()",
      "begin_line": 187,
      "end_line": 197,
      "comment": "\n     * Tries to add another child initializer after the start() method has been\n     * called. This should not be allowed.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetInitializerUnknown()",
      "begin_line": 203,
      "end_line": 207,
      "comment": "\n     * Tries to query an unknown child initializer from the results object. This\n     * should cause an exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetResultObjectUnknown()",
      "begin_line": 213,
      "end_line": 217,
      "comment": "\n     * Tries to query the results of an unknown child initializer from the\n     * results object. This should cause an exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultGetExceptionUnknown()",
      "begin_line": 223,
      "end_line": 227,
      "comment": "\n     * Tries to query the exception of an unknown child initializer from the\n     * results object. This should cause an exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultIsExceptionUnknown()",
      "begin_line": 233,
      "end_line": 237,
      "comment": "\n     * Tries to query the exception flag of an unknown child initializer from\n     * the results object. This should cause an exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testResultInitializerNamesModify()",
      "begin_line": 242,
      "end_line": 250,
      "comment": "\n     * Tests that the set with the names of the initializers cannot be modified.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeRuntimeEx()",
      "begin_line": 256,
      "end_line": 268,
      "comment": "\n     * Tests the behavior of the initializer if one of the child initializers\n     * throws a runtime exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeEx()",
      "begin_line": 274,
      "end_line": 286,
      "comment": "\n     * Tests the behavior of the initializer if one of the child initializers\n     * throws a checked exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeResultsIsSuccessfulTrue()",
      "begin_line": 292,
      "end_line": 301,
      "comment": "\n     * Tests the isSuccessful() method of the result object if no child\n     * initializer has thrown an exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeResultsIsSuccessfulFalse()",
      "begin_line": 307,
      "end_line": 317,
      "comment": "\n     * Tests the isSuccessful() method of the result object if at least one\n     * child initializer has thrown an exception.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeNested()",
      "begin_line": 323,
      "end_line": 349,
      "comment": "\n     * Tests whether MultiBackgroundInitializers can be combined in a nested\n     * way.\n     "
    },
    {
      "type": "class_interface",
      "name": "ChildBackgroundInitializer",
      "is_interface": false,
      "parent_types": [
        "BackgroundInitializer\u003cInteger\u003e"
      ],
      "begin_line": 355,
      "end_line": 380,
      "comment": "\n     * A concrete implementation of {@code BackgroundInitializer} used for\n     * defining background tasks for {@code MultiBackgroundInitializer}.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "currentExecutor"
      ],
      "begin_line": 358,
      "end_line": 358,
      "comment": " Stores the current executor service. "
    },
    {
      "type": "field",
      "varNames": [
        "initializeCalls"
      ],
      "begin_line": 361,
      "end_line": 361,
      "comment": " A counter for the invocations of initialize(). "
    },
    {
      "type": "field",
      "varNames": [
        "ex"
      ],
      "begin_line": 364,
      "end_line": 364,
      "comment": " An exception to be thrown by initialize(). "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.ChildBackgroundInitializer.initialize()",
      "begin_line": 369,
      "end_line": 379,
      "comment": "\n         * Records this invocation. Optionally throws an exception.\n         "
    }
  ]
}