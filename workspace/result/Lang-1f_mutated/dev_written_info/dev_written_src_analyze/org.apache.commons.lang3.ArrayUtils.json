{
  "filepath": "/tmp/Lang-1f/src/main/java/org/apache/commons/lang3/ArrayUtils.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "ArrayUtils",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 44,
      "end_line": 5826,
      "comment": "\n * \u003cp\u003eOperations on arrays, primitive arrays (like {@code int[]}) and\n * primitive wrapper arrays (like {@code Integer[]}).\u003c/p\u003e\n *\n * \u003cp\u003eThis class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null}\n * array input. However, an Object array that contains a {@code null}\n * element may throw an exception. Each method documents its behaviour.\u003c/p\u003e\n *\n * \u003cp\u003e#ThreadSafe#\u003c/p\u003e\n * @since 2.0\n * @version $Id$\n "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_OBJECT_ARRAY"
      ],
      "begin_line": 49,
      "end_line": 49,
      "comment": "\n     * An empty immutable {@code Object} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_CLASS_ARRAY"
      ],
      "begin_line": 53,
      "end_line": 53,
      "comment": "\n     * An empty immutable {@code Class} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_STRING_ARRAY"
      ],
      "begin_line": 57,
      "end_line": 57,
      "comment": "\n     * An empty immutable {@code String} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_LONG_ARRAY"
      ],
      "begin_line": 61,
      "end_line": 61,
      "comment": "\n     * An empty immutable {@code long} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_LONG_OBJECT_ARRAY"
      ],
      "begin_line": 65,
      "end_line": 65,
      "comment": "\n     * An empty immutable {@code Long} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_INT_ARRAY"
      ],
      "begin_line": 69,
      "end_line": 69,
      "comment": "\n     * An empty immutable {@code int} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_INTEGER_OBJECT_ARRAY"
      ],
      "begin_line": 73,
      "end_line": 73,
      "comment": "\n     * An empty immutable {@code Integer} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_SHORT_ARRAY"
      ],
      "begin_line": 77,
      "end_line": 77,
      "comment": "\n     * An empty immutable {@code short} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_SHORT_OBJECT_ARRAY"
      ],
      "begin_line": 81,
      "end_line": 81,
      "comment": "\n     * An empty immutable {@code Short} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_BYTE_ARRAY"
      ],
      "begin_line": 85,
      "end_line": 85,
      "comment": "\n     * An empty immutable {@code byte} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_BYTE_OBJECT_ARRAY"
      ],
      "begin_line": 89,
      "end_line": 89,
      "comment": "\n     * An empty immutable {@code Byte} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_DOUBLE_ARRAY"
      ],
      "begin_line": 93,
      "end_line": 93,
      "comment": "\n     * An empty immutable {@code double} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_DOUBLE_OBJECT_ARRAY"
      ],
      "begin_line": 97,
      "end_line": 97,
      "comment": "\n     * An empty immutable {@code Double} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_FLOAT_ARRAY"
      ],
      "begin_line": 101,
      "end_line": 101,
      "comment": "\n     * An empty immutable {@code float} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_FLOAT_OBJECT_ARRAY"
      ],
      "begin_line": 105,
      "end_line": 105,
      "comment": "\n     * An empty immutable {@code Float} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_BOOLEAN_ARRAY"
      ],
      "begin_line": 109,
      "end_line": 109,
      "comment": "\n     * An empty immutable {@code boolean} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_BOOLEAN_OBJECT_ARRAY"
      ],
      "begin_line": 113,
      "end_line": 113,
      "comment": "\n     * An empty immutable {@code Boolean} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_CHAR_ARRAY"
      ],
      "begin_line": 117,
      "end_line": 117,
      "comment": "\n     * An empty immutable {@code char} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "EMPTY_CHARACTER_OBJECT_ARRAY"
      ],
      "begin_line": 121,
      "end_line": 121,
      "comment": "\n     * An empty immutable {@code Character} array.\n     "
    },
    {
      "type": "field",
      "varNames": [
        "INDEX_NOT_FOUND"
      ],
      "begin_line": 128,
      "end_line": 128,
      "comment": "\n     * The index value when an element is not found in a list or array: {@code -1}.\n     * This value is returned by methods in this class and can also be used in comparisons with values returned by\n     * various method from {@link java.util.List}.\n     "
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.lang3.ArrayUtils.ArrayUtils()",
      "begin_line": 137,
      "end_line": 139,
      "comment": "\n     * \u003cp\u003eArrayUtils instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as \u003ccode\u003eArrayUtils.clone(new int[] {2})\u003c/code\u003e.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance\n     * to operate.\u003c/p\u003e\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object)",
      "begin_line": 158,
      "end_line": 160,
      "comment": "\n     * \u003cp\u003eOutputs an array as a String, treating {@code null} as an empty array.\u003c/p\u003e\n     *\n     * \u003cp\u003eMulti-dimensional arrays are handled correctly, including\n     * multi-dimensional primitive arrays.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe format is that of Java source code, for example \u003ccode\u003e{a,b}\u003c/code\u003e.\u003c/p\u003e\n     *\n     * @param array  the array to get a toString for, may be {@code null}\n     * @return a String representation of the array, \u0027{}\u0027 if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toString(java.lang.Object, java.lang.String)",
      "begin_line": 174,
      "end_line": 179,
      "comment": "\n     * \u003cp\u003eOutputs an array as a String handling {@code null}s.\u003c/p\u003e\n     *\n     * \u003cp\u003eMulti-dimensional arrays are handled correctly, including\n     * multi-dimensional primitive arrays.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe format is that of Java source code, for example \u003ccode\u003e{a,b}\u003c/code\u003e.\u003c/p\u003e\n     *\n     * @param array  the array to get a toString for, may be {@code null}\n     * @param stringIfNull  the String to return if the array is {@code null}\n     * @return a String representation of the array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.hashCode(java.lang.Object)",
      "begin_line": 189,
      "end_line": 191,
      "comment": "\n     * \u003cp\u003eGet a hash code for an array handling multi-dimensional arrays correctly.\u003c/p\u003e\n     *\n     * \u003cp\u003eMulti-dimensional primitive arrays are also handled correctly by this method.\u003c/p\u003e\n     *\n     * @param array  the array to get a hash code for, {@code null} returns zero\n     * @return a hash code for the array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEquals(java.lang.Object, java.lang.Object)",
      "begin_line": 203,
      "end_line": 205,
      "comment": "\n     * \u003cp\u003eCompares two arrays, using equals(), handling multi-dimensional arrays\n     * correctly.\u003c/p\u003e\n     *\n     * \u003cp\u003eMulti-dimensional primitive arrays are also handled correctly by this method.\u003c/p\u003e\n     *\n     * @param array1  the left hand array to compare, may be {@code null}\n     * @param array2  the right hand array to compare, may be {@code null}\n     * @return {@code true} if the arrays are equal\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toMap(java.lang.Object[])",
      "begin_line": 234,
      "end_line": 259,
      "comment": "\n     * \u003cp\u003eConverts the given array into a {@link java.util.Map}. Each element of the array\n     * must be either a {@link java.util.Map.Entry} or an Array, containing at least two\n     * elements, where the first element is used as key and the second as\n     * value.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method can be used to initialize:\u003c/p\u003e\n     * \u003cpre\u003e\n     * // Create a Map mapping colors.\n     * Map colorMap \u003d MapUtils.toMap(new String[][] {{\n     *     {\"RED\", \"#FF0000\"},\n     *     {\"GREEN\", \"#00FF00\"},\n     *     {\"BLUE\", \"#0000FF\"}});\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  an array whose elements are either a {@link java.util.Map.Entry} or\n     *  an Array containing at least two elements, may be {@code null}\n     * @return a {@code Map} that was created from the array\n     * @throws IllegalArgumentException  if one element of this Array is\n     *  itself an Array containing less then two elements\n     * @throws IllegalArgumentException  if the array contains elements other\n     *  than {@link java.util.Map.Entry} and an Array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toArray(T...)",
      "begin_line": 300,
      "end_line": 302,
      "comment": "\n     * \u003cp\u003eCreate a type-safe generic array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe Java language does not allow an array to be created from a generic type:\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n    public static \u0026lt;T\u0026gt; T[] createAnArray(int size) {\n        return new T[size]; // compiler error here\n    }\n    public static \u0026lt;T\u0026gt; T[] createAnArray(int size) {\n        return (T[])new Object[size]; // ClassCastException at runtime\n    }\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003eTherefore new arrays of generic types can be created with this method.\n     * For example, an array of Strings can be created:\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n    String[] array \u003d ArrayUtils.toArray(\"1\", \"2\");\n    String[] emptyArray \u003d ArrayUtils.\u0026lt;String\u0026gt;toArray();\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003eThe method is typically used in scenarios, where the caller itself uses generic types\n     * that have to be combined into an array.\u003c/p\u003e\n     *\n     * \u003cp\u003eNote, this method makes only sense to provide arguments of the same type so that the\n     * compiler can deduce the type of the array itself. While it is possible to select the\n     * type explicitly like in\n     * \u003ccode\u003eNumber[] array \u003d ArrayUtils.\u0026lt;Number\u0026gt;toArray(Integer.valueOf(42), Double.valueOf(Math.PI))\u003c/code\u003e,\n     * there is no real advantage when compared to\n     * \u003ccode\u003enew Number[] {Integer.valueOf(42), Double.valueOf(Math.PI)}\u003c/code\u003e.\u003c/p\u003e\n     *\n     * @param  \u003cT\u003e   the array\u0027s element type\n     * @param  items  the varargs array items, null allowed\n     * @return the array, not null unless a null array is passed in\n     * @since  3.0\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.clone(T[])",
      "begin_line": 319,
      "end_line": 324,
      "comment": "\n     * \u003cp\u003eShallow clones an array returning a typecast result and handling\n     * {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe objects in the array are not cloned, thus there is no special\n     * handling for multi-dimensional arrays.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array  the array to shallow clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.clone(long[])",
      "begin_line": 335,
      "end_line": 340,
      "comment": "\n     * \u003cp\u003eClones an array returning a typecast result and handling\n     * {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.clone(int[])",
      "begin_line": 351,
      "end_line": 356,
      "comment": "\n     * \u003cp\u003eClones an array returning a typecast result and handling\n     * {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.clone(short[])",
      "begin_line": 367,
      "end_line": 372,
      "comment": "\n     * \u003cp\u003eClones an array returning a typecast result and handling\n     * {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.clone(char[])",
      "begin_line": 383,
      "end_line": 388,
      "comment": "\n     * \u003cp\u003eClones an array returning a typecast result and handling\n     * {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.clone(byte[])",
      "begin_line": 399,
      "end_line": 404,
      "comment": "\n     * \u003cp\u003eClones an array returning a typecast result and handling\n     * {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.clone(double[])",
      "begin_line": 415,
      "end_line": 420,
      "comment": "\n     * \u003cp\u003eClones an array returning a typecast result and handling\n     * {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.clone(float[])",
      "begin_line": 431,
      "end_line": 436,
      "comment": "\n     * \u003cp\u003eClones an array returning a typecast result and handling\n     * {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.clone(boolean[])",
      "begin_line": 447,
      "end_line": 452,
      "comment": "\n     * \u003cp\u003eClones an array returning a typecast result and handling\n     * {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Object[])",
      "begin_line": 469,
      "end_line": 474,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.String[])",
      "begin_line": 489,
      "end_line": 494,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(long[])",
      "begin_line": 509,
      "end_line": 514,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(int[])",
      "begin_line": 529,
      "end_line": 534,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(short[])",
      "begin_line": 549,
      "end_line": 554,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(char[])",
      "begin_line": 569,
      "end_line": 574,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(byte[])",
      "begin_line": 589,
      "end_line": 594,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(double[])",
      "begin_line": 609,
      "end_line": 614,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(float[])",
      "begin_line": 629,
      "end_line": 634,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(boolean[])",
      "begin_line": 649,
      "end_line": 654,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Long[])",
      "begin_line": 669,
      "end_line": 674,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Integer[])",
      "begin_line": 689,
      "end_line": 694,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Short[])",
      "begin_line": 709,
      "end_line": 714,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Character[])",
      "begin_line": 729,
      "end_line": 734,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Byte[])",
      "begin_line": 749,
      "end_line": 754,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Double[])",
      "begin_line": 769,
      "end_line": 774,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Float[])",
      "begin_line": 789,
      "end_line": 794,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.nullToEmpty(java.lang.Boolean[])",
      "begin_line": 809,
      "end_line": 814,
      "comment": "\n     * \u003cp\u003eDefensive programming technique to change a {@code null}\n     * reference to an empty one.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns an empty array for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eAs a memory optimizing technique an empty array passed in will be overridden with\n     * the empty {@code public static} references in this class.\u003c/p\u003e\n     *\n     * @param array  the array to check for {@code null} or empty\n     * @return the same array, {@code public static} empty array if {@code null} or empty input\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.subarray(T[], int, int)",
      "begin_line": 846,
      "end_line": 868,
      "comment": "\n     * \u003cp\u003eProduces a new array containing the elements between\n     * the start and end indices.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe start index is inclusive, the end index exclusive.\n     * Null array input produces null output.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe component type of the subarray is always the same as\n     * that of the input array. Thus, if the input is an array of type\n     * {@code Date}, the following usage is envisaged:\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * Date[] someDates \u003d (Date[])ArrayUtils.subarray(allDates, 2, 5);\n     * \u003c/pre\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)\n     *      is promoted to 0, overvalue (\u0026gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (\u0026lt; startIndex) produces\n     *      empty array, overvalue (\u0026gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.subarray(long[], int, int)",
      "begin_line": 889,
      "end_line": 907,
      "comment": "\n     * \u003cp\u003eProduces a new {@code long} array containing the elements\n     * between the start and end indices.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe start index is inclusive, the end index exclusive.\n     * Null array input produces null output.\u003c/p\u003e\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)\n     *      is promoted to 0, overvalue (\u0026gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (\u0026lt; startIndex) produces\n     *      empty array, overvalue (\u0026gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.subarray(int[], int, int)",
      "begin_line": 928,
      "end_line": 946,
      "comment": "\n     * \u003cp\u003eProduces a new {@code int} array containing the elements\n     * between the start and end indices.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe start index is inclusive, the end index exclusive.\n     * Null array input produces null output.\u003c/p\u003e\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)\n     *      is promoted to 0, overvalue (\u0026gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (\u0026lt; startIndex) produces\n     *      empty array, overvalue (\u0026gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.subarray(short[], int, int)",
      "begin_line": 967,
      "end_line": 985,
      "comment": "\n     * \u003cp\u003eProduces a new {@code short} array containing the elements\n     * between the start and end indices.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe start index is inclusive, the end index exclusive.\n     * Null array input produces null output.\u003c/p\u003e\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)\n     *      is promoted to 0, overvalue (\u0026gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (\u0026lt; startIndex) produces\n     *      empty array, overvalue (\u0026gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.subarray(char[], int, int)",
      "begin_line": 1006,
      "end_line": 1024,
      "comment": "\n     * \u003cp\u003eProduces a new {@code char} array containing the elements\n     * between the start and end indices.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe start index is inclusive, the end index exclusive.\n     * Null array input produces null output.\u003c/p\u003e\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)\n     *      is promoted to 0, overvalue (\u0026gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (\u0026lt; startIndex) produces\n     *      empty array, overvalue (\u0026gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.subarray(byte[], int, int)",
      "begin_line": 1045,
      "end_line": 1063,
      "comment": "\n     * \u003cp\u003eProduces a new {@code byte} array containing the elements\n     * between the start and end indices.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe start index is inclusive, the end index exclusive.\n     * Null array input produces null output.\u003c/p\u003e\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)\n     *      is promoted to 0, overvalue (\u0026gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (\u0026lt; startIndex) produces\n     *      empty array, overvalue (\u0026gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.subarray(double[], int, int)",
      "begin_line": 1084,
      "end_line": 1102,
      "comment": "\n     * \u003cp\u003eProduces a new {@code double} array containing the elements\n     * between the start and end indices.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe start index is inclusive, the end index exclusive.\n     * Null array input produces null output.\u003c/p\u003e\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)\n     *      is promoted to 0, overvalue (\u0026gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (\u0026lt; startIndex) produces\n     *      empty array, overvalue (\u0026gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.subarray(float[], int, int)",
      "begin_line": 1123,
      "end_line": 1141,
      "comment": "\n     * \u003cp\u003eProduces a new {@code float} array containing the elements\n     * between the start and end indices.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe start index is inclusive, the end index exclusive.\n     * Null array input produces null output.\u003c/p\u003e\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)\n     *      is promoted to 0, overvalue (\u0026gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (\u0026lt; startIndex) produces\n     *      empty array, overvalue (\u0026gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.subarray(boolean[], int, int)",
      "begin_line": 1162,
      "end_line": 1180,
      "comment": "\n     * \u003cp\u003eProduces a new {@code boolean} array containing the elements\n     * between the start and end indices.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe start index is inclusive, the end index exclusive.\n     * Null array input produces null output.\u003c/p\u003e\n     *\n     * @param array  the array\n     * @param startIndexInclusive  the starting index. Undervalue (\u0026lt;0)\n     *      is promoted to 0, overvalue (\u0026gt;array.length) results\n     *      in an empty array.\n     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n     *      returned subarray. Undervalue (\u0026lt; startIndex) produces\n     *      empty array, overvalue (\u0026gt;array.length) is demoted to\n     *      array length.\n     * @return a new array containing the elements between\n     *      the start and end indices.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[])",
      "begin_line": 1195,
      "end_line": 1202,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same length, treating\n     * {@code null} arrays as length {@code 0}.\n     *\n     * \u003cp\u003eAny multi-dimensional aspects of the arrays are ignored.\u003c/p\u003e\n     *\n     * @param array1 the first array, may be {@code null}\n     * @param array2 the second array, may be {@code null}\n     * @return {@code true} if length of arrays matches, treating\n     *  {@code null} as an empty array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(long[], long[])",
      "begin_line": 1213,
      "end_line": 1220,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same length, treating\n     * {@code null} arrays as length {@code 0}.\u003c/p\u003e\n     *\n     * @param array1 the first array, may be {@code null}\n     * @param array2 the second array, may be {@code null}\n     * @return {@code true} if length of arrays matches, treating\n     *  {@code null} as an empty array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(int[], int[])",
      "begin_line": 1231,
      "end_line": 1238,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same length, treating\n     * {@code null} arrays as length {@code 0}.\u003c/p\u003e\n     *\n     * @param array1 the first array, may be {@code null}\n     * @param array2 the second array, may be {@code null}\n     * @return {@code true} if length of arrays matches, treating\n     *  {@code null} as an empty array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(short[], short[])",
      "begin_line": 1249,
      "end_line": 1256,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same length, treating\n     * {@code null} arrays as length {@code 0}.\u003c/p\u003e\n     *\n     * @param array1 the first array, may be {@code null}\n     * @param array2 the second array, may be {@code null}\n     * @return {@code true} if length of arrays matches, treating\n     *  {@code null} as an empty array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(char[], char[])",
      "begin_line": 1267,
      "end_line": 1274,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same length, treating\n     * {@code null} arrays as length {@code 0}.\u003c/p\u003e\n     *\n     * @param array1 the first array, may be {@code null}\n     * @param array2 the second array, may be {@code null}\n     * @return {@code true} if length of arrays matches, treating\n     *  {@code null} as an empty array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(byte[], byte[])",
      "begin_line": 1285,
      "end_line": 1292,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same length, treating\n     * {@code null} arrays as length {@code 0}.\u003c/p\u003e\n     *\n     * @param array1 the first array, may be {@code null}\n     * @param array2 the second array, may be {@code null}\n     * @return {@code true} if length of arrays matches, treating\n     *  {@code null} as an empty array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(double[], double[])",
      "begin_line": 1303,
      "end_line": 1310,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same length, treating\n     * {@code null} arrays as length {@code 0}.\u003c/p\u003e\n     *\n     * @param array1 the first array, may be {@code null}\n     * @param array2 the second array, may be {@code null}\n     * @return {@code true} if length of arrays matches, treating\n     *  {@code null} as an empty array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(float[], float[])",
      "begin_line": 1321,
      "end_line": 1328,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same length, treating\n     * {@code null} arrays as length {@code 0}.\u003c/p\u003e\n     *\n     * @param array1 the first array, may be {@code null}\n     * @param array2 the second array, may be {@code null}\n     * @return {@code true} if length of arrays matches, treating\n     *  {@code null} as an empty array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameLength(boolean[], boolean[])",
      "begin_line": 1339,
      "end_line": 1346,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same length, treating\n     * {@code null} arrays as length {@code 0}.\u003c/p\u003e\n     *\n     * @param array1 the first array, may be {@code null}\n     * @param array2 the second array, may be {@code null}\n     * @return {@code true} if length of arrays matches, treating\n     *  {@code null} as an empty array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.getLength(java.lang.Object)",
      "begin_line": 1369,
      "end_line": 1374,
      "comment": "\n     * \u003cp\u003eReturns the length of the specified array.\n     * This method can deal with {@code Object} arrays and with primitive arrays.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, {@code 0} is returned.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.getLength(null)            \u003d 0\n     * ArrayUtils.getLength([])              \u003d 0\n     * ArrayUtils.getLength([null])          \u003d 1\n     * ArrayUtils.getLength([true, false])   \u003d 2\n     * ArrayUtils.getLength([1, 2, 3])       \u003d 3\n     * ArrayUtils.getLength([\"a\", \"b\", \"c\"]) \u003d 3\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to retrieve the length from, may be null\n     * @return The length of the array, or {@code 0} if the array is {@code null}\n     * @throws IllegalArgumentException if the object argument is not an array.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isSameType(java.lang.Object, java.lang.Object)",
      "begin_line": 1385,
      "end_line": 1390,
      "comment": "\n     * \u003cp\u003eChecks whether two arrays are the same type taking into account\n     * multi-dimensional arrays.\u003c/p\u003e\n     *\n     * @param array1 the first array, must not be {@code null}\n     * @param array2 the second array, must not be {@code null}\n     * @return {@code true} if type of arrays matches\n     * @throws IllegalArgumentException if either array is {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[])",
      "begin_line": 1403,
      "end_line": 1417,
      "comment": "\n     * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThere is no special handling for multi-dimensional arrays.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method does nothing for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to reverse, may be {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.reverse(long[])",
      "begin_line": 1426,
      "end_line": 1440,
      "comment": "\n     * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method does nothing for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to reverse, may be {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.reverse(int[])",
      "begin_line": 1449,
      "end_line": 1463,
      "comment": "\n     * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method does nothing for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to reverse, may be {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.reverse(short[])",
      "begin_line": 1472,
      "end_line": 1486,
      "comment": "\n     * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method does nothing for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to reverse, may be {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.reverse(char[])",
      "begin_line": 1495,
      "end_line": 1509,
      "comment": "\n     * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method does nothing for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to reverse, may be {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.reverse(byte[])",
      "begin_line": 1518,
      "end_line": 1532,
      "comment": "\n     * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method does nothing for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to reverse, may be {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.reverse(double[])",
      "begin_line": 1541,
      "end_line": 1555,
      "comment": "\n     * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method does nothing for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to reverse, may be {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.reverse(float[])",
      "begin_line": 1564,
      "end_line": 1578,
      "comment": "\n     * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method does nothing for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to reverse, may be {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.reverse(boolean[])",
      "begin_line": 1587,
      "end_line": 1601,
      "comment": "\n     * \u003cp\u003eReverses the order of the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method does nothing for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to reverse, may be {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object)",
      "begin_line": 1618,
      "end_line": 1620,
      "comment": "\n     * \u003cp\u003eFinds the index of the given object in the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param objectToFind  the object to find, may be {@code null}\n     * @return the index of the object within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int)",
      "begin_line": 1636,
      "end_line": 1657,
      "comment": "\n     * \u003cp\u003eFinds the index of the given object in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param objectToFind  the object to find, may be {@code null}\n     * @param startIndex  the index to start searching at\n     * @return the index of the object within the array starting at the index,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object)",
      "begin_line": 1669,
      "end_line": 1671,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given object within the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to travers backwords looking for the object, may be {@code null}\n     * @param objectToFind  the object to find, may be {@code null}\n     * @return the last index of the object within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object, int)",
      "begin_line": 1687,
      "end_line": 1710,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given object in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than\n     * the array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param objectToFind  the object to find, may be {@code null}\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the object within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object)",
      "begin_line": 1721,
      "end_line": 1723,
      "comment": "\n     * \u003cp\u003eChecks if the object is in the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search through\n     * @param objectToFind  the object to find\n     * @return {@code true} if the array contains the object\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long)",
      "begin_line": 1737,
      "end_line": 1739,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(long[], long, int)",
      "begin_line": 1755,
      "end_line": 1768,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long)",
      "begin_line": 1780,
      "end_line": 1782,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to travers backwords looking for the object, may be {@code null}\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(long[], long, int)",
      "begin_line": 1798,
      "end_line": 1813,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n     * array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(long[], long)",
      "begin_line": 1824,
      "end_line": 1826,
      "comment": "\n     * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return {@code true} if the array contains the object\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int)",
      "begin_line": 1840,
      "end_line": 1842,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(int[], int, int)",
      "begin_line": 1858,
      "end_line": 1871,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int)",
      "begin_line": 1883,
      "end_line": 1885,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to travers backwords looking for the object, may be {@code null}\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(int[], int, int)",
      "begin_line": 1901,
      "end_line": 1916,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n     * array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(int[], int)",
      "begin_line": 1927,
      "end_line": 1929,
      "comment": "\n     * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return {@code true} if the array contains the object\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short)",
      "begin_line": 1943,
      "end_line": 1945,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(short[], short, int)",
      "begin_line": 1961,
      "end_line": 1974,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short)",
      "begin_line": 1986,
      "end_line": 1988,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to travers backwords looking for the object, may be {@code null}\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(short[], short, int)",
      "begin_line": 2004,
      "end_line": 2019,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n     * array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(short[], short)",
      "begin_line": 2030,
      "end_line": 2032,
      "comment": "\n     * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return {@code true} if the array contains the object\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char)",
      "begin_line": 2047,
      "end_line": 2049,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(char[], char, int)",
      "begin_line": 2066,
      "end_line": 2079,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char)",
      "begin_line": 2092,
      "end_line": 2094,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to travers backwords looking for the object, may be {@code null}\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(char[], char, int)",
      "begin_line": 2111,
      "end_line": 2126,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n     * array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(char[], char)",
      "begin_line": 2138,
      "end_line": 2140,
      "comment": "\n     * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return {@code true} if the array contains the object\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte)",
      "begin_line": 2154,
      "end_line": 2156,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(byte[], byte, int)",
      "begin_line": 2172,
      "end_line": 2185,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte)",
      "begin_line": 2197,
      "end_line": 2199,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to travers backwords looking for the object, may be {@code null}\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(byte[], byte, int)",
      "begin_line": 2215,
      "end_line": 2230,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n     * array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(byte[], byte)",
      "begin_line": 2241,
      "end_line": 2243,
      "comment": "\n     * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return {@code true} if the array contains the object\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double)",
      "begin_line": 2257,
      "end_line": 2259,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, double)",
      "begin_line": 2274,
      "end_line": 2276,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value within a given tolerance in the array.\n     * This method will return the index of the first value which falls between the region\n     * defined by valueToFind - tolerance and valueToFind + tolerance.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param tolerance tolerance of the search\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int)",
      "begin_line": 2292,
      "end_line": 2305,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(double[], double, int, double)",
      "begin_line": 2324,
      "end_line": 2339,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\n     * This method will return the index of the first value which falls between the region\n     * defined by valueToFind - tolerance and valueToFind + tolerance.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @param tolerance tolerance of the search\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double)",
      "begin_line": 2351,
      "end_line": 2353,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to travers backwords looking for the object, may be {@code null}\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, double)",
      "begin_line": 2368,
      "end_line": 2370,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value within a given tolerance in the array.\n     * This method will return the index of the last value which falls between the region\n     * defined by valueToFind - tolerance and valueToFind + tolerance.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param tolerance tolerance of the search\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int)",
      "begin_line": 2386,
      "end_line": 2401,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n     * array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(double[], double, int, double)",
      "begin_line": 2420,
      "end_line": 2437,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\n     * This method will return the index of the last value which falls between the region\n     * defined by valueToFind - tolerance and valueToFind + tolerance.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n     * array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @param tolerance  search for value within plus/minus this amount\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double)",
      "begin_line": 2448,
      "end_line": 2450,
      "comment": "\n     * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return {@code true} if the array contains the object\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(double[], double, double)",
      "begin_line": 2465,
      "end_line": 2467,
      "comment": "\n     * \u003cp\u003eChecks if a value falling within the given tolerance is in the\n     * given array.  If the array contains a value within the inclusive range\n     * defined by (value - tolerance) to (value + tolerance).\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array\n     * is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search\n     * @param valueToFind  the value to find\n     * @param tolerance  the array contains the tolerance of the search\n     * @return true if value falling within tolerance is in array\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float)",
      "begin_line": 2481,
      "end_line": 2483,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(float[], float, int)",
      "begin_line": 2499,
      "end_line": 2512,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float)",
      "begin_line": 2524,
      "end_line": 2526,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to travers backwords looking for the object, may be {@code null}\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(float[], float, int)",
      "begin_line": 2542,
      "end_line": 2557,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n     * array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(float[], float)",
      "begin_line": 2568,
      "end_line": 2570,
      "comment": "\n     * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return {@code true} if the array contains the object\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean)",
      "begin_line": 2584,
      "end_line": 2586,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.indexOf(boolean[], boolean, int)",
      "begin_line": 2603,
      "end_line": 2616,
      "comment": "\n     * \u003cp\u003eFinds the index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex is treated as zero. A startIndex larger than the array\n     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).\u003c/p\u003e\n     *\n     * @param array  the array to search through for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the index to start searching at\n     * @return the index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null}\n     *  array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean)",
      "begin_line": 2629,
      "end_line": 2631,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value within the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) if\n     * {@code null} array input.\u003c/p\u003e\n     *\n     * @param array  the array to travers backwords looking for the object, may be {@code null}\n     * @param valueToFind  the object to find\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.lastIndexOf(boolean[], boolean, int)",
      "begin_line": 2647,
      "end_line": 2662,
      "comment": "\n     * \u003cp\u003eFinds the last index of the given value in the array starting at the given index.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eA negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than\n     * the array length will search from the end of the array.\u003c/p\u003e\n     *\n     * @param array  the array to traverse for looking for the object, may be {@code null}\n     * @param valueToFind  the value to find\n     * @param startIndex  the start index to travers backwards from\n     * @return the last index of the value within the array,\n     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.contains(boolean[], boolean)",
      "begin_line": 2673,
      "end_line": 2675,
      "comment": "\n     * \u003cp\u003eChecks if the value is in the given array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe method returns {@code false} if a {@code null} array is passed in.\u003c/p\u003e\n     *\n     * @param array  the array to search through\n     * @param valueToFind  the value to find\n     * @return {@code true} if the array contains the object\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[])",
      "begin_line": 2691,
      "end_line": 2702,
      "comment": "\n     * \u003cp\u003eConverts an array of object Characters to primitives.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Character} array, may be {@code null}\n     * @return a {@code char} array, {@code null} if null array input\n     * @throws NullPointerException if array content is {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Character[], char)",
      "begin_line": 2713,
      "end_line": 2725,
      "comment": "\n     * \u003cp\u003eConverts an array of object Character to primitives handling {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Character} array, may be {@code null}\n     * @param valueForNull  the value to insert if {@code null} found\n     * @return a {@code char} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toObject(char[])",
      "begin_line": 2735,
      "end_line": 2746,
      "comment": "\n     * \u003cp\u003eConverts an array of primitive chars to objects.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array a {@code char} array\n     * @return a {@code Character} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[])",
      "begin_line": 2759,
      "end_line": 2770,
      "comment": "\n     * \u003cp\u003eConverts an array of object Longs to primitives.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Long} array, may be {@code null}\n     * @return a {@code long} array, {@code null} if null array input\n     * @throws NullPointerException if array content is {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Long[], long)",
      "begin_line": 2781,
      "end_line": 2793,
      "comment": "\n     * \u003cp\u003eConverts an array of object Long to primitives handling {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Long} array, may be {@code null}\n     * @param valueForNull  the value to insert if {@code null} found\n     * @return a {@code long} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toObject(long[])",
      "begin_line": 2803,
      "end_line": 2814,
      "comment": "\n     * \u003cp\u003eConverts an array of primitive longs to objects.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code long} array\n     * @return a {@code Long} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[])",
      "begin_line": 2827,
      "end_line": 2838,
      "comment": "\n     * \u003cp\u003eConverts an array of object Integers to primitives.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Integer} array, may be {@code null}\n     * @return an {@code int} array, {@code null} if null array input\n     * @throws NullPointerException if array content is {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Integer[], int)",
      "begin_line": 2849,
      "end_line": 2861,
      "comment": "\n     * \u003cp\u003eConverts an array of object Integer to primitives handling {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Integer} array, may be {@code null}\n     * @param valueForNull  the value to insert if {@code null} found\n     * @return an {@code int} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toObject(int[])",
      "begin_line": 2871,
      "end_line": 2882,
      "comment": "\n     * \u003cp\u003eConverts an array of primitive ints to objects.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  an {@code int} array\n     * @return an {@code Integer} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[])",
      "begin_line": 2895,
      "end_line": 2906,
      "comment": "\n     * \u003cp\u003eConverts an array of object Shorts to primitives.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Short} array, may be {@code null}\n     * @return a {@code byte} array, {@code null} if null array input\n     * @throws NullPointerException if array content is {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Short[], short)",
      "begin_line": 2917,
      "end_line": 2929,
      "comment": "\n     * \u003cp\u003eConverts an array of object Short to primitives handling {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Short} array, may be {@code null}\n     * @param valueForNull  the value to insert if {@code null} found\n     * @return a {@code byte} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toObject(short[])",
      "begin_line": 2939,
      "end_line": 2950,
      "comment": "\n     * \u003cp\u003eConverts an array of primitive shorts to objects.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code short} array\n     * @return a {@code Short} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[])",
      "begin_line": 2963,
      "end_line": 2974,
      "comment": "\n     * \u003cp\u003eConverts an array of object Bytes to primitives.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Byte} array, may be {@code null}\n     * @return a {@code byte} array, {@code null} if null array input\n     * @throws NullPointerException if array content is {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Byte[], byte)",
      "begin_line": 2985,
      "end_line": 2997,
      "comment": "\n     * \u003cp\u003eConverts an array of object Bytes to primitives handling {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Byte} array, may be {@code null}\n     * @param valueForNull  the value to insert if {@code null} found\n     * @return a {@code byte} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toObject(byte[])",
      "begin_line": 3007,
      "end_line": 3018,
      "comment": "\n     * \u003cp\u003eConverts an array of primitive bytes to objects.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code byte} array\n     * @return a {@code Byte} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[])",
      "begin_line": 3031,
      "end_line": 3042,
      "comment": "\n     * \u003cp\u003eConverts an array of object Doubles to primitives.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Double} array, may be {@code null}\n     * @return a {@code double} array, {@code null} if null array input\n     * @throws NullPointerException if array content is {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Double[], double)",
      "begin_line": 3053,
      "end_line": 3065,
      "comment": "\n     * \u003cp\u003eConverts an array of object Doubles to primitives handling {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Double} array, may be {@code null}\n     * @param valueForNull  the value to insert if {@code null} found\n     * @return a {@code double} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toObject(double[])",
      "begin_line": 3075,
      "end_line": 3086,
      "comment": "\n     * \u003cp\u003eConverts an array of primitive doubles to objects.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code double} array\n     * @return a {@code Double} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[])",
      "begin_line": 3099,
      "end_line": 3110,
      "comment": "\n     * \u003cp\u003eConverts an array of object Floats to primitives.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Float} array, may be {@code null}\n     * @return a {@code float} array, {@code null} if null array input\n     * @throws NullPointerException if array content is {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Float[], float)",
      "begin_line": 3121,
      "end_line": 3133,
      "comment": "\n     * \u003cp\u003eConverts an array of object Floats to primitives handling {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Float} array, may be {@code null}\n     * @param valueForNull  the value to insert if {@code null} found\n     * @return a {@code float} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toObject(float[])",
      "begin_line": 3143,
      "end_line": 3154,
      "comment": "\n     * \u003cp\u003eConverts an array of primitive floats to objects.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code float} array\n     * @return a {@code Float} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[])",
      "begin_line": 3167,
      "end_line": 3178,
      "comment": "\n     * \u003cp\u003eConverts an array of object Booleans to primitives.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Boolean} array, may be {@code null}\n     * @return a {@code boolean} array, {@code null} if null array input\n     * @throws NullPointerException if array content is {@code null}\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[], boolean)",
      "begin_line": 3189,
      "end_line": 3201,
      "comment": "\n     * \u003cp\u003eConverts an array of object Booleans to primitives handling {@code null}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code Boolean} array, may be {@code null}\n     * @param valueForNull  the value to insert if {@code null} found\n     * @return a {@code boolean} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.toObject(boolean[])",
      "begin_line": 3211,
      "end_line": 3222,
      "comment": "\n     * \u003cp\u003eConverts an array of primitive booleans to objects.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns {@code null} for a {@code null} input array.\u003c/p\u003e\n     *\n     * @param array  a {@code boolean} array\n     * @return a {@code Boolean} array, {@code null} if null array input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.Object[])",
      "begin_line": 3232,
      "end_line": 3234,
      "comment": "\n     * \u003cp\u003eChecks if an array of Objects is empty or {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is empty or {@code null}\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(long[])",
      "begin_line": 3243,
      "end_line": 3245,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive longs is empty or {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is empty or {@code null}\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(int[])",
      "begin_line": 3254,
      "end_line": 3256,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive ints is empty or {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is empty or {@code null}\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(short[])",
      "begin_line": 3265,
      "end_line": 3267,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive shorts is empty or {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is empty or {@code null}\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(char[])",
      "begin_line": 3276,
      "end_line": 3278,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive chars is empty or {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is empty or {@code null}\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(byte[])",
      "begin_line": 3287,
      "end_line": 3289,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive bytes is empty or {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is empty or {@code null}\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(double[])",
      "begin_line": 3298,
      "end_line": 3300,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive doubles is empty or {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is empty or {@code null}\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(float[])",
      "begin_line": 3309,
      "end_line": 3311,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive floats is empty or {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is empty or {@code null}\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isEmpty(boolean[])",
      "begin_line": 3320,
      "end_line": 3322,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive booleans is empty or {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is empty or {@code null}\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(T[])",
      "begin_line": 3333,
      "end_line": 3335,
      "comment": "\n     * \u003cp\u003eChecks if an array of Objects is not empty or not {@code null}.\u003c/p\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array  the array to test\n     * @return {@code true} if the array is not empty or not {@code null}\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(long[])",
      "begin_line": 3344,
      "end_line": 3346,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive longs is not empty or not {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is not empty or not {@code null}\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(int[])",
      "begin_line": 3355,
      "end_line": 3357,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive ints is not empty or not {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is not empty or not {@code null}\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(short[])",
      "begin_line": 3366,
      "end_line": 3368,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive shorts is not empty or not {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is not empty or not {@code null}\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(char[])",
      "begin_line": 3377,
      "end_line": 3379,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive chars is not empty or not {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is not empty or not {@code null}\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(byte[])",
      "begin_line": 3388,
      "end_line": 3390,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive bytes is not empty or not {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is not empty or not {@code null}\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(double[])",
      "begin_line": 3399,
      "end_line": 3401,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive doubles is not empty or not {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is not empty or not {@code null}\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(float[])",
      "begin_line": 3410,
      "end_line": 3412,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive floats is not empty or not {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is not empty or not {@code null}\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.isNotEmpty(boolean[])",
      "begin_line": 3421,
      "end_line": 3423,
      "comment": "\n     * \u003cp\u003eChecks if an array of primitive booleans is not empty or not {@code null}.\u003c/p\u003e\n     *\n     * @param array  the array to test\n     * @return {@code true} if the array is not empty or not {@code null}\n     * @since 2.5\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.addAll(T[], T...)",
      "begin_line": 3449,
      "end_line": 3477,
      "comment": "\n     * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e\n     * \u003cp\u003eThe new array contains all of the element of {@code array1} followed\n     * by all of the elements {@code array2}. When an array is returned, it is always\n     * a new array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.addAll(null, null)     \u003d null\n     * ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2\n     * ArrayUtils.addAll([], [])         \u003d []\n     * ArrayUtils.addAll([null], [null]) \u003d [null, null]\n     * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) \u003d [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n     * \u003c/pre\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array1  the first array whose elements are added to the new array, may be {@code null}\n     * @param array2  the second array whose elements are added to the new array, may be {@code null}\n     * @return The new array, {@code null} if both arrays are {@code null}.\n     *      The type of the new array is the type of the first array,\n     *      unless the first array is null, in which case the type is the same as the second array.\n     * @since 2.1\n     * @throws IllegalArgumentException if the array types are incompatible\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.addAll(boolean[], boolean...)",
      "begin_line": 3496,
      "end_line": 3506,
      "comment": "\n     * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e\n     * \u003cp\u003eThe new array contains all of the element of {@code array1} followed\n     * by all of the elements {@code array2}. When an array is returned, it is always\n     * a new array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2\n     * ArrayUtils.addAll([], [])         \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new boolean[] array.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.addAll(char[], char...)",
      "begin_line": 3525,
      "end_line": 3535,
      "comment": "\n     * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e\n     * \u003cp\u003eThe new array contains all of the element of {@code array1} followed\n     * by all of the elements {@code array2}. When an array is returned, it is always\n     * a new array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2\n     * ArrayUtils.addAll([], [])         \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new char[] array.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.addAll(byte[], byte...)",
      "begin_line": 3554,
      "end_line": 3564,
      "comment": "\n     * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e\n     * \u003cp\u003eThe new array contains all of the element of {@code array1} followed\n     * by all of the elements {@code array2}. When an array is returned, it is always\n     * a new array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2\n     * ArrayUtils.addAll([], [])         \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new byte[] array.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.addAll(short[], short...)",
      "begin_line": 3583,
      "end_line": 3593,
      "comment": "\n     * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e\n     * \u003cp\u003eThe new array contains all of the element of {@code array1} followed\n     * by all of the elements {@code array2}. When an array is returned, it is always\n     * a new array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2\n     * ArrayUtils.addAll([], [])         \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new short[] array.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.addAll(int[], int...)",
      "begin_line": 3612,
      "end_line": 3622,
      "comment": "\n     * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e\n     * \u003cp\u003eThe new array contains all of the element of {@code array1} followed\n     * by all of the elements {@code array2}. When an array is returned, it is always\n     * a new array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2\n     * ArrayUtils.addAll([], [])         \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new int[] array.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.addAll(long[], long...)",
      "begin_line": 3641,
      "end_line": 3651,
      "comment": "\n     * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e\n     * \u003cp\u003eThe new array contains all of the element of {@code array1} followed\n     * by all of the elements {@code array2}. When an array is returned, it is always\n     * a new array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2\n     * ArrayUtils.addAll([], [])         \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new long[] array.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.addAll(float[], float...)",
      "begin_line": 3670,
      "end_line": 3680,
      "comment": "\n     * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e\n     * \u003cp\u003eThe new array contains all of the element of {@code array1} followed\n     * by all of the elements {@code array2}. When an array is returned, it is always\n     * a new array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2\n     * ArrayUtils.addAll([], [])         \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new float[] array.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.addAll(double[], double...)",
      "begin_line": 3699,
      "end_line": 3709,
      "comment": "\n     * \u003cp\u003eAdds all the elements of the given arrays into a new array.\u003c/p\u003e\n     * \u003cp\u003eThe new array contains all of the element of {@code array1} followed\n     * by all of the elements {@code array2}. When an array is returned, it is always\n     * a new array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.addAll(array1, null)   \u003d cloned copy of array1\n     * ArrayUtils.addAll(null, array2)   \u003d cloned copy of array2\n     * ArrayUtils.addAll([], [])         \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array1  the first array whose elements are added to the new array.\n     * @param array2  the second array whose elements are added to the new array.\n     * @return The new double[] array.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], T)",
      "begin_line": 3740,
      "end_line": 3754,
      "comment": "\n     * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element, unless the element itself is null,\n     *  in which case the return type is Object[]\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, null)      \u003d [null]\n     * ArrayUtils.add(null, \"a\")       \u003d [\"a\"]\n     * ArrayUtils.add([\"a\"], null)     \u003d [\"a\", null]\n     * ArrayUtils.add([\"a\"], \"b\")      \u003d [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], \"c\") \u003d [\"a\", \"b\", \"c\"]\n     * \u003c/pre\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array  the array to \"add\" the element to, may be {@code null}\n     * @param element  the object to add, may be {@code null}\n     * @return A new array containing the existing elements plus the new element\n     * The returned array type will be that of the input array (unless null),\n     * in which case it will have the same type as the element.\n     * If both are null, an IllegalArgumentException is thrown\n     * @since 2.1\n     * @throws IllegalArgumentException if both arguments are null\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], boolean)",
      "begin_line": 3777,
      "end_line": 3781,
      "comment": "\n     * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, true)          \u003d [true]\n     * ArrayUtils.add([true], false)       \u003d [true, false]\n     * ArrayUtils.add([true, false], true) \u003d [true, false, true]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to copy and add the element to, may be {@code null}\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], byte)",
      "begin_line": 3804,
      "end_line": 3808,
      "comment": "\n     * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, 0)   \u003d [0]\n     * ArrayUtils.add([1], 0)    \u003d [1, 0]\n     * ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to copy and add the element to, may be {@code null}\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], char)",
      "begin_line": 3831,
      "end_line": 3835,
      "comment": "\n     * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, \u00270\u0027)       \u003d [\u00270\u0027]\n     * ArrayUtils.add([\u00271\u0027], \u00270\u0027)      \u003d [\u00271\u0027, \u00270\u0027]\n     * ArrayUtils.add([\u00271\u0027, \u00270\u0027], \u00271\u0027) \u003d [\u00271\u0027, \u00270\u0027, \u00271\u0027]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to copy and add the element to, may be {@code null}\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], double)",
      "begin_line": 3858,
      "end_line": 3862,
      "comment": "\n     * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, 0)   \u003d [0]\n     * ArrayUtils.add([1], 0)    \u003d [1, 0]\n     * ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to copy and add the element to, may be {@code null}\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], float)",
      "begin_line": 3885,
      "end_line": 3889,
      "comment": "\n     * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, 0)   \u003d [0]\n     * ArrayUtils.add([1], 0)    \u003d [1, 0]\n     * ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to copy and add the element to, may be {@code null}\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int)",
      "begin_line": 3912,
      "end_line": 3916,
      "comment": "\n     * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, 0)   \u003d [0]\n     * ArrayUtils.add([1], 0)    \u003d [1, 0]\n     * ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to copy and add the element to, may be {@code null}\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], long)",
      "begin_line": 3939,
      "end_line": 3943,
      "comment": "\n     * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, 0)   \u003d [0]\n     * ArrayUtils.add([1], 0)    \u003d [1, 0]\n     * ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to copy and add the element to, may be {@code null}\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], short)",
      "begin_line": 3966,
      "end_line": 3970,
      "comment": "\n     * \u003cp\u003eCopies the given array and adds the given element at the end of the new array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThe new array contains the same elements of the input\n     * array plus the given element in the last position. The component type of\n     * the new array is the same as that of the input array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, 0)   \u003d [0]\n     * ArrayUtils.add([1], 0)    \u003d [1, 0]\n     * ArrayUtils.add([1, 0], 1) \u003d [1, 0, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to copy and add the element to, may be {@code null}\n     * @param element  the object to add at the last index of the new array\n     * @return A new array containing the existing elements plus the new element\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.copyArrayGrow1(java.lang.Object, java.lang.Class\u003c?\u003e)",
      "begin_line": 3981,
      "end_line": 3989,
      "comment": "\n     * Returns a copy of the given array of size 1 greater than the argument.\n     * The last value of the array is left to the default value.\n     *\n     * @param array The array to copy, must not be {@code null}.\n     * @param newArrayComponentType If {@code array} is {@code null}, create a\n     * size 1 array of this type.\n     * @return A new copy of the array of size 1 greater than the input.\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(T[], int, T)",
      "begin_line": 4021,
      "end_line": 4033,
      "comment": "\n     * \u003cp\u003eInserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, 0, null)      \u003d [null]\n     * ArrayUtils.add(null, 0, \"a\")       \u003d [\"a\"]\n     * ArrayUtils.add([\"a\"], 1, null)     \u003d [\"a\", null]\n     * ArrayUtils.add([\"a\"], 1, \"b\")      \u003d [\"a\", \"b\"]\n     * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") \u003d [\"a\", \"b\", \"c\"]\n     * \u003c/pre\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e array.length).\n     * @throws IllegalArgumentException if both array and element are null\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(boolean[], int, boolean)",
      "begin_line": 4062,
      "end_line": 4064,
      "comment": "\n     * \u003cp\u003eInserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, 0, true)          \u003d [true]\n     * ArrayUtils.add([true], 0, false)       \u003d [false, true]\n     * ArrayUtils.add([false], 1, true)       \u003d [false, true]\n     * ArrayUtils.add([true, false], 1, true) \u003d [true, true, false]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e array.length).\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(char[], int, char)",
      "begin_line": 4094,
      "end_line": 4096,
      "comment": "\n     * \u003cp\u003eInserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add(null, 0, \u0027a\u0027)            \u003d [\u0027a\u0027]\n     * ArrayUtils.add([\u0027a\u0027], 0, \u0027b\u0027)           \u003d [\u0027b\u0027, \u0027a\u0027]\n     * ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 0, \u0027c\u0027)      \u003d [\u0027c\u0027, \u0027a\u0027, \u0027b\u0027]\n     * ArrayUtils.add([\u0027a\u0027, \u0027b\u0027], 1, \u0027k\u0027)      \u003d [\u0027a\u0027, \u0027k\u0027, \u0027b\u0027]\n     * ArrayUtils.add([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1, \u0027t\u0027) \u003d [\u0027a\u0027, \u0027t\u0027, \u0027b\u0027, \u0027c\u0027]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e array.length).\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(byte[], int, byte)",
      "begin_line": 4125,
      "end_line": 4127,
      "comment": "\n     * \u003cp\u003eInserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add([1], 0, 2)         \u003d [2, 1]\n     * ArrayUtils.add([2, 6], 2, 3)      \u003d [2, 6, 3]\n     * ArrayUtils.add([2, 6], 0, 1)      \u003d [1, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e array.length).\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(short[], int, short)",
      "begin_line": 4156,
      "end_line": 4158,
      "comment": "\n     * \u003cp\u003eInserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add([1], 0, 2)         \u003d [2, 1]\n     * ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10]\n     * ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e array.length).\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(int[], int, int)",
      "begin_line": 4187,
      "end_line": 4189,
      "comment": "\n     * \u003cp\u003eInserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add([1], 0, 2)         \u003d [2, 1]\n     * ArrayUtils.add([2, 6], 2, 10)     \u003d [2, 6, 10]\n     * ArrayUtils.add([2, 6], 0, -4)     \u003d [-4, 2, 6]\n     * ArrayUtils.add([2, 6, 3], 2, 1)   \u003d [2, 6, 1, 3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e array.length).\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(long[], int, long)",
      "begin_line": 4218,
      "end_line": 4220,
      "comment": "\n     * \u003cp\u003eInserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add([1L], 0, 2L)           \u003d [2L, 1L]\n     * ArrayUtils.add([2L, 6L], 2, 10L)      \u003d [2L, 6L, 10L]\n     * ArrayUtils.add([2L, 6L], 0, -4L)      \u003d [-4L, 2L, 6L]\n     * ArrayUtils.add([2L, 6L, 3L], 2, 1L)   \u003d [2L, 6L, 1L, 3L]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e array.length).\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(float[], int, float)",
      "begin_line": 4249,
      "end_line": 4251,
      "comment": "\n     * \u003cp\u003eInserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add([1.1f], 0, 2.2f)               \u003d [2.2f, 1.1f]\n     * ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        \u003d [2.3f, 6.4f, 10.5f]\n     * ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        \u003d [-4.8f, 2.6f, 6.7f]\n     * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   \u003d [2.9f, 6.0f, 1.0f, 0.3f]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e array.length).\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(double[], int, double)",
      "begin_line": 4280,
      "end_line": 4282,
      "comment": "\n     * \u003cp\u003eInserts the specified element at the specified position in the array.\n     * Shifts the element currently at that position (if any) and any subsequent\n     * elements to the right (adds one to their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array plus the given element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, a new one element array is returned\n     *  whose component type is the same as the element.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.add([1.1], 0, 2.2)              \u003d [2.2, 1.1]\n     * ArrayUtils.add([2.3, 6.4], 2, 10.5)        \u003d [2.3, 6.4, 10.5]\n     * ArrayUtils.add([2.6, 6.7], 0, -4.8)        \u003d [-4.8, 2.6, 6.7]\n     * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    \u003d [2.9, 6.0, 1.0, 0.3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @return A new array containing the existing elements and the new element\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e array.length).\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.add(java.lang.Object, int, java.lang.Object, java.lang.Class\u003c?\u003e)",
      "begin_line": 4295,
      "end_line": 4315,
      "comment": "\n     * Underlying implementation of add(array, index, element) methods.\n     * The last parameter is the class, which may not equal element.getClass\n     * for primitives.\n     *\n     * @param array  the array to add the element to, may be {@code null}\n     * @param index  the position of the new object\n     * @param element  the object to add\n     * @param clss the type of the element being added\n     * @return A new array containing the existing elements and the new element\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(T[], int)",
      "begin_line": 4346,
      "end_line": 4349,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.remove([\"a\"], 0)           \u003d []\n     * ArrayUtils.remove([\"a\", \"b\"], 0)      \u003d [\"b\"]\n     * ArrayUtils.remove([\"a\", \"b\"], 1)      \u003d [\"a\"]\n     * ArrayUtils.remove([\"a\", \"b\", \"c\"], 1) \u003d [\"a\", \"c\"]\n     * \u003c/pre\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(T[], java.lang.Object)",
      "begin_line": 4377,
      "end_line": 4383,
      "comment": "\n     * \u003cp\u003eRemoves the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left\n     * (subtracts one from their indices). If the array doesn\u0027t contains\n     * such an element, no elements are removed from the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElement(null, \"a\")            \u003d null\n     * ArrayUtils.removeElement([], \"a\")              \u003d []\n     * ArrayUtils.removeElement([\"a\"], \"b\")           \u003d [\"a\"]\n     * ArrayUtils.removeElement([\"a\", \"b\"], \"a\")      \u003d [\"b\"]\n     * ArrayUtils.removeElement([\"a\", \"b\", \"a\"], \"a\") \u003d [\"b\", \"a\"]\n     * \u003c/pre\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(boolean[], int)",
      "begin_line": 4413,
      "end_line": 4415,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.remove([true], 0)              \u003d []\n     * ArrayUtils.remove([true, false], 0)       \u003d [false]\n     * ArrayUtils.remove([true, false], 1)       \u003d [true]\n     * ArrayUtils.remove([true, true, false], 1) \u003d [true, false]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(boolean[], boolean)",
      "begin_line": 4442,
      "end_line": 4448,
      "comment": "\n     * \u003cp\u003eRemoves the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left\n     * (subtracts one from their indices). If the array doesn\u0027t contains\n     * such an element, no elements are removed from the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElement(null, true)                \u003d null\n     * ArrayUtils.removeElement([], true)                  \u003d []\n     * ArrayUtils.removeElement([true], false)             \u003d [true]\n     * ArrayUtils.removeElement([true, false], false)      \u003d [true]\n     * ArrayUtils.removeElement([true, false, true], true) \u003d [false, true]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(byte[], int)",
      "begin_line": 4478,
      "end_line": 4480,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.remove([1], 0)          \u003d []\n     * ArrayUtils.remove([1, 0], 0)       \u003d [0]\n     * ArrayUtils.remove([1, 0], 1)       \u003d [1]\n     * ArrayUtils.remove([1, 0, 1], 1)    \u003d [1, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(byte[], byte)",
      "begin_line": 4507,
      "end_line": 4513,
      "comment": "\n     * \u003cp\u003eRemoves the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left\n     * (subtracts one from their indices). If the array doesn\u0027t contains\n     * such an element, no elements are removed from the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElement(null, 1)        \u003d null\n     * ArrayUtils.removeElement([], 1)          \u003d []\n     * ArrayUtils.removeElement([1], 0)         \u003d [1]\n     * ArrayUtils.removeElement([1, 0], 0)      \u003d [1]\n     * ArrayUtils.removeElement([1, 0, 1], 1)   \u003d [0, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(char[], int)",
      "begin_line": 4543,
      "end_line": 4545,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.remove([\u0027a\u0027], 0)           \u003d []\n     * ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 0)      \u003d [\u0027b\u0027]\n     * ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027], 1)      \u003d [\u0027a\u0027]\n     * ArrayUtils.remove([\u0027a\u0027, \u0027b\u0027, \u0027c\u0027], 1) \u003d [\u0027a\u0027, \u0027c\u0027]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(char[], char)",
      "begin_line": 4572,
      "end_line": 4578,
      "comment": "\n     * \u003cp\u003eRemoves the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left\n     * (subtracts one from their indices). If the array doesn\u0027t contains\n     * such an element, no elements are removed from the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElement(null, \u0027a\u0027)            \u003d null\n     * ArrayUtils.removeElement([], \u0027a\u0027)              \u003d []\n     * ArrayUtils.removeElement([\u0027a\u0027], \u0027b\u0027)           \u003d [\u0027a\u0027]\n     * ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027], \u0027a\u0027)      \u003d [\u0027b\u0027]\n     * ArrayUtils.removeElement([\u0027a\u0027, \u0027b\u0027, \u0027a\u0027], \u0027a\u0027) \u003d [\u0027b\u0027, \u0027a\u0027]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(double[], int)",
      "begin_line": 4608,
      "end_line": 4610,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.remove([1.1], 0)           \u003d []\n     * ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0]\n     * ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5]\n     * ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(double[], double)",
      "begin_line": 4637,
      "end_line": 4643,
      "comment": "\n     * \u003cp\u003eRemoves the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left\n     * (subtracts one from their indices). If the array doesn\u0027t contains\n     * such an element, no elements are removed from the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElement(null, 1.1)            \u003d null\n     * ArrayUtils.removeElement([], 1.1)              \u003d []\n     * ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1]\n     * ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3]\n     * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(float[], int)",
      "begin_line": 4673,
      "end_line": 4675,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.remove([1.1], 0)           \u003d []\n     * ArrayUtils.remove([2.5, 6.0], 0)      \u003d [6.0]\n     * ArrayUtils.remove([2.5, 6.0], 1)      \u003d [2.5]\n     * ArrayUtils.remove([2.5, 6.0, 3.8], 1) \u003d [2.5, 3.8]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(float[], float)",
      "begin_line": 4702,
      "end_line": 4708,
      "comment": "\n     * \u003cp\u003eRemoves the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left\n     * (subtracts one from their indices). If the array doesn\u0027t contains\n     * such an element, no elements are removed from the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElement(null, 1.1)            \u003d null\n     * ArrayUtils.removeElement([], 1.1)              \u003d []\n     * ArrayUtils.removeElement([1.1], 1.2)           \u003d [1.1]\n     * ArrayUtils.removeElement([1.1, 2.3], 1.1)      \u003d [2.3]\n     * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) \u003d [2.3, 1.1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(int[], int)",
      "begin_line": 4738,
      "end_line": 4740,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.remove([1], 0)         \u003d []\n     * ArrayUtils.remove([2, 6], 0)      \u003d [6]\n     * ArrayUtils.remove([2, 6], 1)      \u003d [2]\n     * ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(int[], int)",
      "begin_line": 4767,
      "end_line": 4773,
      "comment": "\n     * \u003cp\u003eRemoves the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left\n     * (subtracts one from their indices). If the array doesn\u0027t contains\n     * such an element, no elements are removed from the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElement(null, 1)      \u003d null\n     * ArrayUtils.removeElement([], 1)        \u003d []\n     * ArrayUtils.removeElement([1], 2)       \u003d [1]\n     * ArrayUtils.removeElement([1, 3], 1)    \u003d [3]\n     * ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(long[], int)",
      "begin_line": 4803,
      "end_line": 4805,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.remove([1], 0)         \u003d []\n     * ArrayUtils.remove([2, 6], 0)      \u003d [6]\n     * ArrayUtils.remove([2, 6], 1)      \u003d [2]\n     * ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(long[], long)",
      "begin_line": 4832,
      "end_line": 4838,
      "comment": "\n     * \u003cp\u003eRemoves the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left\n     * (subtracts one from their indices). If the array doesn\u0027t contains\n     * such an element, no elements are removed from the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElement(null, 1)      \u003d null\n     * ArrayUtils.removeElement([], 1)        \u003d []\n     * ArrayUtils.removeElement([1], 2)       \u003d [1]\n     * ArrayUtils.removeElement([1, 3], 1)    \u003d [3]\n     * ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(short[], int)",
      "begin_line": 4868,
      "end_line": 4870,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.remove([1], 0)         \u003d []\n     * ArrayUtils.remove([2, 6], 0)      \u003d [6]\n     * ArrayUtils.remove([2, 6], 1)      \u003d [2]\n     * ArrayUtils.remove([2, 6, 3], 1)   \u003d [2, 3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElement(short[], short)",
      "begin_line": 4897,
      "end_line": 4903,
      "comment": "\n     * \u003cp\u003eRemoves the first occurrence of the specified element from the\n     * specified array. All subsequent elements are shifted to the left\n     * (subtracts one from their indices). If the array doesn\u0027t contains\n     * such an element, no elements are removed from the array.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the first occurrence of the specified element. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElement(null, 1)      \u003d null\n     * ArrayUtils.removeElement([], 1)        \u003d []\n     * ArrayUtils.removeElement([1], 2)       \u003d [1]\n     * ArrayUtils.removeElement([1, 3], 1)    \u003d [3]\n     * ArrayUtils.removeElement([1, 3, 1], 1) \u003d [3, 1]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param element  the element to be removed\n     * @return A new array containing the existing elements except the first\n     *         occurrence of the specified element.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.remove(java.lang.Object, int)",
      "begin_line": 4926,
      "end_line": 4939,
      "comment": "\n     * \u003cp\u003eRemoves the element at the specified position from the specified array.\n     * All subsequent elements are shifted to the left (subtracts one from\n     * their indices).\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except the element on the specified position. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * @param array  the array to remove the element from, may not be {@code null}\n     * @param index  the position of the element to be removed\n     * @return A new array containing the existing elements except the element\n     *         at the specified position.\n     * @throws IndexOutOfBoundsException if the index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 2.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(T[], int...)",
      "begin_line": 4967,
      "end_line": 4970,
      "comment": "\n     * \u003cp\u003eRemoves the elements at the specified positions from the specified array.\n     * All remaining elements are shifted to the left.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except those at the specified positions. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeAll([\"a\", \"b\", \"c\"], 0, 2) \u003d [\"b\"]\n     * ArrayUtils.removeAll([\"a\", \"b\", \"c\"], 1, 2) \u003d [\"a\"]\n     * \u003c/pre\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array   the array to remove the element from, may not be {@code null}\n     * @param indices the positions of the elements to be removed\n     * @return A new array containing the existing elements except those\n     *         at the specified positions.\n     * @throws IndexOutOfBoundsException if any index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(T[], T...)",
      "begin_line": 5000,
      "end_line": 5029,
      "comment": "\n     * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities,\n     * from the specified array. All subsequent elements are shifted left.\n     * For any element-to-be-removed specified in greater quantities than\n     * contained in the original array, no change occurs beyond the\n     * removal of the existing matching items.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except for the earliest-encountered occurrences of the specified\n     * elements. The component type of the returned array is always the same\n     * as that of the input array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElements(null, \"a\", \"b\")            \u003d null\n     * ArrayUtils.removeElements([], \"a\", \"b\")              \u003d []\n     * ArrayUtils.removeElements([\"a\"], \"b\", \"c\")           \u003d [\"a\"]\n     * ArrayUtils.removeElements([\"a\", \"b\"], \"a\", \"c\")      \u003d [\"b\"]\n     * ArrayUtils.removeElements([\"a\", \"b\", \"a\"], \"a\")      \u003d [\"b\", \"a\"]\n     * ArrayUtils.removeElements([\"a\", \"b\", \"a\"], \"a\", \"a\") \u003d [\"b\"]\n     * \u003c/pre\u003e\n     *\n     * @param \u003cT\u003e the component type of the array\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param values the elements to be removed\n     * @return A new array containing the existing elements except the\n     *         earliest-encountered occurrences of the specified elements.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(byte[], int...)",
      "begin_line": 5060,
      "end_line": 5062,
      "comment": "\n     * \u003cp\u003eRemoves the elements at the specified positions from the specified array.\n     * All remaining elements are shifted to the left.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except those at the specified positions. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeAll([1], 0)             \u003d []\n     * ArrayUtils.removeAll([2, 6], 0)          \u003d [6]\n     * ArrayUtils.removeAll([2, 6], 0, 1)       \u003d []\n     * ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array   the array to remove the element from, may not be {@code null}\n     * @param indices the positions of the elements to be removed\n     * @return A new array containing the existing elements except those\n     *         at the specified positions.\n     * @throws IndexOutOfBoundsException if any index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(byte[], byte...)",
      "begin_line": 5091,
      "end_line": 5118,
      "comment": "\n     * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities,\n     * from the specified array. All subsequent elements are shifted left.\n     * For any element-to-be-removed specified in greater quantities than\n     * contained in the original array, no change occurs beyond the\n     * removal of the existing matching items.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except for the earliest-encountered occurrences of the specified\n     * elements. The component type of the returned array is always the same\n     * as that of the input array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElements(null, 1, 2)      \u003d null\n     * ArrayUtils.removeElements([], 1, 2)        \u003d []\n     * ArrayUtils.removeElements([1], 2, 3)       \u003d [1]\n     * ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3]\n     * ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1]\n     * ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param values the elements to be removed\n     * @return A new array containing the existing elements except the\n     *         earliest-encountered occurrences of the specified elements.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(short[], int...)",
      "begin_line": 5149,
      "end_line": 5151,
      "comment": "\n     * \u003cp\u003eRemoves the elements at the specified positions from the specified array.\n     * All remaining elements are shifted to the left.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except those at the specified positions. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeAll([1], 0)             \u003d []\n     * ArrayUtils.removeAll([2, 6], 0)          \u003d [6]\n     * ArrayUtils.removeAll([2, 6], 0, 1)       \u003d []\n     * ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array   the array to remove the element from, may not be {@code null}\n     * @param indices the positions of the elements to be removed\n     * @return A new array containing the existing elements except those\n     *         at the specified positions.\n     * @throws IndexOutOfBoundsException if any index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(short[], short...)",
      "begin_line": 5180,
      "end_line": 5207,
      "comment": "\n     * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities,\n     * from the specified array. All subsequent elements are shifted left.\n     * For any element-to-be-removed specified in greater quantities than\n     * contained in the original array, no change occurs beyond the\n     * removal of the existing matching items.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except for the earliest-encountered occurrences of the specified\n     * elements. The component type of the returned array is always the same\n     * as that of the input array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElements(null, 1, 2)      \u003d null\n     * ArrayUtils.removeElements([], 1, 2)        \u003d []\n     * ArrayUtils.removeElements([1], 2, 3)       \u003d [1]\n     * ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3]\n     * ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1]\n     * ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param values the elements to be removed\n     * @return A new array containing the existing elements except the\n     *         earliest-encountered occurrences of the specified elements.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(int[], int...)",
      "begin_line": 5238,
      "end_line": 5240,
      "comment": "\n     * \u003cp\u003eRemoves the elements at the specified positions from the specified array.\n     * All remaining elements are shifted to the left.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except those at the specified positions. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeAll([1], 0)             \u003d []\n     * ArrayUtils.removeAll([2, 6], 0)          \u003d [6]\n     * ArrayUtils.removeAll([2, 6], 0, 1)       \u003d []\n     * ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array   the array to remove the element from, may not be {@code null}\n     * @param indices the positions of the elements to be removed\n     * @return A new array containing the existing elements except those\n     *         at the specified positions.\n     * @throws IndexOutOfBoundsException if any index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(int[], int...)",
      "begin_line": 5269,
      "end_line": 5296,
      "comment": "\n     * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities,\n     * from the specified array. All subsequent elements are shifted left.\n     * For any element-to-be-removed specified in greater quantities than\n     * contained in the original array, no change occurs beyond the\n     * removal of the existing matching items.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except for the earliest-encountered occurrences of the specified\n     * elements. The component type of the returned array is always the same\n     * as that of the input array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElements(null, 1, 2)      \u003d null\n     * ArrayUtils.removeElements([], 1, 2)        \u003d []\n     * ArrayUtils.removeElements([1], 2, 3)       \u003d [1]\n     * ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3]\n     * ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1]\n     * ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param values the elements to be removed\n     * @return A new array containing the existing elements except the\n     *         earliest-encountered occurrences of the specified elements.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(char[], int...)",
      "begin_line": 5327,
      "end_line": 5329,
      "comment": "\n     * \u003cp\u003eRemoves the elements at the specified positions from the specified array.\n     * All remaining elements are shifted to the left.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except those at the specified positions. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeAll([1], 0)             \u003d []\n     * ArrayUtils.removeAll([2, 6], 0)          \u003d [6]\n     * ArrayUtils.removeAll([2, 6], 0, 1)       \u003d []\n     * ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array   the array to remove the element from, may not be {@code null}\n     * @param indices the positions of the elements to be removed\n     * @return A new array containing the existing elements except those\n     *         at the specified positions.\n     * @throws IndexOutOfBoundsException if any index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(char[], char...)",
      "begin_line": 5358,
      "end_line": 5385,
      "comment": "\n     * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities,\n     * from the specified array. All subsequent elements are shifted left.\n     * For any element-to-be-removed specified in greater quantities than\n     * contained in the original array, no change occurs beyond the\n     * removal of the existing matching items.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except for the earliest-encountered occurrences of the specified\n     * elements. The component type of the returned array is always the same\n     * as that of the input array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElements(null, 1, 2)      \u003d null\n     * ArrayUtils.removeElements([], 1, 2)        \u003d []\n     * ArrayUtils.removeElements([1], 2, 3)       \u003d [1]\n     * ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3]\n     * ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1]\n     * ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param values the elements to be removed\n     * @return A new array containing the existing elements except the\n     *         earliest-encountered occurrences of the specified elements.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(long[], int...)",
      "begin_line": 5416,
      "end_line": 5418,
      "comment": "\n     * \u003cp\u003eRemoves the elements at the specified positions from the specified array.\n     * All remaining elements are shifted to the left.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except those at the specified positions. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeAll([1], 0)             \u003d []\n     * ArrayUtils.removeAll([2, 6], 0)          \u003d [6]\n     * ArrayUtils.removeAll([2, 6], 0, 1)       \u003d []\n     * ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array   the array to remove the element from, may not be {@code null}\n     * @param indices the positions of the elements to be removed\n     * @return A new array containing the existing elements except those\n     *         at the specified positions.\n     * @throws IndexOutOfBoundsException if any index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(long[], long...)",
      "begin_line": 5447,
      "end_line": 5474,
      "comment": "\n     * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities,\n     * from the specified array. All subsequent elements are shifted left.\n     * For any element-to-be-removed specified in greater quantities than\n     * contained in the original array, no change occurs beyond the\n     * removal of the existing matching items.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except for the earliest-encountered occurrences of the specified\n     * elements. The component type of the returned array is always the same\n     * as that of the input array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElements(null, 1, 2)      \u003d null\n     * ArrayUtils.removeElements([], 1, 2)        \u003d []\n     * ArrayUtils.removeElements([1], 2, 3)       \u003d [1]\n     * ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3]\n     * ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1]\n     * ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param values the elements to be removed\n     * @return A new array containing the existing elements except the\n     *         earliest-encountered occurrences of the specified elements.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(float[], int...)",
      "begin_line": 5505,
      "end_line": 5507,
      "comment": "\n     * \u003cp\u003eRemoves the elements at the specified positions from the specified array.\n     * All remaining elements are shifted to the left.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except those at the specified positions. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeAll([1], 0)             \u003d []\n     * ArrayUtils.removeAll([2, 6], 0)          \u003d [6]\n     * ArrayUtils.removeAll([2, 6], 0, 1)       \u003d []\n     * ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array   the array to remove the element from, may not be {@code null}\n     * @param indices the positions of the elements to be removed\n     * @return A new array containing the existing elements except those\n     *         at the specified positions.\n     * @throws IndexOutOfBoundsException if any index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(float[], float...)",
      "begin_line": 5536,
      "end_line": 5563,
      "comment": "\n     * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities,\n     * from the specified array. All subsequent elements are shifted left.\n     * For any element-to-be-removed specified in greater quantities than\n     * contained in the original array, no change occurs beyond the\n     * removal of the existing matching items.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except for the earliest-encountered occurrences of the specified\n     * elements. The component type of the returned array is always the same\n     * as that of the input array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElements(null, 1, 2)      \u003d null\n     * ArrayUtils.removeElements([], 1, 2)        \u003d []\n     * ArrayUtils.removeElements([1], 2, 3)       \u003d [1]\n     * ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3]\n     * ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1]\n     * ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param values the elements to be removed\n     * @return A new array containing the existing elements except the\n     *         earliest-encountered occurrences of the specified elements.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(double[], int...)",
      "begin_line": 5594,
      "end_line": 5596,
      "comment": "\n     * \u003cp\u003eRemoves the elements at the specified positions from the specified array.\n     * All remaining elements are shifted to the left.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except those at the specified positions. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeAll([1], 0)             \u003d []\n     * ArrayUtils.removeAll([2, 6], 0)          \u003d [6]\n     * ArrayUtils.removeAll([2, 6], 0, 1)       \u003d []\n     * ArrayUtils.removeAll([2, 6, 3], 1, 2)    \u003d [2]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 2)    \u003d [6]\n     * ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) \u003d []\n     * \u003c/pre\u003e\n     *\n     * @param array   the array to remove the element from, may not be {@code null}\n     * @param indices the positions of the elements to be removed\n     * @return A new array containing the existing elements except those\n     *         at the specified positions.\n     * @throws IndexOutOfBoundsException if any index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(double[], double...)",
      "begin_line": 5625,
      "end_line": 5652,
      "comment": "\n     * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities,\n     * from the specified array. All subsequent elements are shifted left.\n     * For any element-to-be-removed specified in greater quantities than\n     * contained in the original array, no change occurs beyond the\n     * removal of the existing matching items.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except for the earliest-encountered occurrences of the specified\n     * elements. The component type of the returned array is always the same\n     * as that of the input array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElements(null, 1, 2)      \u003d null\n     * ArrayUtils.removeElements([], 1, 2)        \u003d []\n     * ArrayUtils.removeElements([1], 2, 3)       \u003d [1]\n     * ArrayUtils.removeElements([1, 3], 1, 2)    \u003d [3]\n     * ArrayUtils.removeElements([1, 3, 1], 1)    \u003d [3, 1]\n     * ArrayUtils.removeElements([1, 3, 1], 1, 1) \u003d [3]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param values the elements to be removed\n     * @return A new array containing the existing elements except the\n     *         earliest-encountered occurrences of the specified elements.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(boolean[], int...)",
      "begin_line": 5679,
      "end_line": 5681,
      "comment": "\n     * \u003cp\u003eRemoves the elements at the specified positions from the specified array.\n     * All remaining elements are shifted to the left.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except those at the specified positions. The component\n     * type of the returned array is always the same as that of the input\n     * array.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf the input array is {@code null}, an IndexOutOfBoundsException\n     * will be thrown, because in that case no valid index can be specified.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeAll([true, false, true], 0, 2) \u003d [false]\n     * ArrayUtils.removeAll([true, false, true], 1, 2) \u003d [true]\n     * \u003c/pre\u003e\n     *\n     * @param array   the array to remove the element from, may not be {@code null}\n     * @param indices the positions of the elements to be removed\n     * @return A new array containing the existing elements except those\n     *         at the specified positions.\n     * @throws IndexOutOfBoundsException if any index is out of range\n     * (index \u003c 0 || index \u003e\u003d array.length), or if the array is {@code null}.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeElements(boolean[], boolean...)",
      "begin_line": 5710,
      "end_line": 5737,
      "comment": "\n     * \u003cp\u003eRemoves occurrences of specified elements, in specified quantities,\n     * from the specified array. All subsequent elements are shifted left.\n     * For any element-to-be-removed specified in greater quantities than\n     * contained in the original array, no change occurs beyond the\n     * removal of the existing matching items.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis method returns a new array with the same elements of the input\n     * array except for the earliest-encountered occurrences of the specified\n     * elements. The component type of the returned array is always the same\n     * as that of the input array.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     * ArrayUtils.removeElements(null, true, false)               \u003d null\n     * ArrayUtils.removeElements([], true, false)                 \u003d []\n     * ArrayUtils.removeElements([true], false, false)            \u003d [true]\n     * ArrayUtils.removeElements([true, false], true, true)       \u003d [false]\n     * ArrayUtils.removeElements([true, false, true], true)       \u003d [false, true]\n     * ArrayUtils.removeElements([true, false, true], true, true) \u003d [false]\n     * \u003c/pre\u003e\n     *\n     * @param array  the array to remove the element from, may be {@code null}\n     * @param values the elements to be removed\n     * @return A new array containing the existing elements except the\n     *         earliest-encountered occurrences of the specified elements.\n     * @since 3.0.1\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(java.lang.Object, int...)",
      "begin_line": 5747,
      "end_line": 5787,
      "comment": " package protected for access by unit tests"
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.ArrayUtils.removeAll(java.lang.Object, java.util.BitSet)",
      "begin_line": 5798,
      "end_line": 5825,
      "comment": " package protected for access by unit tests"
    }
  ]
}