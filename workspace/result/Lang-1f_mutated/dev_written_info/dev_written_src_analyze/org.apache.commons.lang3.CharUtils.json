{
  "filepath": "/tmp/Lang-1f/src/main/java/org/apache/commons/lang3/CharUtils.java",
  "nodes": [
    {
      "type": "class_interface",
      "name": "CharUtils",
      "is_interface": false,
      "parent_types": [],
      "begin_line": 30,
      "end_line": 539,
      "comment": "\n * \u003cp\u003eOperations on char primitives and Character objects.\u003c/p\u003e\n *\n * \u003cp\u003eThis class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behaviour in more detail.\u003c/p\u003e\n * \n * \u003cp\u003e#ThreadSafe#\u003c/p\u003e\n * @since 2.1\n * @version $Id$\n "
    },
    {
      "type": "field",
      "varNames": [
        "CHAR_STRING_ARRAY"
      ],
      "begin_line": 32,
      "end_line": 32,
      "comment": ""
    },
    {
      "type": "field",
      "varNames": [
        "LF"
      ],
      "begin_line": 41,
      "end_line": 41,
      "comment": "\n     * {@code \\u000a} linefeed LF (\u0027\\n\u0027).\n     * \n     * @see \u003ca href\u003d\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6\"\u003eJLF: Escape Sequences\n     *      for Character and String Literals\u003c/a\u003e\n     * @since 2.2\n     "
    },
    {
      "type": "field",
      "varNames": [
        "CR"
      ],
      "begin_line": 50,
      "end_line": 50,
      "comment": "\n     * {@code \\u000d} carriage return CR (\u0027\\r\u0027).\n     * \n     * @see \u003ca href\u003d\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6\"\u003eJLF: Escape Sequences\n     *      for Character and String Literals\u003c/a\u003e\n     * @since 2.2\n     "
    },
    {
      "type": "constructor",
      "signature": "org.apache.commons.lang3.CharUtils.CharUtils()",
      "begin_line": 66,
      "end_line": 68,
      "comment": "\n     * \u003cp\u003e{@code CharUtils} instances should NOT be constructed in standard programming.\n     * Instead, the class should be used as {@code CharUtils.toString(\u0027c\u0027);}.\u003c/p\u003e\n     *\n     * \u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance\n     * to operate.\u003c/p\u003e\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toCharacterObject(char)",
      "begin_line": 86,
      "end_line": 89,
      "comment": "\n     * \u003cp\u003eConverts the character to a Character.\u003c/p\u003e\n     * \n     * \u003cp\u003eFor ASCII 7 bit characters, this uses a cache that will return the\n     * same Character object each time.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.toCharacterObject(\u0027 \u0027)  \u003d \u0027 \u0027\n     *   CharUtils.toCharacterObject(\u0027A\u0027)  \u003d \u0027A\u0027\n     * \u003c/pre\u003e\n     *\n     * @deprecated Java 5 introduced {@link Character#valueOf(char)} which caches chars 0 through 127.\n     * @param ch  the character to convert\n     * @return a Character of the specified character\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toCharacterObject(java.lang.String)",
      "begin_line": 108,
      "end_line": 113,
      "comment": "\n     * \u003cp\u003eConverts the String to a Character using the first character, returning\n     * null for empty Strings.\u003c/p\u003e\n     * \n     * \u003cp\u003eFor ASCII 7 bit characters, this uses a cache that will return the\n     * same Character object each time.\u003c/p\u003e\n     * \n     * \u003cpre\u003e\n     *   CharUtils.toCharacterObject(null) \u003d null\n     *   CharUtils.toCharacterObject(\"\")   \u003d null\n     *   CharUtils.toCharacterObject(\"A\")  \u003d \u0027A\u0027\n     *   CharUtils.toCharacterObject(\"BA\") \u003d \u0027B\u0027\n     * \u003c/pre\u003e\n     *\n     * @param str  the character to convert\n     * @return the Character value of the first letter of the String\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toChar(java.lang.Character)",
      "begin_line": 129,
      "end_line": 134,
      "comment": "\n     * \u003cp\u003eConverts the Character to a char throwing an exception for {@code null}.\u003c/p\u003e\n     * \n     * \u003cpre\u003e\n     *   CharUtils.toChar(\u0027 \u0027)  \u003d \u0027 \u0027\n     *   CharUtils.toChar(\u0027A\u0027)  \u003d \u0027A\u0027\n     *   CharUtils.toChar(null) throws IllegalArgumentException\n     * \u003c/pre\u003e\n     *\n     * @param ch  the character to convert\n     * @return the char value of the Character\n     * @throws IllegalArgumentException if the Character is null\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toChar(java.lang.Character, char)",
      "begin_line": 149,
      "end_line": 154,
      "comment": "\n     * \u003cp\u003eConverts the Character to a char handling {@code null}.\u003c/p\u003e\n     * \n     * \u003cpre\u003e\n     *   CharUtils.toChar(null, \u0027X\u0027) \u003d \u0027X\u0027\n     *   CharUtils.toChar(\u0027 \u0027, \u0027X\u0027)  \u003d \u0027 \u0027\n     *   CharUtils.toChar(\u0027A\u0027, \u0027X\u0027)  \u003d \u0027A\u0027\n     * \u003c/pre\u003e\n     *\n     * @param ch  the character to convert\n     * @param defaultValue  the value to use if the  Character is null\n     * @return the char value of the Character or the default if null\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toChar(java.lang.String)",
      "begin_line": 172,
      "end_line": 177,
      "comment": "\n     * \u003cp\u003eConverts the String to a char using the first character, throwing\n     * an exception on empty Strings.\u003c/p\u003e\n     * \n     * \u003cpre\u003e\n     *   CharUtils.toChar(\"A\")  \u003d \u0027A\u0027\n     *   CharUtils.toChar(\"BA\") \u003d \u0027B\u0027\n     *   CharUtils.toChar(null) throws IllegalArgumentException\n     *   CharUtils.toChar(\"\")   throws IllegalArgumentException\n     * \u003c/pre\u003e\n     *\n     * @param str  the character to convert\n     * @return the char value of the first letter of the String\n     * @throws IllegalArgumentException if the String is empty\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toChar(java.lang.String, char)",
      "begin_line": 194,
      "end_line": 199,
      "comment": "\n     * \u003cp\u003eConverts the String to a char using the first character, defaulting\n     * the value on empty Strings.\u003c/p\u003e\n     * \n     * \u003cpre\u003e\n     *   CharUtils.toChar(null, \u0027X\u0027) \u003d \u0027X\u0027\n     *   CharUtils.toChar(\"\", \u0027X\u0027)   \u003d \u0027X\u0027\n     *   CharUtils.toChar(\"A\", \u0027X\u0027)  \u003d \u0027A\u0027\n     *   CharUtils.toChar(\"BA\", \u0027X\u0027) \u003d \u0027B\u0027\n     * \u003c/pre\u003e\n     *\n     * @param str  the character to convert\n     * @param defaultValue  the value to use if the  Character is null\n     * @return the char value of the first letter of the String or the default if null\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toIntValue(char)",
      "begin_line": 217,
      "end_line": 222,
      "comment": "\n     * \u003cp\u003eConverts the character to the Integer it represents, throwing an\n     * exception if the character is not numeric.\u003c/p\u003e\n     * \n     * \u003cp\u003eThis method coverts the char \u00271\u0027 to the int 1 and so on.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.toIntValue(\u00273\u0027)  \u003d 3\n     *   CharUtils.toIntValue(\u0027A\u0027)  throws IllegalArgumentException\n     * \u003c/pre\u003e\n     *\n     * @param ch  the character to convert\n     * @return the int value of the character\n     * @throws IllegalArgumentException if the character is not ASCII numeric\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toIntValue(char, int)",
      "begin_line": 239,
      "end_line": 244,
      "comment": "\n     * \u003cp\u003eConverts the character to the Integer it represents, throwing an\n     * exception if the character is not numeric.\u003c/p\u003e\n     * \n     * \u003cp\u003eThis method coverts the char \u00271\u0027 to the int 1 and so on.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.toIntValue(\u00273\u0027, -1)  \u003d 3\n     *   CharUtils.toIntValue(\u0027A\u0027, -1)  \u003d -1\n     * \u003c/pre\u003e\n     *\n     * @param ch  the character to convert\n     * @param defaultValue  the default value to use if the character is not numeric\n     * @return the int value of the character\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toIntValue(java.lang.Character)",
      "begin_line": 262,
      "end_line": 267,
      "comment": "\n     * \u003cp\u003eConverts the character to the Integer it represents, throwing an\n     * exception if the character is not numeric.\u003c/p\u003e\n     * \n     * \u003cp\u003eThis method coverts the char \u00271\u0027 to the int 1 and so on.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.toIntValue(\u00273\u0027)  \u003d 3\n     *   CharUtils.toIntValue(null) throws IllegalArgumentException\n     *   CharUtils.toIntValue(\u0027A\u0027)  throws IllegalArgumentException\n     * \u003c/pre\u003e\n     *\n     * @param ch  the character to convert, not null\n     * @return the int value of the character\n     * @throws IllegalArgumentException if the Character is not ASCII numeric or is null\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toIntValue(java.lang.Character, int)",
      "begin_line": 285,
      "end_line": 290,
      "comment": "\n     * \u003cp\u003eConverts the character to the Integer it represents, throwing an\n     * exception if the character is not numeric.\u003c/p\u003e\n     * \n     * \u003cp\u003eThis method coverts the char \u00271\u0027 to the int 1 and so on.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.toIntValue(null, -1) \u003d -1\n     *   CharUtils.toIntValue(\u00273\u0027, -1)  \u003d 3\n     *   CharUtils.toIntValue(\u0027A\u0027, -1)  \u003d -1\n     * \u003c/pre\u003e\n     *\n     * @param ch  the character to convert\n     * @param defaultValue  the default value to use if the character is not numeric\n     * @return the int value of the character\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toString(char)",
      "begin_line": 307,
      "end_line": 312,
      "comment": "\n     * \u003cp\u003eConverts the character to a String that contains the one character.\u003c/p\u003e\n     * \n     * \u003cp\u003eFor ASCII 7 bit characters, this uses a cache that will return the\n     * same String object each time.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.toString(\u0027 \u0027)  \u003d \" \"\n     *   CharUtils.toString(\u0027A\u0027)  \u003d \"A\"\n     * \u003c/pre\u003e\n     *\n     * @param ch  the character to convert\n     * @return a String containing the one specified character\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.toString(java.lang.Character)",
      "begin_line": 331,
      "end_line": 336,
      "comment": "\n     * \u003cp\u003eConverts the character to a String that contains the one character.\u003c/p\u003e\n     * \n     * \u003cp\u003eFor ASCII 7 bit characters, this uses a cache that will return the\n     * same String object each time.\u003c/p\u003e\n     * \n     * \u003cp\u003eIf {@code null} is passed in, {@code null} will be returned.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.toString(null) \u003d null\n     *   CharUtils.toString(\u0027 \u0027)  \u003d \" \"\n     *   CharUtils.toString(\u0027A\u0027)  \u003d \"A\"\n     * \u003c/pre\u003e\n     *\n     * @param ch  the character to convert\n     * @return a String containing the one specified character\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.unicodeEscaped(char)",
      "begin_line": 352,
      "end_line": 361,
      "comment": "\n     * \u003cp\u003eConverts the string to the Unicode format \u0027\\u0020\u0027.\u003c/p\u003e\n     * \n     * \u003cp\u003eThis format is the Java source code format.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.unicodeEscaped(\u0027 \u0027) \u003d \"\\u0020\"\n     *   CharUtils.unicodeEscaped(\u0027A\u0027) \u003d \"\\u0041\"\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to convert\n     * @return the escaped Unicode string\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.unicodeEscaped(java.lang.Character)",
      "begin_line": 379,
      "end_line": 384,
      "comment": "\n     * \u003cp\u003eConverts the string to the Unicode format \u0027\\u0020\u0027.\u003c/p\u003e\n     * \n     * \u003cp\u003eThis format is the Java source code format.\u003c/p\u003e\n     * \n     * \u003cp\u003eIf {@code null} is passed in, {@code null} will be returned.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.unicodeEscaped(null) \u003d null\n     *   CharUtils.unicodeEscaped(\u0027 \u0027)  \u003d \"\\u0020\"\n     *   CharUtils.unicodeEscaped(\u0027A\u0027)  \u003d \"\\u0041\"\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to convert, may be null\n     * @return the escaped Unicode string, null if null input\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.isAscii(char)",
      "begin_line": 402,
      "end_line": 404,
      "comment": "\n     * \u003cp\u003eChecks whether the character is ASCII 7 bit.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.isAscii(\u0027a\u0027)  \u003d true\n     *   CharUtils.isAscii(\u0027A\u0027)  \u003d true\n     *   CharUtils.isAscii(\u00273\u0027)  \u003d true\n     *   CharUtils.isAscii(\u0027-\u0027)  \u003d true\n     *   CharUtils.isAscii(\u0027\\n\u0027) \u003d true\n     *   CharUtils.isAscii(\u0027\u0026copy;\u0027) \u003d false\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to check\n     * @return true if less than 128\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.isAsciiPrintable(char)",
      "begin_line": 421,
      "end_line": 423,
      "comment": "\n     * \u003cp\u003eChecks whether the character is ASCII 7 bit printable.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.isAsciiPrintable(\u0027a\u0027)  \u003d true\n     *   CharUtils.isAsciiPrintable(\u0027A\u0027)  \u003d true\n     *   CharUtils.isAsciiPrintable(\u00273\u0027)  \u003d true\n     *   CharUtils.isAsciiPrintable(\u0027-\u0027)  \u003d true\n     *   CharUtils.isAsciiPrintable(\u0027\\n\u0027) \u003d false\n     *   CharUtils.isAsciiPrintable(\u0027\u0026copy;\u0027) \u003d false\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to check\n     * @return true if between 32 and 126 inclusive\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.isAsciiControl(char)",
      "begin_line": 440,
      "end_line": 442,
      "comment": "\n     * \u003cp\u003eChecks whether the character is ASCII 7 bit control.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.isAsciiControl(\u0027a\u0027)  \u003d false\n     *   CharUtils.isAsciiControl(\u0027A\u0027)  \u003d false\n     *   CharUtils.isAsciiControl(\u00273\u0027)  \u003d false\n     *   CharUtils.isAsciiControl(\u0027-\u0027)  \u003d false\n     *   CharUtils.isAsciiControl(\u0027\\n\u0027) \u003d true\n     *   CharUtils.isAsciiControl(\u0027\u0026copy;\u0027) \u003d false\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to check\n     * @return true if less than 32 or equals 127\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.isAsciiAlpha(char)",
      "begin_line": 459,
      "end_line": 461,
      "comment": "\n     * \u003cp\u003eChecks whether the character is ASCII 7 bit alphabetic.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.isAsciiAlpha(\u0027a\u0027)  \u003d true\n     *   CharUtils.isAsciiAlpha(\u0027A\u0027)  \u003d true\n     *   CharUtils.isAsciiAlpha(\u00273\u0027)  \u003d false\n     *   CharUtils.isAsciiAlpha(\u0027-\u0027)  \u003d false\n     *   CharUtils.isAsciiAlpha(\u0027\\n\u0027) \u003d false\n     *   CharUtils.isAsciiAlpha(\u0027\u0026copy;\u0027) \u003d false\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to check\n     * @return true if between 65 and 90 or 97 and 122 inclusive\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper(char)",
      "begin_line": 478,
      "end_line": 480,
      "comment": "\n     * \u003cp\u003eChecks whether the character is ASCII 7 bit alphabetic upper case.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.isAsciiAlphaUpper(\u0027a\u0027)  \u003d false\n     *   CharUtils.isAsciiAlphaUpper(\u0027A\u0027)  \u003d true\n     *   CharUtils.isAsciiAlphaUpper(\u00273\u0027)  \u003d false\n     *   CharUtils.isAsciiAlphaUpper(\u0027-\u0027)  \u003d false\n     *   CharUtils.isAsciiAlphaUpper(\u0027\\n\u0027) \u003d false\n     *   CharUtils.isAsciiAlphaUpper(\u0027\u0026copy;\u0027) \u003d false\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to check\n     * @return true if between 65 and 90 inclusive\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.isAsciiAlphaLower(char)",
      "begin_line": 497,
      "end_line": 499,
      "comment": "\n     * \u003cp\u003eChecks whether the character is ASCII 7 bit alphabetic lower case.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.isAsciiAlphaLower(\u0027a\u0027)  \u003d true\n     *   CharUtils.isAsciiAlphaLower(\u0027A\u0027)  \u003d false\n     *   CharUtils.isAsciiAlphaLower(\u00273\u0027)  \u003d false\n     *   CharUtils.isAsciiAlphaLower(\u0027-\u0027)  \u003d false\n     *   CharUtils.isAsciiAlphaLower(\u0027\\n\u0027) \u003d false\n     *   CharUtils.isAsciiAlphaLower(\u0027\u0026copy;\u0027) \u003d false\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to check\n     * @return true if between 97 and 122 inclusive\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.isAsciiNumeric(char)",
      "begin_line": 516,
      "end_line": 518,
      "comment": "\n     * \u003cp\u003eChecks whether the character is ASCII 7 bit numeric.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.isAsciiNumeric(\u0027a\u0027)  \u003d false\n     *   CharUtils.isAsciiNumeric(\u0027A\u0027)  \u003d false\n     *   CharUtils.isAsciiNumeric(\u00273\u0027)  \u003d true\n     *   CharUtils.isAsciiNumeric(\u0027-\u0027)  \u003d false\n     *   CharUtils.isAsciiNumeric(\u0027\\n\u0027) \u003d false\n     *   CharUtils.isAsciiNumeric(\u0027\u0026copy;\u0027) \u003d false\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to check\n     * @return true if between 48 and 57 inclusive\n     "
    },
    {
      "type": "method",
      "signature": "org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char)",
      "begin_line": 535,
      "end_line": 537,
      "comment": "\n     * \u003cp\u003eChecks whether the character is ASCII 7 bit numeric.\u003c/p\u003e\n     *\n     * \u003cpre\u003e\n     *   CharUtils.isAsciiAlphanumeric(\u0027a\u0027)  \u003d true\n     *   CharUtils.isAsciiAlphanumeric(\u0027A\u0027)  \u003d true\n     *   CharUtils.isAsciiAlphanumeric(\u00273\u0027)  \u003d true\n     *   CharUtils.isAsciiAlphanumeric(\u0027-\u0027)  \u003d false\n     *   CharUtils.isAsciiAlphanumeric(\u0027\\n\u0027) \u003d false\n     *   CharUtils.isAsciiAlphanumeric(\u0027\u0026copy;\u0027) \u003d false\n     * \u003c/pre\u003e\n     * \n     * @param ch  the character to check\n     * @return true if between 48 and 57 or 65 and 90 or 97 and 122 inclusive\n     "
    }
  ]
}