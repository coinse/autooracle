import os 
import argparse
import subprocess 
import shlex
from llm_api import query_chat_llm
from env import EvoD4jEnv
from evosuite import parse as parse_evosuite

prompt = """
You are a oracle judgement assistant. You will be presented with failing tests, the results of executing these, 
and the test case generated by Evosuite that you should verify whether the oracle in the generated test case is correct or not.

This is the body of failing test: 
```
{}
```
And this is the error message when executing the failing tests:
```
{}
```
Please verify wheter the oracle in the generated test case is correct or not.
```
{}
```
"""

def auto_oracle(project, version, ts_id):
    env = EvoD4jEnv(project, version, ts_id)
    """
    Collect generated test's metadata
    """
    testcases = {}
    for dp, dn, fn in os.walk(env.evosuite_test_dir):
        for f in fn:
            if f.endswith("ESTest.java"):
                relpath = os.path.relpath(os.path.join(dp, f), start = env.evosuite_test_dir)
                testcases[relpath] = []
                coverage, test_content = parse_evosuite(os.path.join(dp, f))

                for test_no, test_src in test_content.items():
                    testcases[relpath].append((test_no, test_src))
    """
    Load failing tests
    """
    with open(env.failing_tests, 'r') as f:
        failing_tests = f.read().strip().split('\n')
    """
    Excute failing tests
    """
    for failing_test in failing_tests :
        subprocess.run(
        shlex.split("defects4j test -w {} -t {}".format(env.buggy_tmp_dir, failing_test)),
        universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    """
    Parse failing tests exec results
    """
    fails = {}
    with open(env.buggy_tmp_dir+"/failing_tests","r") as test_result:
        for l in test_result:
            if l.startswith("---"):
                failing_test_name = l[4:].strip()
                fails[failing_test_name] = ""
            else:
                fails[failing_test_name] += l
    print(fails)
    for relpath in testcases:
        for test_no, test_src in testcases[relpath]:
            for failing_test_name,error_message in fails.items():
                #query_chat_llm(prompt.format(failing_test_name,error_message,test_src))
                pass


          

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('project', type=str)
    parser.add_argument('version', type=str)
    parser.add_argument('--id', '-i', type=str, default='1')
    args = parser.parse_args()

    project = args.project
    version = args.version
    ts_id = args.id
    
    auto_oracle(project, version, ts_id)