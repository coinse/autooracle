,dir,evo_relpath,evo_test_no,evo_test_src,evo_target_method,dev_relpath,dev_method_signature,dev_test_src,target_method_src,cosin_sim_score
11,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testToString(),"    @Test(timeout = 666000)
    public void testToString() throws Exception {
        final Test testAnno = getClass().getDeclaredMethod(""testToString"")
                .getAnnotation(Test.class);
        final String toString = AnnotationUtils.toString(testAnno);
        assertTrue(toString.startsWith(""@org.junit.Test(""));
        assertTrue(toString.endsWith("")""));
        assertTrue(toString.contains(""expected=class org.junit.Test$None""));
        assertTrue(toString.contains(""timeout=666000""));
        assertTrue(toString.contains("", ""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7507]])
910,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsEmpty(),"    @Test
    public void testIsEmpty() {
        assertTrue(StringUtils.isEmpty(null));
        assertTrue(StringUtils.isEmpty(""""));
        assertFalse(StringUtils.isEmpty("" ""));
        assertFalse(StringUtils.isEmpty(""foo""));
        assertFalse(StringUtils.isEmpty(""  foo  ""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7371]])
912,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsBlank(),"    @Test
    public void testIsBlank() {
        assertTrue(StringUtils.isBlank(null));
        assertTrue(StringUtils.isBlank(""""));
        assertTrue(StringUtils.isBlank(StringUtilsTest.WHITESPACE));
        assertFalse(StringUtils.isBlank(""foo""));
        assertFalse(StringUtils.isBlank(""  foo  ""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7203]])
888,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testEMPTY(),"    @Test
    public void testEMPTY() {
        assertNotNull(StringUtils.EMPTY);
        assertEquals("""", StringUtils.EMPTY);
        assertEquals(0, StringUtils.EMPTY.length());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7202]])
911,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsNotEmpty(),"    @Test
    public void testIsNotEmpty() {
        assertFalse(StringUtils.isNotEmpty(null));
        assertFalse(StringUtils.isNotEmpty(""""));
        assertTrue(StringUtils.isNotEmpty("" ""));
        assertTrue(StringUtils.isNotEmpty(""foo""));
        assertTrue(StringUtils.isNotEmpty(""  foo  ""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7186]])
270,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_isNotTrue_Boolean(),"    @Test
    public void test_isNotTrue_Boolean() {
        assertFalse(BooleanUtils.isNotTrue(Boolean.TRUE));
        assertTrue(BooleanUtils.isNotTrue(Boolean.FALSE));
        assertTrue(BooleanUtils.isNotTrue((Boolean) null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7184]])
913,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testIsNotBlank(),"    @Test
    public void testIsNotBlank() {
        assertFalse(StringUtils.isNotBlank(null));
        assertFalse(StringUtils.isNotBlank(""""));
        assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));
        assertTrue(StringUtils.isNotBlank(""foo""));
        assertTrue(StringUtils.isNotBlank(""  foo  ""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7172]])
962,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankMsgNotBlankStringShouldNotThrow(),"    @Test
    public void testNotBlankMsgNotBlankStringShouldNotThrow() {
        //given
        final String string = ""abc"";

        //when
        Validate.notBlank(string, ""Message"");

        //then should not throw
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7146]])
307,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_boolean(),"    @Test
    public void test_toStringTrueFalse_boolean() {
        assertEquals(""true"", BooleanUtils.toStringTrueFalse(true));
        assertEquals(""false"", BooleanUtils.toStringTrueFalse(false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7094]])
309,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_boolean(),"    @Test
    public void test_toStringYesNo_boolean() {
        assertEquals(""yes"", BooleanUtils.toStringYesNo(true));
        assertEquals(""no"", BooleanUtils.toStringYesNo(false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7092]])
308,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_boolean(),"    @Test
    public void test_toStringOnOff_boolean() {
        assertEquals(""on"", BooleanUtils.toStringOnOff(true));
        assertEquals(""off"", BooleanUtils.toStringOnOff(false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7075]])
272,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_isNotFalse_Boolean(),"    @Test
    public void test_isNotFalse_Boolean() {
        assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE));
        assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE));
        assertTrue(BooleanUtils.isNotFalse((Boolean) null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7066]])
959,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankNotBlankStringShouldNotThrow(),"    @Test
    public void testNotBlankNotBlankStringShouldNotThrow() {
        //given
        final String string = ""abc"";

        //when
        Validate.notBlank(string);

        //then should not throw
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.7044]])
304,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_Boolean(),"    @Test
    public void test_toStringOnOff_Boolean() {
        assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null));
        assertEquals(""on"", BooleanUtils.toStringOnOff(Boolean.TRUE));
        assertEquals(""off"", BooleanUtils.toStringOnOff(Boolean.FALSE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6992]])
597,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testToString_Object(),"    @Test
    public void testToString_Object() {
        assertEquals("""", ObjectUtils.toString((Object) null) );
        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6980]])
271,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_isFalse_Boolean(),"    @Test
    public void test_isFalse_Boolean() {
        assertFalse(BooleanUtils.isFalse(Boolean.TRUE));
        assertTrue(BooleanUtils.isFalse(Boolean.FALSE));
        assertFalse(BooleanUtils.isFalse((Boolean) null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6965]])
305,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_Boolean(),"    @Test
    public void test_toStringYesNo_Boolean() {
        assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null));
        assertEquals(""yes"", BooleanUtils.toStringYesNo(Boolean.TRUE));
        assertEquals(""no"", BooleanUtils.toStringYesNo(Boolean.FALSE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6945]])
303,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_Boolean(),"    @Test
    public void test_toStringTrueFalse_Boolean() {
        assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null));
        assertEquals(""true"", BooleanUtils.toStringTrueFalse(Boolean.TRUE));
        assertEquals(""false"", BooleanUtils.toStringTrueFalse(Boolean.FALSE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6943]])
952,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankMsgNullStringShouldThrow(),"    @Test
    public void testNotBlankMsgNullStringShouldThrow() {
        //given
        final String string = null;

        try {
            //when
            Validate.notBlank(string, ""Message"");
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException e) {
            //then
            assertEquals(""Message"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6896]])
965,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankReturnValues1(),"    @Test
    public void testNotBlankReturnValues1() {
        final String str = ""Hi"";
        final String test = Validate.notBlank(str);
        assertSame(str, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6866]])
958,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankMsgEmptyStringShouldThrow(),"    @Test
    public void testNotBlankMsgEmptyStringShouldThrow() {
        //given
        final String string = """";

        try {
            //when
            Validate.notBlank(string, ""Message"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            //then
            assertEquals(""Message"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6844]])
656,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIsBefore(),"    @Test
    public void testIsBefore() {
        assertFalse(intRange.isBefore(null));
        
        assertFalse(intRange.isBefore(5));
        assertFalse(intRange.isBefore(10));
        assertFalse(intRange.isBefore(15));
        assertFalse(intRange.isBefore(20));
        assertTrue(intRange.isBefore(25));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6805]])
963,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow(),"    @Test
    public void testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow() {
        //given
        final String string = ""  abc   "";

        //when
        Validate.notBlank(string, ""Message"");

        //then should not throw
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6762]])
953,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankEmptyStringShouldThrow(),"    @Test
    public void testNotBlankEmptyStringShouldThrow() {
        //given
        final String string = """";

        try {
            //when
            Validate.notBlank(string);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            //then
            assertEquals(""The validated character sequence is blank"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6755]])
966,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankReturnValues2(),"    @Test
    public void testNotBlankReturnValues2() {
        final String str = ""Hi"";
        final String test = Validate.notBlank(str, ""Message"");
        assertSame(str, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6739]])
273,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Boolean(),"    @Test
    public void test_toBoolean_Boolean() {
        assertTrue(BooleanUtils.toBoolean(Boolean.TRUE));
        assertFalse(BooleanUtils.toBoolean(Boolean.FALSE));
        assertFalse(BooleanUtils.toBoolean((Boolean) null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6737]])
299,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String(),"    @Test
    public void test_toBoolean_String() {
        assertFalse(BooleanUtils.toBoolean((String) null));
        assertFalse(BooleanUtils.toBoolean(""""));
        assertFalse(BooleanUtils.toBoolean(""off""));
        assertFalse(BooleanUtils.toBoolean(""oof""));
        assertFalse(BooleanUtils.toBoolean(""yep""));
        assertFalse(BooleanUtils.toBoolean(""trux""));
        assertFalse(BooleanUtils.toBoolean(""false""));
        assertFalse(BooleanUtils.toBoolean(""a""));
        assertTrue(BooleanUtils.toBoolean(""true"")); // interned handled differently
        assertTrue(BooleanUtils.toBoolean(new StringBuffer(""tr"").append(""ue"").toString()));
        assertTrue(BooleanUtils.toBoolean(""truE""));
        assertTrue(BooleanUtils.toBoolean(""trUe""));
        assertTrue(BooleanUtils.toBoolean(""trUE""));
        assertTrue(BooleanUtils.toBoolean(""tRue""));
        assertTrue(BooleanUtils.toBoolean(""tRuE""));
        assertTrue(BooleanUtils.toBoolean(""tRUe""));
        assertTrue(BooleanUtils.toBoolean(""tRUE""));
        assertTrue(BooleanUtils.toBoolean(""TRUE""));
        assertTrue(BooleanUtils.toBoolean(""TRUe""));
        assertTrue(BooleanUtils.toBoolean(""TRuE""));
        assertTrue(BooleanUtils.toBoolean(""TRue""));
        assertTrue(BooleanUtils.toBoolean(""TrUE""));
        assertTrue(BooleanUtils.toBoolean(""TrUe""));
        assertTrue(BooleanUtils.toBoolean(""TruE""));
        assertTrue(BooleanUtils.toBoolean(""True""));
        assertTrue(BooleanUtils.toBoolean(""on""));
        assertTrue(BooleanUtils.toBoolean(""oN""));
        assertTrue(BooleanUtils.toBoolean(""On""));
        assertTrue(BooleanUtils.toBoolean(""ON""));
        assertTrue(BooleanUtils.toBoolean(""yes""));
        assertTrue(BooleanUtils.toBoolean(""yeS""));
        assertTrue(BooleanUtils.toBoolean(""yEs""));
        assertTrue(BooleanUtils.toBoolean(""yES""));
        assertTrue(BooleanUtils.toBoolean(""Yes""));
        assertTrue(BooleanUtils.toBoolean(""YeS""));
        assertTrue(BooleanUtils.toBoolean(""YEs""));
        assertTrue(BooleanUtils.toBoolean(""YES""));
        assertFalse(BooleanUtils.toBoolean(""yes?""));
        assertFalse(BooleanUtils.toBoolean(""tru""));

        assertFalse(BooleanUtils.toBoolean(""no""));
        assertFalse(BooleanUtils.toBoolean(""off""));
        assertFalse(BooleanUtils.toBoolean(""yoo""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6728]])
310,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toString_boolean_String_String_String(),"    @Test
    public void test_toString_boolean_String_String_String() {
        assertEquals(""Y"", BooleanUtils.toString(true, ""Y"", ""N""));
        assertEquals(""N"", BooleanUtils.toString(false, ""Y"", ""N""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6665]])
598,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testToString_ObjectString(),"    @Test
    public void testToString_ObjectString() {
        assertEquals(BAR, ObjectUtils.toString((Object) null, BAR) );
        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6659]])
269,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_isTrue_Boolean(),"    @Test
    public void test_isTrue_Boolean() {
        assertTrue(BooleanUtils.isTrue(Boolean.TRUE));
        assertFalse(BooleanUtils.isTrue(Boolean.FALSE));
        assertFalse(BooleanUtils.isTrue((Boolean) null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6637]])
942,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotNull2(),"    @Test
    public void testNotNull2() {
        Validate.notNull(new Object(), ""MSG"");
        try {
            Validate.notNull(null, ""MSG"");
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        
        final String str = ""Hi"";
        final String testStr = Validate.notNull(str, ""Message"");
        assertSame(str, testStr);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6631]])
941,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotNull1(),"    @Test
    public void testNotNull1() {
        Validate.notNull(new Object());
        try {
            Validate.notNull(null);
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""The validated object is null"", ex.getMessage());
        }
        
        final String str = ""Hi"";
        final String testStr = Validate.notNull(str);
        assertSame(str, testStr);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6616]])
275,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int(),"    @Test
    public void test_toBoolean_int() {
        assertTrue(BooleanUtils.toBoolean(1));
        assertTrue(BooleanUtils.toBoolean(-1));
        assertFalse(BooleanUtils.toBoolean(0));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6613]])
960,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankNotBlankStringWithWhitespacesShouldNotThrow(),"    @Test
    public void testNotBlankNotBlankStringWithWhitespacesShouldNotThrow() {
        //given
        final String string = ""  abc   "";

        //when
        Validate.notBlank(string);

        //then should not throw
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6589]])
951,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankNullStringShouldThrow(),"    @Test
    public void testNotBlankNullStringShouldThrow() {
        //given
        final String string = null;

        try {
            //when
            Validate.notBlank(string);
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException e) {
            //then
            assertEquals(""The validated character sequence is blank"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6580]])
964,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow(),"    @Test
    public void testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow() {
        //given
        final String string = "" \n \t abc \r \n "";

        //when
        Validate.notBlank(string, ""Message"");

        //then should not throw
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6572]])
956,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankMsgBlankStringShouldThrow(),"    @Test
    public void testNotBlankMsgBlankStringShouldThrow() {
        //given
        final String string = "" \n \t \r \n "";

        try {
            //when
            Validate.notBlank(string, ""Message"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            //then
            assertEquals(""Message"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6525]])
654,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIsStartedBy(),"    @Test
    public void testIsStartedBy() {
        assertFalse(intRange.isStartedBy(null));
        
        assertFalse(intRange.isStartedBy(5));
        assertTrue(intRange.isStartedBy(10));
        assertFalse(intRange.isStartedBy(15));
        assertFalse(intRange.isStartedBy(20));
        assertFalse(intRange.isStartedBy(25));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6514]])
957,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankMsgBlankStringWithWhitespacesShouldThrow(),"    @Test
    public void testNotBlankMsgBlankStringWithWhitespacesShouldThrow() {
        //given
        final String string = ""   "";

        try {
            //when
            Validate.notBlank(string, ""Message"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            //then
            assertEquals(""Message"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6508]])
961,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankNotBlankStringWithNewlinesShouldNotThrow(),"    @Test
    public void testNotBlankNotBlankStringWithNewlinesShouldNotThrow() {
        //given
        final String string = "" \n \t abc \r \n "";

        //when
        Validate.notBlank(string);

        //then should not throw
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6476]])
881,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringIntInt(),"    @Test
    public void testAbbreviate_StringIntInt() {
        assertEquals(null, StringUtils.abbreviate(null, 10, 12));
        assertEquals("""", StringUtils.abbreviate("""", 0, 10));
        assertEquals("""", StringUtils.abbreviate("""", 2, 10));
        
        try {
            @SuppressWarnings(""unused"")
            final
            String res = StringUtils.abbreviate(""abcdefghij"", 0, 3);
            fail(""StringUtils.abbreviate expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
                // empty
        }      
        try {
            @SuppressWarnings(""unused"")
            final
            String res = StringUtils.abbreviate(""abcdefghij"", 5, 6);
            fail(""StringUtils.abbreviate expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
                // empty
        }      
        

        final String raspberry = ""raspberry peach"";
        assertEquals(""raspberry peach"", StringUtils.abbreviate(raspberry, 11, 15));

        assertEquals(null, StringUtils.abbreviate(null, 7, 14));
        assertAbbreviateWithOffset(""abcdefg..."", -1, 10);
        assertAbbreviateWithOffset(""abcdefg..."", 0, 10);
        assertAbbreviateWithOffset(""abcdefg..."", 1, 10);
        assertAbbreviateWithOffset(""abcdefg..."", 2, 10);
        assertAbbreviateWithOffset(""abcdefg..."", 3, 10);
        assertAbbreviateWithOffset(""abcdefg..."", 4, 10);
        assertAbbreviateWithOffset(""...fghi..."", 5, 10);
        assertAbbreviateWithOffset(""...ghij..."", 6, 10);
        assertAbbreviateWithOffset(""...hijk..."", 7, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 8, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 9, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 10, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 10, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 11, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 12, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 13, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 14, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 15, 10);
        assertAbbreviateWithOffset(""...ijklmno"", 16, 10);
        assertAbbreviateWithOffset(""...ijklmno"", Integer.MAX_VALUE, 10);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6467]])
364,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testClass(),"    @Test
    public void testClass() {
        assertTrue(Modifier.isPublic(CharSet.class.getModifiers()));
        assertFalse(Modifier.isFinal(CharSet.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6423]])
6,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testBothArgsNull(),"    @Test
    public void testBothArgsNull() {
        assertTrue(AnnotationUtils.equals(null, null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6368]])
301,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String_String_String_nullValue(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBoolean_String_String_String_nullValue() {
        BooleanUtils.toBoolean(null, ""Y"", ""N"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6361]])
297,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String_nullValue(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBooleanObject_String_String_String_String_nullValue() {
        BooleanUtils.toBooleanObject((String) null, ""Y"", ""N"", ""U"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6346]])
306,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toString_Boolean_String_String_String(),"    @Test
    public void test_toString_Boolean_String_String_String() {
        assertEquals(""U"", BooleanUtils.toString((Boolean) null, ""Y"", ""N"", ""U""));
        assertEquals(""Y"", BooleanUtils.toString(Boolean.TRUE, ""Y"", ""N"", ""U""));
        assertEquals(""N"", BooleanUtils.toString(Boolean.FALSE, ""Y"", ""N"", ""U""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6340]])
653,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIsAfter(),"    @Test
    public void testIsAfter() {
        assertFalse(intRange.isAfter(null));
        
        assertTrue(intRange.isAfter(5));
        assertFalse(intRange.isAfter(10));
        assertFalse(intRange.isAfter(15));
        assertFalse(intRange.isAfter(20));
        assertFalse(intRange.isAfter(25));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6338]])
401,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToString_Character(),"    @Test
    public void testToString_Character() {
        assertEquals(null, CharUtils.toString(null));
        assertEquals(""A"", CharUtils.toString(CHARACTER_A));
        assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6319]])
955,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankBlankStringWithNewlinesShouldThrow(),"    @Test
    public void testNotBlankBlankStringWithNewlinesShouldThrow() {
        //given
        final String string = "" \n \t \r \n "";

        try {
            //when
            Validate.notBlank(string);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            //then
            assertEquals(""The validated character sequence is blank"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6311]])
288,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_boolean(),"    @Test
    public void test_toInteger_boolean() {
        assertEquals(1, BooleanUtils.toInteger(true));
        assertEquals(0, BooleanUtils.toInteger(false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6296]])
561,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/JavaVersionTest.java,org.apache.commons.lang3.JavaVersionTest.testToString(),"    @Test
    public void testToString() {
        assertEquals(""1.2"", JAVA_1_2.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6286]])
880,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringInt(),"    @Test
    public void testAbbreviate_StringInt() {
        assertEquals(null, StringUtils.abbreviate(null, 10));
        assertEquals("""", StringUtils.abbreviate("""", 10));
        assertEquals(""short"", StringUtils.abbreviate(""short"", 10));
        assertEquals(""Now is ..."", StringUtils.abbreviate(""Now is the time for all good men to come to the aid of their party."", 10));

        final String raspberry = ""raspberry peach"";
        assertEquals(""raspberry p..."", StringUtils.abbreviate(raspberry, 14));
        assertEquals(""raspberry peach"", StringUtils.abbreviate(""raspberry peach"", 15));
        assertEquals(""raspberry peach"", StringUtils.abbreviate(""raspberry peach"", 16));
        assertEquals(""abc..."", StringUtils.abbreviate(""abcdefg"", 6));
        assertEquals(""abcdefg"", StringUtils.abbreviate(""abcdefg"", 7));
        assertEquals(""abcdefg"", StringUtils.abbreviate(""abcdefg"", 8));
        assertEquals(""a..."", StringUtils.abbreviate(""abcdefg"", 4));
        assertEquals("""", StringUtils.abbreviate("""", 4));
        
        try {
            @SuppressWarnings(""unused"")
            final
            String res = StringUtils.abbreviate(""abc"", 3);
            fail(""StringUtils.abbreviate expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
                // empty
        }              
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6281]])
302,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String_String_String_noMatch(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBoolean_String_String_String_noMatch() {
        BooleanUtils.toBoolean(""X"", ""Y"", ""N"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6276]])
394,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToChar_String(),"    @Test
    public void testToChar_String() {
        assertEquals('A', CharUtils.toChar(""A""));
        assertEquals('B', CharUtils.toChar(""BA""));
        try {
            CharUtils.toChar((String) null);
        } catch (final IllegalArgumentException ex) {}
        try {
            CharUtils.toChar("""");
        } catch (final IllegalArgumentException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6266]])
954,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotBlankBlankStringWithWhitespacesShouldThrow(),"    @Test
    public void testNotBlankBlankStringWithWhitespacesShouldThrow() {
        //given
        final String string = ""   "";

        try {
            //when
            Validate.notBlank(string);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            //then
            assertEquals(""The validated character sequence is blank"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6266]])
298,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String_noMatch(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBooleanObject_String_String_String_String_noMatch() {
        BooleanUtils.toBooleanObject(""X"", ""Y"", ""N"", ""U"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6248]])
655,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIsEndedBy(),"    @Test
    public void testIsEndedBy() {
        assertFalse(intRange.isEndedBy(null));
        
        assertFalse(intRange.isEndedBy(5));
        assertFalse(intRange.isEndedBy(10));
        assertFalse(intRange.isEndedBy(15));
        assertTrue(intRange.isEndedBy(20));
        assertFalse(intRange.isEndedBy(25));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6246]])
889,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testIsAllLowerCase(),"    @Test
    public void testIsAllLowerCase() {
        assertFalse(StringUtils.isAllLowerCase(null));
        assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));
        assertTrue(StringUtils.isAllLowerCase(""abc""));
        assertFalse(StringUtils.isAllLowerCase(""abc ""));
        assertFalse(StringUtils.isAllLowerCase(""abC""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6234]])
389,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new CharUtils());
        final Constructor<?>[] cons = CharUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6225]])
949,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotEmptyString1(),"    @Test
    public void testNotEmptyString1() {
        Validate.notEmpty(""hjl"");
        try {
            Validate.notEmpty((String) null);
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""The validated character sequence is empty"", ex.getMessage());
        }
        try {
            Validate.notEmpty("""");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""The validated character sequence is empty"", ex.getMessage());
        }
        
        final String str = ""Hi"";
        final String testStr = Validate.notEmpty(str);
        assertSame(str, testStr);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6215]])
274,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanDefaultIfNull_Boolean_boolean(),"    @Test
    public void test_toBooleanDefaultIfNull_Boolean_boolean() {
        assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));
        assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));
        assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));
        assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));
        assertTrue(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));
        assertFalse(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6214]])
331,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_validInput_2items(),"    @Test
    public void testOr_primitive_validInput_2items() {
        assertTrue(
            ""False result for (true, true)"",
            BooleanUtils.or(new boolean[] { true, true }));
        
        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils.or(new boolean[] { false, false }));
        
        assertTrue(
            ""False result for (true, false)"",
            BooleanUtils.or(new boolean[] { true, false }));
        
        assertTrue(
            ""False result for (false, true)"",
            BooleanUtils.or(new boolean[] { false, true }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6212]])
861,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testLengthString(),"    @Test
    public void testLengthString() {
        assertEquals(0, StringUtils.length(null));
        assertEquals(0, StringUtils.length(""""));
        assertEquals(0, StringUtils.length(StringUtils.EMPTY));
        assertEquals(1, StringUtils.length(""A""));
        assertEquals(1, StringUtils.length("" ""));
        assertEquals(8, StringUtils.length(""ABCDEFGH""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6195]])
290,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean(),"    @Test
    public void test_toIntegerObject_Boolean() {
        assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(Boolean.TRUE));
        assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(Boolean.FALSE));
        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6195]])
300,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String_String_String(),"    @Test
    public void test_toBoolean_String_String_String() {
        assertTrue(BooleanUtils.toBoolean((String) null, null, ""N""));
        assertFalse(BooleanUtils.toBoolean((String) null, ""Y"", null));
        assertTrue(BooleanUtils.toBoolean(""Y"", ""Y"", ""N""));
        assertTrue(BooleanUtils.toBoolean(""Y"", new String(""Y""), new String(""N"")));
        assertFalse(BooleanUtils.toBoolean(""N"", ""Y"", ""N""));
        assertFalse(BooleanUtils.toBoolean(""N"", new String(""Y""), new String(""N"")));
        assertTrue(BooleanUtils.toBoolean((String) null, null, null));
        assertTrue(BooleanUtils.toBoolean(""Y"", ""Y"", ""Y""));
        assertTrue(BooleanUtils.toBoolean(""Y"", new String(""Y""), new String(""Y"")));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6193]])
808,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new StringUtils());
        final Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(StringUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(StringUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6185]])
950,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotEmptyString2(),"    @Test
    public void testNotEmptyString2() {
        Validate.notEmpty(""a"", ""MSG"");
        try {
            Validate.notEmpty((String) null, ""MSG"");
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        try {
            Validate.notEmpty("""", ""MSG"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        
        final String str = ""Hi"";
        final String testStr = Validate.notEmpty(str, ""Message"");
        assertSame(str, testStr);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6182]])
728,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_StringWithSupplementaryChars(),"    @Test
    public void testContains_StringWithSupplementaryChars() {
        assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20000));
        assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20001));
        assertTrue(StringUtils.contains(CharU20000, CharU20000));
        assertFalse(StringUtils.contains(CharU20000, CharU20001));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6178]])
586,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testFirstNonNull(),"    @Test
    public void testFirstNonNull() {
        assertEquals(null, ObjectUtils.firstNonNull(null, null));
        assertEquals("""", ObjectUtils.firstNonNull(null, """"));
        final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, ""123"", ""456"");
        assertEquals(""123"", firstNonNullGenerics);
        assertEquals(""123"", ObjectUtils.firstNonNull(""123"", null, ""456"", null));
        assertEquals(null, ObjectUtils.firstNonNull());
        assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE));
        assertNull(ObjectUtils.firstNonNull());
        assertNull(ObjectUtils.firstNonNull(null, null));
//        assertSame(""123"", ObjectUtils.firstNonNull(null, ObjectUtils.NULL, ""123"", ""456""));
//        assertSame(""456"", ObjectUtils.firstNonNull(ObjectUtils.NULL, ""456"", ""123"", null));
//        assertNull(ObjectUtils.firstNonNull(null, null, ObjectUtils.NULL));
        assertNull(ObjectUtils.firstNonNull((Object) null));
        assertNull(ObjectUtils.firstNonNull((Object[]) null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6171]])
585,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testIsNull(),"    @Test
    public void testIsNull() {
        final Object o = FOO;
        final Object dflt = BAR;
        assertSame(""dflt was not returned when o was null"", dflt, ObjectUtils.defaultIfNull(null, dflt));
        assertSame(""dflt was returned when o was not null"", o, ObjectUtils.defaultIfNull(o, dflt));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6168]])
320,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testAnd_primitive_nullInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testAnd_primitive_nullInput() {
        BooleanUtils.and((boolean[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6162]])
289,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_boolean(),"    @Test
    public void test_toIntegerObject_boolean() {
        assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(true));
        assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6160]])
295,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String(),"    @Test
    public void test_toBooleanObject_String() {
        assertEquals(null, BooleanUtils.toBooleanObject((String) null));
        assertEquals(null, BooleanUtils.toBooleanObject(""""));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""false""));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""no""));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""off""));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""FALSE""));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""NO""));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""OFF""));
        assertEquals(null, BooleanUtils.toBooleanObject(""oof""));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""true""));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""yes""));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""on""));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""TRUE""));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""ON""));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""YES""));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""TruE""));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""TruE""));

        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""y"")); // yes
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""Y""));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""t"")); // true
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""T""));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""f"")); // false
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""F""));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""n"")); // No
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""N""));
        assertEquals(null, BooleanUtils.toBooleanObject(""z""));

        assertEquals(null, BooleanUtils.toBooleanObject(""ab""));
        assertEquals(null, BooleanUtils.toBooleanObject(""yoo""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6153]])
877,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringBuffers(),"    @Test
    public void testDefaultIfBlank_StringBuffers() {
        assertEquals(""NULL"", StringUtils.defaultIfBlank(new StringBuffer(""""), new StringBuffer(""NULL"")).toString());
        assertEquals(""NULL"", StringUtils.defaultIfBlank(new StringBuffer("" ""), new StringBuffer(""NULL"")).toString());
        assertEquals(""abc"", StringUtils.defaultIfBlank(new StringBuffer(""abc""), new StringBuffer(""NULL"")).toString());
        assertNull(StringUtils.defaultIfBlank(new StringBuffer(""""), null));
        // Tests compatibility for the API return type
        final StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer(""abc""), new StringBuffer(""NULL""));
        assertEquals(""abc"", s.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6146]])
324,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_nullInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testAnd_object_nullInput() {
        BooleanUtils.and((Boolean[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6144]])
398,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character(),"    @Test
    public void testToIntValue_Character() {
        assertEquals(0, CharUtils.toIntValue(new Character('0')));
        assertEquals(3, CharUtils.toIntValue(new Character('3')));
        try {
            CharUtils.toIntValue(null);
        } catch (final IllegalArgumentException ex) {}
        try {
            CharUtils.toIntValue(CHARACTER_A);
        } catch (final IllegalArgumentException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6138]])
322,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testAnd_primitive_validInput_2items(),"    @Test
    public void testAnd_primitive_validInput_2items() {
        assertTrue(
            ""False result for (true, true)"",
            BooleanUtils.and(new boolean[] { true, true }));
        
        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils.and(new boolean[] { false, false }));
        
        assertTrue(
            ""True result for (true, false)"",
            ! BooleanUtils.and(new boolean[] { true, false }));
        
        assertTrue(
            ""True result for (false, true)"",
            ! BooleanUtils.and(new boolean[] { false, true }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6132]])
936,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsTrue1(),"    @Test
    public void testIsTrue1() {
        Validate.isTrue(true);
        try {
            Validate.isTrue(false);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""The validated expression is false"", ex.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6128]])
652,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testContains(),"    @Test
    public void testContains() {
        assertFalse(intRange.contains(null));
        
        assertFalse(intRange.contains(5));
        assertTrue(intRange.contains(10));
        assertTrue(intRange.contains(15));
        assertTrue(intRange.contains(20));
        assertFalse(intRange.contains(25));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6123]])
336,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_2items(),"    @Test
    public void testOr_object_validInput_2items() {
        assertTrue(
            ""False result for (true, true)"",
            BooleanUtils
            .or(new Boolean[] { Boolean.TRUE, Boolean.TRUE })
            .booleanValue());
        
        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils
            .or(new Boolean[] { Boolean.FALSE, Boolean.FALSE })
            .booleanValue());
        
        assertTrue(
            ""False result for (true, false)"",
            BooleanUtils
            .or(new Boolean[] { Boolean.TRUE, Boolean.FALSE })
            .booleanValue());
        
        assertTrue(
            ""False result for (false, true)"",
            BooleanUtils
            .or(new Boolean[] { Boolean.FALSE, Boolean.TRUE })
            .booleanValue());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6122]])
445,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testGetClassClassNotFound(),"    @Test
    public void testGetClassClassNotFound() throws Exception {
        assertGetClassThrowsClassNotFound( ""bool"" );
        assertGetClassThrowsClassNotFound( ""bool[]"" );
        assertGetClassThrowsClassNotFound( ""integer[]"" );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6101]])
359,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testContainsNullArg(),"    @Test
    public void testContainsNullArg() {
        final CharRange range = CharRange.is('a');
        try {
            @SuppressWarnings(""unused"")
            final
            boolean contains = range.contains(null);
        } catch(final IllegalArgumentException e) {
            assertEquals(""The Range must not be null"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6098]])
327,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_validInput_2items(),"    @Test
    public void testAnd_object_validInput_2items() {
        assertTrue(
            ""False result for (true, true)"",
            BooleanUtils
            .and(new Boolean[] { Boolean.TRUE, Boolean.TRUE })
            .booleanValue());
        
        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils
            .and(new Boolean[] { Boolean.FALSE, Boolean.FALSE })
            .booleanValue());
        
        assertTrue(
            ""True result for (true, false)"",
            ! BooleanUtils
            .and(new Boolean[] { Boolean.TRUE, Boolean.FALSE })
            .booleanValue());
        
        assertTrue(
            ""True result for (false, true)"",
            ! BooleanUtils
            .and(new Boolean[] { Boolean.FALSE, Boolean.TRUE })
            .booleanValue());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6088]])
337,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testOr_object_validInput_3items(),"    @Test
    public void testOr_object_validInput_3items() {
        assertTrue(
            ""False result for (false, false, true)"",
            BooleanUtils
            .or(
                new Boolean[] {
                    Boolean.FALSE,
                    Boolean.FALSE,
                    Boolean.TRUE })
                    .booleanValue());
        
        assertTrue(
            ""False result for (false, true, false)"",
            BooleanUtils
            .or(
                new Boolean[] {
                    Boolean.FALSE,
                    Boolean.TRUE,
                    Boolean.FALSE })
                    .booleanValue());
        
        assertTrue(
            ""False result for (true, false, false)"",
            BooleanUtils
            .or(
                new Boolean[] {
                    Boolean.TRUE,
                    Boolean.FALSE,
                    Boolean.FALSE })
                    .booleanValue());
        
        assertTrue(
            ""False result for (true, true, true)"",
            BooleanUtils
            .or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })
            .booleanValue());
        
        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils.or(
                new Boolean[] {
                    Boolean.FALSE,
                    Boolean.FALSE,
                    Boolean.FALSE })
                    .booleanValue());
        
        assertTrue(
            ""False result for (true, true, false)"",
            BooleanUtils.or(
                new Boolean[] {
                    Boolean.TRUE,
                    Boolean.TRUE,
                    Boolean.FALSE })
                    .booleanValue());
        
        assertTrue(
            ""False result for (true, false, true)"",
            BooleanUtils.or(
                new Boolean[] {
                    Boolean.TRUE,
                    Boolean.FALSE,
                    Boolean.TRUE })
                    .booleanValue());
        
        assertTrue(
            ""False result for (false, true, true)"",
            BooleanUtils.or(
                new Boolean[] {
                    Boolean.FALSE,
                    Boolean.TRUE,
                    Boolean.TRUE })
                    .booleanValue());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6086]])
648,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testToString(),"    @Test
    public void testToString() {
        assertNotNull(byteRange.toString());
        
        final String str = intRange.toString();
        assertEquals(""[10..20]"", str);
        assertEquals(""[-20..-10]"", Range.between(-20, -10).toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6077]])
785,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsIsTest.java,org.apache.commons.lang3.StringUtilsIsTest.testIsAsciiPrintable_String(),"    @Test
    public void testIsAsciiPrintable_String() {
        assertFalse(StringUtils.isAsciiPrintable(null));
        assertTrue(StringUtils.isAsciiPrintable(""""));
        assertTrue(StringUtils.isAsciiPrintable("" ""));
        assertTrue(StringUtils.isAsciiPrintable(""a""));
        assertTrue(StringUtils.isAsciiPrintable(""A""));
        assertTrue(StringUtils.isAsciiPrintable(""1""));
        assertTrue(StringUtils.isAsciiPrintable(""Ceki""));
        assertTrue(StringUtils.isAsciiPrintable(""!ab2c~""));
        assertTrue(StringUtils.isAsciiPrintable(""1000""));
        assertTrue(StringUtils.isAsciiPrintable(""10 00""));
        assertFalse(StringUtils.isAsciiPrintable(""10\t00""));
        assertTrue(StringUtils.isAsciiPrintable(""10.00""));
        assertTrue(StringUtils.isAsciiPrintable(""10,00""));
        assertTrue(StringUtils.isAsciiPrintable(""!ab-c~""));
        assertTrue(StringUtils.isAsciiPrintable(""hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug""));
        assertTrue(StringUtils.isAsciiPrintable(""\u0020""));
        assertTrue(StringUtils.isAsciiPrintable(""\u0021""));
        assertTrue(StringUtils.isAsciiPrintable(""\u007e""));
        assertFalse(StringUtils.isAsciiPrintable(""\u007f""));
        assertTrue(StringUtils.isAsciiPrintable(""G?lc?""));
        assertTrue(StringUtils.isAsciiPrintable(""=?iso-8859-1?Q?G=FClc=FC?=""));
        assertFalse(StringUtils.isAsciiPrintable(""G\u00fclc\u00fc""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6075]])
725,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_Char(),"    @Test
    public void testContains_Char() {
        assertFalse(StringUtils.contains(null, ' '));
        assertFalse(StringUtils.contains("""", ' '));
        assertFalse(StringUtils.contains("""", null));
        assertFalse(StringUtils.contains(null, null));
        assertTrue(StringUtils.contains(""abc"", 'a'));
        assertTrue(StringUtils.contains(""abc"", 'b'));
        assertTrue(StringUtils.contains(""abc"", 'c'));
        assertFalse(StringUtils.contains(""abc"", 'z'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6073]])
984,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsInstanceOf(),"    @Test
    public void testIsInstanceOf() {
        Validate.isInstanceOf(String.class, ""hi"");
        Validate.isInstanceOf(Integer.class, 1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6071]])
937,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsTrue2(),"    @Test
    public void testIsTrue2() {
        Validate.isTrue(true, ""MSG"");
        try {
            Validate.isTrue(false, ""MSG"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6063]])
268,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_negate_Boolean(),"    @Test
    public void test_negate_Boolean() {
        assertSame(null, BooleanUtils.negate(null));
        assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));
        assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6058]])
939,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsTrue4(),"    @Test
    public void testIsTrue4() {
        Validate.isTrue(true, ""MSG"", 7);
        try {
            Validate.isTrue(false, ""MSG"", 7);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6057]])
267,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new BooleanUtils());
        final Constructor<?>[] cons = BooleanUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6054]])
883,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testAbbreviateMiddle(),"    @Test
    public void testAbbreviateMiddle() {
        // javadoc examples
        assertNull( StringUtils.abbreviateMiddle(null, null, 0) );
        assertEquals( ""abc"", StringUtils.abbreviateMiddle(""abc"", null, 0) );
        assertEquals( ""abc"", StringUtils.abbreviateMiddle(""abc"", ""."", 0) );
        assertEquals( ""abc"", StringUtils.abbreviateMiddle(""abc"", ""."", 3) );
        assertEquals( ""ab.f"", StringUtils.abbreviateMiddle(""abcdef"", ""."", 4) );

        // JIRA issue (LANG-405) example (slightly different than actual expected result)
        assertEquals( 
            ""A very long text with un...f the text is complete."",
            StringUtils.abbreviateMiddle(
                ""A very long text with unimportant stuff in the middle but interesting start and "" +
                ""end to see if the text is complete."", ""..."", 50) );

        // Test a much longer text :)
        final String longText = ""Start text"" + StringUtils.repeat(""x"", 10000) + ""Close text"";
        assertEquals( 
            ""Start text->Close text"",
            StringUtils.abbreviateMiddle( longText, ""->"", 22 ) );

        // Test negative length
        assertEquals(""abc"", StringUtils.abbreviateMiddle(""abc"", ""."", -1));

        // Test boundaries
        // Fails to change anything as method ensures first and last char are kept
        assertEquals(""abc"", StringUtils.abbreviateMiddle(""abc"", ""."", 1));
        assertEquals(""abc"", StringUtils.abbreviateMiddle(""abc"", ""."", 2));

        // Test length of n=1
        assertEquals(""a"", StringUtils.abbreviateMiddle(""a"", ""."", 1));

        // Test smallest length that can lead to success
        assertEquals(""a.d"", StringUtils.abbreviateMiddle(""abcd"", ""."", 3));

        // More from LANG-405
        assertEquals(""a..f"", StringUtils.abbreviateMiddle(""abcdef"", "".."", 4));
        assertEquals(""ab.ef"", StringUtils.abbreviateMiddle(""abcdef"", ""."", 5));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6047]])
333,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testOr_object_nullInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testOr_object_nullInput() {
        BooleanUtils.or((Boolean[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6047]])
381,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringString(),"    @Test
    public void testContainsAny_StringString() {
        assertFalse(CharSetUtils.containsAny(null, (String) null));
        assertFalse(CharSetUtils.containsAny(null, """"));
        
        assertFalse(CharSetUtils.containsAny("""", (String) null));
        assertFalse(CharSetUtils.containsAny("""", """"));
        assertFalse(CharSetUtils.containsAny("""", ""a-e""));
        
        assertFalse(CharSetUtils.containsAny(""hello"", (String) null));
        assertFalse(CharSetUtils.containsAny(""hello"", """"));
        assertTrue(CharSetUtils.containsAny(""hello"", ""a-e""));
        assertTrue(CharSetUtils.containsAny(""hello"", ""l-p""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6039]])
741,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithBadSupplementaryChars(),"    @Test
    public void testContainsNone_StringWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001));
        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
        assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6038]])
873,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringString(),"    @Test
    public void testDefaultIfBlank_StringString() {
        assertEquals(""NULL"", StringUtils.defaultIfBlank(null, ""NULL""));
        assertEquals(""NULL"", StringUtils.defaultIfBlank("""", ""NULL""));
        assertEquals(""NULL"", StringUtils.defaultIfBlank("" "", ""NULL""));
        assertEquals(""abc"", StringUtils.defaultIfBlank(""abc"", ""NULL""));
        assertNull(StringUtils.defaultIfBlank("""", null));
        // Tests compatibility for the API return type
        final String s = StringUtils.defaultIfBlank(""abc"", ""NULL"");
        assertEquals(""abc"", s);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6036]])
938,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsTrue3(),"    @Test
    public void testIsTrue3() {
        Validate.isTrue(true, ""MSG"", 6);
        try {
            Validate.isTrue(false, ""MSG"", 6);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6033]])
329,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_nullInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testOr_primitive_nullInput() {
        BooleanUtils.or((boolean[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6028]])
342,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharEncodingTest.java,org.apache.commons.lang3.CharEncodingTest.testNotSupported(),"    @Test
    public void testNotSupported() {
        assertFalse(CharEncoding.isSupported(null));
        assertFalse(CharEncoding.isSupported(""""));
        assertFalse(CharEncoding.isSupported("" ""));
        assertFalse(CharEncoding.isSupported(""\t\r\n""));
        assertFalse(CharEncoding.isSupported(""DOESNOTEXIST""));
        assertFalse(CharEncoding.isSupported(""this is not a valid encoding name""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6026]])
744,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_String(),"    @Test
    public void testContainsOnly_String() {
        final String str1 = ""a"";
        final String str2 = ""b"";
        final String str3 = ""ab"";
        final String chars1= ""b"";
        final String chars2= ""a"";
        final String chars3= ""ab"";
        assertFalse(StringUtils.containsOnly(null, (String) null));
        assertFalse(StringUtils.containsOnly("""", (String) null));
        assertFalse(StringUtils.containsOnly(null, """"));
        assertFalse(StringUtils.containsOnly(str1, """"));
        assertTrue(StringUtils.containsOnly("""", """"));
        assertTrue(StringUtils.containsOnly("""", chars1));
        assertFalse(StringUtils.containsOnly(str1, chars1));
        assertTrue(StringUtils.containsOnly(str1, chars2));
        assertTrue(StringUtils.containsOnly(str1, chars3));
        assertTrue(StringUtils.containsOnly(str2, chars1));
        assertFalse(StringUtils.containsOnly(str2, chars2));
        assertTrue(StringUtils.containsOnly(str2, chars3));
        assertFalse(StringUtils.containsOnly(str3, chars1));
        assertFalse(StringUtils.containsOnly(str3, chars2));
        assertTrue(StringUtils.containsOnly(str3, chars3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6018]])
385,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringString(),"    @Test
    public void testKeep_StringString() {
        assertEquals(null, CharSetUtils.keep(null, (String) null));
        assertEquals(null, CharSetUtils.keep(null, """"));
        
        assertEquals("""", CharSetUtils.keep("""", (String) null));
        assertEquals("""", CharSetUtils.keep("""", """"));
        assertEquals("""", CharSetUtils.keep("""", ""a-e""));
        
        assertEquals("""", CharSetUtils.keep(""hello"", (String) null));
        assertEquals("""", CharSetUtils.keep(""hello"", """"));
        assertEquals("""", CharSetUtils.keep(""hello"", ""xyz""));
        assertEquals(""hello"", CharSetUtils.keep(""hello"", ""a-z""));
        assertEquals(""hello"", CharSetUtils.keep(""hello"", ""oleh""));
        assertEquals(""ell"", CharSetUtils.keep(""hello"", ""el""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.6011]])
871,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefault_StringString(),"    @Test
    public void testDefault_StringString() {
        assertEquals(""NULL"", StringUtils.defaultString(null, ""NULL""));
        assertEquals("""", StringUtils.defaultString("""", ""NULL""));
        assertEquals(""abc"", StringUtils.defaultString(""abc"", ""NULL""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5999]])
935,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testJavaAwtHeadless(),"    @Test
    public void testJavaAwtHeadless() {
        final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4);
        final String expectedStringValue = System.getProperty(""java.awt.headless"");
        final String expectedStringValueWithDefault = System.getProperty(""java.awt.headless"", ""false"");
        assertNotNull(expectedStringValueWithDefault);
        if (atLeastJava14) {
            final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue();
            if (expectedStringValue != null) {
                assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);
            }
            assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());
        } else {
            assertNull(expectedStringValue);
            assertNull(SystemUtils.JAVA_AWT_HEADLESS);
            assertEquals(expectedStringValueWithDefault, """" + SystemUtils.isJavaAwtHeadless());
        }
        assertEquals(expectedStringValueWithDefault, """" + SystemUtils.isJavaAwtHeadless());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5999]])
786,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsIsTest.java,org.apache.commons.lang3.StringUtilsIsTest.testIsNumeric(),"    @Test
    public void testIsNumeric() {
        assertFalse(StringUtils.isNumeric(null));
        assertFalse(StringUtils.isNumeric(""""));
        assertFalse(StringUtils.isNumeric("" ""));
        assertFalse(StringUtils.isNumeric(""a""));
        assertFalse(StringUtils.isNumeric(""A""));
        assertFalse(StringUtils.isNumeric(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));
        assertFalse(StringUtils.isNumeric(""ham kso""));
        assertTrue(StringUtils.isNumeric(""1""));
        assertTrue(StringUtils.isNumeric(""1000""));
        assertFalse(StringUtils.isNumeric(""2.3""));
        assertFalse(StringUtils.isNumeric(""10 00""));
        assertFalse(StringUtils.isNumeric(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));
        assertFalse(StringUtils.isNumeric(""_""));
        assertFalse(StringUtils.isNumeric(""hkHKHik*khbkuh""));
        assertFalse(StringUtils.isNumeric(""+123""));
        assertFalse(StringUtils.isNumeric(""-123""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5998]])
884,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDifference_StringString(),"    @Test
    public void testDifference_StringString() {
        assertEquals(null, StringUtils.difference(null, null));
        assertEquals("""", StringUtils.difference("""", """"));
        assertEquals(""abc"", StringUtils.difference("""", ""abc""));
        assertEquals("""", StringUtils.difference(""abc"", """"));
        assertEquals(""i am a robot"", StringUtils.difference(null, ""i am a robot""));
        assertEquals(""i am a machine"", StringUtils.difference(""i am a machine"", null));
        assertEquals(""robot"", StringUtils.difference(""i am a machine"", ""i am a robot""));
        assertEquals("""", StringUtils.difference(""abc"", ""abc""));
        assertEquals(""you are a robot"", StringUtils.difference(""i am a robot"", ""you are a robot""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5993]])
740,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_String(),"    @Test
    public void testContainsNone_String() {
        final String str1 = ""a"";
        final String str2 = ""b"";
        final String str3 = ""ab."";
        final String chars1= ""b"";
        final String chars2= ""."";
        final String chars3= ""cd"";
        assertTrue(StringUtils.containsNone(null, (String) null));
        assertTrue(StringUtils.containsNone("""", (String) null));
        assertTrue(StringUtils.containsNone(null, """"));
        assertTrue(StringUtils.containsNone(str1, """"));
        assertTrue(StringUtils.containsNone("""", """"));
        assertTrue(StringUtils.containsNone("""", chars1));
        assertTrue(StringUtils.containsNone(str1, chars1));
        assertTrue(StringUtils.containsNone(str1, chars2));
        assertTrue(StringUtils.containsNone(str1, chars3));
        assertFalse(StringUtils.containsNone(str2, chars1));
        assertTrue(StringUtils.containsNone(str2, chars2));
        assertTrue(StringUtils.containsNone(str2, chars3));
        assertFalse(StringUtils.containsNone(str3, chars1));
        assertFalse(StringUtils.containsNone(str3, chars2));
        assertTrue(StringUtils.containsNone(str3, chars3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5982]])
276,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_int(),"    @Test
    public void test_toBooleanObject_int() {
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5978]])
870,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefault_String(),"    @Test
    public void testDefault_String() {
        assertEquals("""", StringUtils.defaultString(null));
        assertEquals("""", StringUtils.defaultString(""""));
        assertEquals(""abc"", StringUtils.defaultString(""abc""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5974]])
222,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_boolean(),"    @Test
    public void testToPrimitive_boolean() {
        final Boolean[] b = null;
        assertEquals(null, ArrayUtils.toPrimitive(b));
        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));
        assertTrue(Arrays.equals(
            new boolean[] {true, false, true},
            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}))
        );

        try {
            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null});
            fail();
        } catch (final NullPointerException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5968]])
332,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_validInput_3items(),"    @Test
    public void testOr_primitive_validInput_3items() {
        assertTrue(
            ""False result for (false, false, true)"",
            BooleanUtils.or(new boolean[] { false, false, true }));
        
        assertTrue(
            ""False result for (false, true, false)"",
            BooleanUtils.or(new boolean[] { false, true, false }));
        
        assertTrue(
            ""False result for (true, false, false)"",
            BooleanUtils.or(new boolean[] { true, false, false }));
        
        assertTrue(
            ""False result for (true, true, true)"",
            BooleanUtils.or(new boolean[] { true, true, true }));
        
        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils.or(new boolean[] { false, false, false }));
        
        assertTrue(
            ""False result for (true, true, false)"",
            BooleanUtils.or(new boolean[] { true, true, false }));
        
        assertTrue(
            ""False result for (true, false, true)"",
            BooleanUtils.or(new boolean[] { true, false, true }));
        
        assertTrue(
            ""False result for (false, true, true)"",
            BooleanUtils.or(new boolean[] { false, true, true }));
    
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5962]])
864,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testLength_CharBuffer(),"    @Test
    public void testLength_CharBuffer() {
        assertEquals(0, StringUtils.length(CharBuffer.wrap("""")));
        assertEquals(1, StringUtils.length(CharBuffer.wrap(""A"")));
        assertEquals(1, StringUtils.length(CharBuffer.wrap("" "")));
        assertEquals(8, StringUtils.length(CharBuffer.wrap(""ABCDEFGH"")));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5952]])
321,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testAnd_primitive_emptyInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testAnd_primitive_emptyInput() {
        BooleanUtils.and(new boolean[] {});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5952]])
378,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new CharSetUtils());
        final Constructor<?>[] cons = CharSetUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(CharSetUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(CharSetUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5949]])
8,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testGeneratedAnnotationEquivalentToRealAnnotation(),"    @Test(timeout = 666000)
    public void testGeneratedAnnotationEquivalentToRealAnnotation() throws Exception {
        final Test real = getClass().getDeclaredMethod(
                ""testGeneratedAnnotationEquivalentToRealAnnotation"").getAnnotation(Test.class);

        final InvocationHandler generatedTestInvocationHandler = new InvocationHandler() {

            @Override
            public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
                if (""equals"".equals(method.getName()) && method.getParameterTypes().length == 1) {
                    return Boolean.valueOf(proxy == args[0]);
                }
                if (""hashCode"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return Integer.valueOf(System.identityHashCode(proxy));
                }
                if (""toString"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return ""Test proxy"";
                }
                return method.invoke(real, args);
            }
        };

        final Test generated = (Test) Proxy.newProxyInstance(Thread.currentThread()
                .getContextClassLoader(), new Class[] { Test.class },
                generatedTestInvocationHandler);
        assertTrue(real.equals(generated));
        assertFalse(generated.equals(real));
        assertTrue(AnnotationUtils.equals(generated, real));
        assertTrue(AnnotationUtils.equals(real, generated));

        final Test generated2 = (Test) Proxy.newProxyInstance(Thread.currentThread()
                .getContextClassLoader(), new Class[] { Test.class },
                generatedTestInvocationHandler);
        assertFalse(generated.equals(generated2));
        assertFalse(generated2.equals(generated));
        assertTrue(AnnotationUtils.equals(generated, generated2));
        assertTrue(AnnotationUtils.equals(generated2, generated));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5939]])
790,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java,org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithAny(),"    @Test
    public void testStartsWithAny() {
        assertFalse(StringUtils.startsWithAny(null, (String[])null));
        assertFalse(StringUtils.startsWithAny(null, ""abc""));
        assertFalse(StringUtils.startsWithAny(""abcxyz"", (String[])null));
        assertFalse(StringUtils.startsWithAny(""abcxyz""));
        assertTrue(StringUtils.startsWithAny(""abcxyz"", ""abc""));
        assertTrue(StringUtils.startsWithAny(""abcxyz"", null, ""xyz"", ""abc""));
        assertFalse(StringUtils.startsWithAny(""abcxyz"", null, ""xyz"", ""abcd""));

        assertTrue(""StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))"", StringUtils.startsWithAny(""abcxyz"", new StringBuilder(""xyz""), new StringBuffer(""abc"")));
        assertTrue(""StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))"", StringUtils.startsWithAny( new StrBuilder(""abcxyz""), new StringBuilder(""xyz""), new StringBuffer(""abc"")));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5938]])
392,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToChar_Character(),"    @Test
    public void testToChar_Character() {
        assertEquals('A', CharUtils.toChar(CHARACTER_A));
        assertEquals('B', CharUtils.toChar(CHARACTER_B));
        try {
            CharUtils.toChar((Character) null);
        } catch (final IllegalArgumentException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5937]])
734,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithSupplementaryChars(),"    @Test
    public void testContainsAny_StringWithSupplementaryChars() {
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));
        assertTrue(StringUtils.containsAny(CharU20000, CharU20000));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertFalse(StringUtils.containsAny(CharU20000, CharU20001));
        assertFalse(StringUtils.containsAny(CharU20001, CharU20000));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5935]])
875,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_StringBuilders(),"    @Test
    public void testDefaultIfBlank_StringBuilders() {
        assertEquals(""NULL"", StringUtils.defaultIfBlank(new StringBuilder(""""), new StringBuilder(""NULL"")).toString());
        assertEquals(""NULL"", StringUtils.defaultIfBlank(new StringBuilder("" ""), new StringBuilder(""NULL"")).toString());
        assertEquals(""abc"", StringUtils.defaultIfBlank(new StringBuilder(""abc""), new StringBuilder(""NULL"")).toString());
        assertNull(StringUtils.defaultIfBlank(new StringBuilder(""""), null));
        // Tests compatibility for the API return type
        final StringBuilder s = StringUtils.defaultIfBlank(new StringBuilder(""abc""), new StringBuilder(""NULL""));
        assertEquals(""abc"", s.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5934]])
633,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphabetic(),"    @Test
    public void testRandomAlphabetic() {}
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5919]])
315,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testXor_object_nullInput() {
        BooleanUtils.xor((Boolean[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5914]])
862,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testLengthStringBuffer(),"    @Test
    public void testLengthStringBuffer() {
        assertEquals(0, StringUtils.length(new StringBuffer("""")));
        assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));
        assertEquals(1, StringUtils.length(new StringBuffer(""A"")));
        assertEquals(1, StringUtils.length(new StringBuffer("" "")));
        assertEquals(8, StringUtils.length(new StringBuffer(""ABCDEFGH"")));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5912]])
858,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringInt(),"    @Test
    public void testLeftPad_StringInt() {
        assertEquals(null, StringUtils.leftPad(null, 5));
        assertEquals(""     "", StringUtils.leftPad("""", 5));
        assertEquals(""  abc"", StringUtils.leftPad(""abc"", 5));
        assertEquals(""abc"", StringUtils.leftPad(""abc"", 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5905]])
863,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testLengthStringBuilder(),"    @Test
    public void testLengthStringBuilder() {
        assertEquals(0, StringUtils.length(new StringBuilder("""")));
        assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));
        assertEquals(1, StringUtils.length(new StringBuilder(""A"")));
        assertEquals(1, StringUtils.length(new StringBuilder("" "")));
        assertEquals(8, StringUtils.length(new StringBuilder(""ABCDEFGH"")));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5891]])
391,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToCharacterObject_String(),"    @Test
    public void testToCharacterObject_String() {
        assertEquals(null, CharUtils.toCharacterObject(null));
        assertEquals(null, CharUtils.toCharacterObject(""""));
        assertEquals(new Character('a'), CharUtils.toCharacterObject(""a""));
        assertEquals(new Character('a'), CharUtils.toCharacterObject(""abc""));
        assertSame(CharUtils.toCharacterObject(""a""), CharUtils.toCharacterObject(""a""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5888]])
986,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsInstanceOf_withMessage(),"    @Test
    public void testIsInstanceOf_withMessage() {
        Validate.isInstanceOf(String.class, ""hi"", ""Error"");
        Validate.isInstanceOf(Integer.class, 1, ""Error"");
        try {
            Validate.isInstanceOf(List.class, ""hi"", ""Error"");
            fail(""Expecting IllegalArgumentException"");
        } catch(final IllegalArgumentException e) {
            assertEquals(""Error"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5888]])
325,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_emptyInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testAnd_object_emptyInput() {
        BooleanUtils.and(new Boolean[] {});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5887]])
742,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_StringWithSupplementaryChars(),"    @Test
    public void testContainsNone_StringWithSupplementaryChars() {
        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));
        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));
        assertFalse(StringUtils.containsNone(CharU20000, CharU20000));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertTrue(StringUtils.containsNone(CharU20000, CharU20001));
        assertTrue(StringUtils.containsNone(CharU20001, CharU20000));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5884]])
872,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringString(),"    @Test
    public void testDefaultIfEmpty_StringString() {
        assertEquals(""NULL"", StringUtils.defaultIfEmpty(null, ""NULL""));
        assertEquals(""NULL"", StringUtils.defaultIfEmpty("""", ""NULL""));
        assertEquals(""abc"", StringUtils.defaultIfEmpty(""abc"", ""NULL""));
        assertNull(StringUtils.defaultIfEmpty("""", null));
        // Tests compatibility for the API return type
        final String s = StringUtils.defaultIfEmpty(""abc"", ""NULL"");
        assertEquals(""abc"", s);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5881]])
296,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String(),"    @Test
    public void test_toBooleanObject_String_String_String_String() {
        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, ""N"", ""U""));
        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, ""Y"", null, ""U""));
        assertSame(null, BooleanUtils.toBooleanObject((String) null, ""Y"", ""N"", null));

        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(""Y"", ""Y"", ""N"", ""U""));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(""N"", ""Y"", ""N"", ""U""));
        assertEquals(null, BooleanUtils.toBooleanObject(""U"", ""Y"", ""N"", ""U""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5877]])
311,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_nullInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testXor_primitive_nullInput() {
        BooleanUtils.xor((boolean[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5873]])
733,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringWithBadSupplementaryChars(),"    @Test
    public void testContainsAny_StringWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001));
        assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5872]])
885,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringString(),"    @Test
    public void testDifferenceAt_StringString() {
        assertEquals(-1, StringUtils.indexOfDifference(null, null));
        assertEquals(0, StringUtils.indexOfDifference(null, ""i am a robot""));
        assertEquals(-1, StringUtils.indexOfDifference("""", """"));
        assertEquals(0, StringUtils.indexOfDifference("""", ""abc""));
        assertEquals(0, StringUtils.indexOfDifference(""abc"", """"));
        assertEquals(0, StringUtils.indexOfDifference(""i am a machine"", null));
        assertEquals(7, StringUtils.indexOfDifference(""i am a machine"", ""i am a robot""));
        assertEquals(-1, StringUtils.indexOfDifference(""foo"", ""foo""));
        assertEquals(0, StringUtils.indexOfDifference(""i am a robot"", ""you are a robot""));
        //System.out.println(""indexOfDiff: "" + StringUtils.indexOfDifference(""i am a robot"", ""not machine""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5872]])
730,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithBadSupplementaryChars(),"    @Test
    public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));
        assertFalse(StringUtils.containsAny(""abc"" + CharUSuppCharHigh + ""xyz"", CharU20001.toCharArray()));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));
        assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5870]])
852,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt(),"    @Test
    public void testRepeat_StringStringInt() {
        assertEquals(null, StringUtils.repeat(null, null, 2));
        assertEquals(null, StringUtils.repeat(null, ""x"", 2));
        assertEquals("""", StringUtils.repeat("""", null, 2));

        assertEquals("""", StringUtils.repeat(""ab"", """", 0));
        assertEquals("""", StringUtils.repeat("""", """", 2));

        assertEquals(""xx"", StringUtils.repeat("""", ""x"", 3));

        assertEquals(""?, ?, ?"", StringUtils.repeat(""?"", "", "", 3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5870]])
855,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt(),"    @Test
    public void testRightPad_StringInt() {
        assertEquals(null, StringUtils.rightPad(null, 5));
        assertEquals(""     "", StringUtils.rightPad("""", 5));
        assertEquals(""abc  "", StringUtils.rightPad(""abc"", 5));
        assertEquals(""abc"", StringUtils.rightPad(""abc"", 2));
        assertEquals(""abc"", StringUtils.rightPad(""abc"", -1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5869]])
879,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_CharBuffers(),"    @Test
    public void testDefaultIfBlank_CharBuffers() {
        assertEquals(""NULL"", StringUtils.defaultIfBlank(CharBuffer.wrap(""""), CharBuffer.wrap(""NULL"")).toString());
        assertEquals(""NULL"", StringUtils.defaultIfBlank(CharBuffer.wrap("" ""), CharBuffer.wrap(""NULL"")).toString());
        assertEquals(""abc"", StringUtils.defaultIfBlank(CharBuffer.wrap(""abc""), CharBuffer.wrap(""NULL"")).toString());
        assertNull(StringUtils.defaultIfBlank(CharBuffer.wrap(""""), null));
        // Tests compatibility for the API return type
        final CharBuffer s = StringUtils.defaultIfBlank(CharBuffer.wrap(""abc""), CharBuffer.wrap(""NULL""));
        assertEquals(""abc"", s.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5864]])
940,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsTrue5(),"    @Test
    public void testIsTrue5() {
        Validate.isTrue(true, ""MSG"", 7.4d);
        try {
            Validate.isTrue(false, ""MSG"", 7.4d);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5859]])
876,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringBuffers(),"    @Test
    public void testDefaultIfEmpty_StringBuffers() {
        assertEquals(""NULL"", StringUtils.defaultIfEmpty(new StringBuffer(""""), new StringBuffer(""NULL"")).toString());
        assertEquals(""abc"", StringUtils.defaultIfEmpty(new StringBuffer(""abc""), new StringBuffer(""NULL"")).toString());
        assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""""), null));
        // Tests compatibility for the API return type
        final StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer(""abc""), new StringBuffer(""NULL""));
        assertEquals(""abc"", s.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5857]])
738,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithBadSupplementaryChars(),"    @Test
    public void testContainsNone_CharArrayWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));
        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
        assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5853]])
326,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_nullElementInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testAnd_object_nullElementInput() {
        BooleanUtils.and(new Boolean[] {null});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5852]])
587,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testEquals(),"    @Test
    public void testEquals() {
        assertTrue(""ObjectUtils.equals(null, null) returned false"", ObjectUtils.equals(null, null));
        assertTrue(""ObjectUtils.equals(\""foo\"", null) returned true"", !ObjectUtils.equals(FOO, null));
        assertTrue(""ObjectUtils.equals(null, \""bar\"") returned true"", !ObjectUtils.equals(null, BAR));
        assertTrue(""ObjectUtils.equals(\""foo\"", \""bar\"") returned true"", !ObjectUtils.equals(FOO, BAR));
        assertTrue(""ObjectUtils.equals(\""foo\"", \""foo\"") returned false"", ObjectUtils.equals(FOO, FOO));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5846]])
323,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testAnd_primitive_validInput_3items(),"    @Test
    public void testAnd_primitive_validInput_3items() {
        assertTrue(
            ""True result for (false, false, true)"",
            ! BooleanUtils.and(new boolean[] { false, false, true }));
        
        assertTrue(
            ""True result for (false, true, false)"",
            ! BooleanUtils.and(new boolean[] { false, true, false }));
        
        assertTrue(
            ""True result for (true, false, false)"",
            ! BooleanUtils.and(new boolean[] { true, false, false }));
        
        assertTrue(
            ""False result for (true, true, true)"",
            BooleanUtils.and(new boolean[] { true, true, true }));
        
        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils.and(new boolean[] { false, false, false }));
        
        assertTrue(
            ""True result for (true, true, false)"",
            ! BooleanUtils.and(new boolean[] { true, true, false }));
        
        assertTrue(
            ""True result for (true, false, true)"",
            ! BooleanUtils.and(new boolean[] { true, false, true }));
        
        assertTrue(
            ""True result for (false, true, true)"",
            ! BooleanUtils.and(new boolean[] { false, true, true }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5845]])
799,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBefore_StringString(),"    @Test
    public void testSubstringBefore_StringString() {
        assertEquals(""foo"", StringUtils.substringBefore(""fooXXbarXXbaz"", ""XX""));

        assertEquals(null, StringUtils.substringBefore(null, null));
        assertEquals(null, StringUtils.substringBefore(null, """"));
        assertEquals(null, StringUtils.substringBefore(null, ""XX""));
        assertEquals("""", StringUtils.substringBefore("""", null));
        assertEquals("""", StringUtils.substringBefore("""", """"));
        assertEquals("""", StringUtils.substringBefore("""", ""XX""));
        
        assertEquals(""foo"", StringUtils.substringBefore(""foo"", null));
        assertEquals(""foo"", StringUtils.substringBefore(""foo"", ""b""));
        assertEquals(""f"", StringUtils.substringBefore(""foot"", ""o""));
        assertEquals("""", StringUtils.substringBefore(""abc"", ""a""));
        assertEquals(""a"", StringUtils.substringBefore(""abcba"", ""b""));
        assertEquals(""ab"", StringUtils.substringBefore(""abc"", ""c""));
        assertEquals("""", StringUtils.substringBefore(""abc"", """"));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5845]])
328,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testAnd_object_validInput_3items(),"    @Test
    public void testAnd_object_validInput_3items() {
        assertTrue(
            ""True result for (false, false, true)"",
            ! BooleanUtils
            .and(
                new Boolean[] {
                    Boolean.FALSE,
                    Boolean.FALSE,
                    Boolean.TRUE })
                    .booleanValue());
        
        assertTrue(
            ""True result for (false, true, false)"",
            ! BooleanUtils
            .and(
                new Boolean[] {
                    Boolean.FALSE,
                    Boolean.TRUE,
                    Boolean.FALSE })
                    .booleanValue());
        
        assertTrue(
            ""True result for (true, false, false)"",
            ! BooleanUtils
            .and(
                new Boolean[] {
                    Boolean.TRUE,
                    Boolean.FALSE,
                    Boolean.FALSE })
                    .booleanValue());
        
        assertTrue(
            ""False result for (true, true, true)"",
            BooleanUtils
            .and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })
            .booleanValue());
        
        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils.and(
                new Boolean[] {
                    Boolean.FALSE,
                    Boolean.FALSE,
                    Boolean.FALSE })
                    .booleanValue());
        
        assertTrue(
            ""True result for (true, true, false)"",
            ! BooleanUtils.and(
                new Boolean[] {
                    Boolean.TRUE,
                    Boolean.TRUE,
                    Boolean.FALSE })
                    .booleanValue());
        
        assertTrue(
            ""True result for (true, false, true)"",
            ! BooleanUtils.and(
                new Boolean[] {
                    Boolean.TRUE,
                    Boolean.FALSE,
                    Boolean.TRUE })
                    .booleanValue());
        
        assertTrue(
            ""True result for (false, true, true)"",
            ! BooleanUtils.and(
                new Boolean[] {
                    Boolean.FALSE,
                    Boolean.TRUE,
                    Boolean.TRUE })
                    .booleanValue());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5844]])
330,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testOr_primitive_emptyInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testOr_primitive_emptyInput() {
        BooleanUtils.or(new boolean[] {});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5841]])
647,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testHashCode(),"    @Test
    public void testHashCode() {
        assertEquals(byteRange.hashCode(), byteRange2.hashCode());
        assertFalse(byteRange.hashCode() == byteRange3.hashCode());
        
        assertEquals(intRange.hashCode(), intRange.hashCode());
        assertTrue(intRange.hashCode() != 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5836]])
726,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_String(),"    @Test
    public void testContains_String() {
        assertFalse(StringUtils.contains(null, null));
        assertFalse(StringUtils.contains(null, """"));
        assertFalse(StringUtils.contains(null, ""a""));
        assertFalse(StringUtils.contains("""", null));
        assertTrue(StringUtils.contains("""", """"));
        assertFalse(StringUtils.contains("""", ""a""));
        assertTrue(StringUtils.contains(""abc"", ""a""));
        assertTrue(StringUtils.contains(""abc"", ""b""));
        assertTrue(StringUtils.contains(""abc"", ""c""));
        assertTrue(StringUtils.contains(""abc"", ""abc""));
        assertFalse(StringUtils.contains(""abc"", ""z""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5834]])
610,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testMode(),"    @SuppressWarnings(""unchecked"")
    @Test
    public void testMode() {
        assertNull(ObjectUtils.mode((Object[]) null));
        assertNull(ObjectUtils.mode());
        assertNull(ObjectUtils.mode(""foo"", ""bar"", ""baz""));
        assertNull(ObjectUtils.mode(""foo"", ""bar"", ""baz"", ""foo"", ""bar""));
        assertEquals(""foo"", ObjectUtils.mode(""foo"", ""bar"", ""baz"", ""foo""));
        assertEquals(Integer.valueOf(9),
            ObjectUtils.mode(""foo"", ""bar"", ""baz"", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5834]])
346,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testClass(),"    @Test
    public void testClass() {
        // class changed to non-public in 3.0
        assertFalse(Modifier.isPublic(CharRange.class.getModifiers()));
        assertTrue(Modifier.isFinal(CharRange.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5826]])
793,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java,org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithAny(),"    @Test
    public void testEndsWithAny() {
        assertFalse(""StringUtils.endsWithAny(null, null)"", StringUtils.endsWithAny(null, (String)null));
        assertFalse(""StringUtils.endsWithAny(null, new String[] {abc})"", StringUtils.endsWithAny(null, new String[] {""abc""}));
        assertFalse(""StringUtils.endsWithAny(abcxyz, null)"", StringUtils.endsWithAny(""abcxyz"", (String)null));
        assertTrue(""StringUtils.endsWithAny(abcxyz, new String[] {\""\""})"", StringUtils.endsWithAny(""abcxyz"", new String[] {""""}));
        assertTrue(""StringUtils.endsWithAny(abcxyz, new String[] {xyz})"", StringUtils.endsWithAny(""abcxyz"", new String[] {""xyz""}));
        assertTrue(""StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})"", StringUtils.endsWithAny(""abcxyz"", new String[] {null, ""xyz"", ""abc""}));
        assertFalse(""StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})"", StringUtils.endsWithAny(""defg"", new String[] {null, ""xyz"", ""abc""}));

        assertTrue(""StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))"", StringUtils.endsWithAny(""abcxyz"", new StringBuilder(""abc""), new StringBuffer(""xyz"")));
        assertTrue(""StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))"", StringUtils.endsWithAny( new StrBuilder(""abcxyz""), new StringBuilder(""abc""), new StringBuffer(""xyz"")));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5826]])
797,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testRight_String(),"    @Test
    public void testRight_String() {
        assertSame(null, StringUtils.right(null, -1));
        assertSame(null, StringUtils.right(null, 0));
        assertSame(null, StringUtils.right(null, 2));
        
        assertEquals("""", StringUtils.right("""", -1));
        assertEquals("""", StringUtils.right("""", 0));
        assertEquals("""", StringUtils.right("""", 2));
        
        assertEquals("""", StringUtils.right(FOOBAR, -1));
        assertEquals("""", StringUtils.right(FOOBAR, 0));
        assertEquals(BAR, StringUtils.right(FOOBAR, 3));
        assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5820]])
878,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_CharBuffers(),"    @Test
    public void testDefaultIfEmpty_CharBuffers() {
        assertEquals(""NULL"", StringUtils.defaultIfEmpty(CharBuffer.wrap(""""), CharBuffer.wrap(""NULL"")).toString());
        assertEquals(""abc"", StringUtils.defaultIfEmpty(CharBuffer.wrap(""abc""), CharBuffer.wrap(""NULL"")).toString());
        assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(""""), null));
        // Tests compatibility for the API return type
        final CharBuffer s = StringUtils.defaultIfEmpty(CharBuffer.wrap(""abc""), CharBuffer.wrap(""NULL""));
        assertEquals(""abc"", s.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5815]])
926,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testGetJavaHome(),"    @Test
    public void testGetJavaHome() {
        final File dir = SystemUtils.getJavaHome();
        Assert.assertNotNull(dir);
        Assert.assertTrue(dir.exists());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5804]])
800,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringAfter_StringString(),"    @Test
    public void testSubstringAfter_StringString() {
        assertEquals(""barXXbaz"", StringUtils.substringAfter(""fooXXbarXXbaz"", ""XX""));
        
        assertEquals(null, StringUtils.substringAfter(null, null));
        assertEquals(null, StringUtils.substringAfter(null, """"));
        assertEquals(null, StringUtils.substringAfter(null, ""XX""));
        assertEquals("""", StringUtils.substringAfter("""", null));
        assertEquals("""", StringUtils.substringAfter("""", """"));
        assertEquals("""", StringUtils.substringAfter("""", ""XX""));
        
        assertEquals("""", StringUtils.substringAfter(""foo"", null));
        assertEquals(""ot"", StringUtils.substringAfter(""foot"", ""o""));
        assertEquals(""bc"", StringUtils.substringAfter(""abc"", ""a""));
        assertEquals(""cba"", StringUtils.substringAfter(""abcba"", ""b""));
        assertEquals("""", StringUtils.substringAfter(""abc"", ""c""));
        assertEquals(""abc"", StringUtils.substringAfter(""abc"", """"));
        assertEquals("""", StringUtils.substringAfter(""abc"", ""d""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5801]])
480,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,"org.apache.commons.lang3.ConversionTest.assertBinaryEquals(boolean[], boolean[])","    static void assertBinaryEquals(final boolean[] expected, final boolean[] actual) {
        assertEquals(expected.length, actual.length);
        for (int i = 0; i < expected.length; i++ ) {
            try {
                assertEquals(expected[i], actual[i]);
            } catch (final Throwable e) {
                final String msg = ""Mismatch at index ""
                    + i
                    + "" between:\n""
                    + dbgPrint(expected)
                    + "" and\n""
                    + dbgPrint(actual);
                fail(msg + ""\n"" + e.getMessage());
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5800]])
739,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArrayWithSupplementaryChars(),"    @Test
    public void testContainsNone_CharArrayWithSupplementaryChars() {
        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertFalse(StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertTrue(StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));
        assertTrue(StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5800]])
851,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt(),"    @Test
    public void testRepeat_StringInt() {
        assertEquals(null, StringUtils.repeat(null, 2));
        assertEquals("""", StringUtils.repeat(""ab"", 0));
        assertEquals("""", StringUtils.repeat("""", 3));
        assertEquals(""aaa"", StringUtils.repeat(""a"", 3));
        assertEquals(""ababab"", StringUtils.repeat(""ab"", 3));
        assertEquals(""abcabcabc"", StringUtils.repeat(""abc"", 3));
        final String str = StringUtils.repeat(""a"", 10000);  // bigger than pad limit
        assertEquals(10000, str.length());
        assertTrue(StringUtils.containsOnly(str, new char[] {'a'}));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5793]])
334,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testOr_object_emptyInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testOr_object_emptyInput() {
        BooleanUtils.or(new Boolean[] {});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5791]])
796,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testLeft_String(),"    @Test
    public void testLeft_String() {
        assertSame(null, StringUtils.left(null, -1));
        assertSame(null, StringUtils.left(null, 0));
        assertSame(null, StringUtils.left(null, 2));
        
        assertEquals("""", StringUtils.left("""", -1));
        assertEquals("""", StringUtils.left("""", 0));
        assertEquals("""", StringUtils.left("""", 2));
        
        assertEquals("""", StringUtils.left(FOOBAR, -1));
        assertEquals("""", StringUtils.left(FOOBAR, 0));
        assertEquals(FOO, StringUtils.left(FOOBAR, 3));
        assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5785]])
335,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testOr_object_nullElementInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testOr_object_nullElementInput() {
        BooleanUtils.or(new Boolean[] {null});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5784]])
989,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsAssignable_withMessage(),"    @Test
    public void testIsAssignable_withMessage() {
        Validate.isAssignableFrom(CharSequence.class, String.class, ""Error"");
        Validate.isAssignableFrom(AbstractList.class, ArrayList.class, ""Error"");
        try {
            Validate.isAssignableFrom(List.class, String.class, ""Error"");
            fail(""Expecting IllegalArgumentException"");
        } catch(final IllegalArgumentException e) {
            assertEquals(""Error"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5782]])
386,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringStringarray(),"    @Test
    public void testKeep_StringStringarray() {
        assertEquals(null, CharSetUtils.keep(null, (String[]) null));
        assertEquals(null, CharSetUtils.keep(null, new String[0]));
        assertEquals(null, CharSetUtils.keep(null, new String[] {null}));
        assertEquals(null, CharSetUtils.keep(null, new String[] {""a-e""}));
        
        assertEquals("""", CharSetUtils.keep("""", (String[]) null));
        assertEquals("""", CharSetUtils.keep("""", new String[0]));
        assertEquals("""", CharSetUtils.keep("""", new String[] {null}));
        assertEquals("""", CharSetUtils.keep("""", new String[] {""a-e""}));
        
        assertEquals("""", CharSetUtils.keep(""hello"", (String[]) null));
        assertEquals("""", CharSetUtils.keep(""hello"", new String[0]));
        assertEquals("""", CharSetUtils.keep(""hello"", new String[] {null}));
        assertEquals(""e"", CharSetUtils.keep(""hello"", new String[] {""a-e""}));
        
        assertEquals(""e"", CharSetUtils.keep(""hello"", new String[] { ""a-e"" }));
        assertEquals(""ell"", CharSetUtils.keep(""hello"", new String[] { ""el"" }));
        assertEquals(""hello"", CharSetUtils.keep(""hello"", new String[] { ""elho"" }));
        assertEquals(""hello"", CharSetUtils.keep(""hello"", new String[] { ""a-z"" }));
        assertEquals(""----"", CharSetUtils.keep(""----"", new String[] { ""-"" }));
        assertEquals(""ll"", CharSetUtils.keep(""hello"", new String[] { ""l"" }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5780]])
890,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testIsAllUpperCase(),"    @Test
    public void testIsAllUpperCase() {
        assertFalse(StringUtils.isAllUpperCase(null));
        assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));
        assertTrue(StringUtils.isAllUpperCase(""ABC""));
        assertFalse(StringUtils.isAllUpperCase(""ABC ""));
        assertFalse(StringUtils.isAllUpperCase(""aBC""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5779]])
731,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArrayWithSupplementaryChars(),"    @Test
    public void testContainsAny_StringCharArrayWithSupplementaryChars() {
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertTrue(StringUtils.containsAny(""a"" + CharU20000 + CharU20001, ""a"".toCharArray()));
        assertTrue(StringUtils.containsAny(CharU20000 + ""a"" + CharU20001, ""a"".toCharArray()));
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001 + ""a"", ""a"".toCharArray()));
        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertTrue(StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertFalse(StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));
        assertFalse(StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5770]])
801,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBeforeLast_StringString(),"    @Test
    public void testSubstringBeforeLast_StringString() {
        assertEquals(""fooXXbar"", StringUtils.substringBeforeLast(""fooXXbarXXbaz"", ""XX""));

        assertEquals(null, StringUtils.substringBeforeLast(null, null));
        assertEquals(null, StringUtils.substringBeforeLast(null, """"));
        assertEquals(null, StringUtils.substringBeforeLast(null, ""XX""));
        assertEquals("""", StringUtils.substringBeforeLast("""", null));
        assertEquals("""", StringUtils.substringBeforeLast("""", """"));
        assertEquals("""", StringUtils.substringBeforeLast("""", ""XX""));

        assertEquals(""foo"", StringUtils.substringBeforeLast(""foo"", null));
        assertEquals(""foo"", StringUtils.substringBeforeLast(""foo"", ""b""));
        assertEquals(""fo"", StringUtils.substringBeforeLast(""foo"", ""o""));
        assertEquals(""abc\r\n"", StringUtils.substringBeforeLast(""abc\r\n"", ""d""));
        assertEquals(""abc"", StringUtils.substringBeforeLast(""abcdabc"", ""d""));
        assertEquals(""abcdabc"", StringUtils.substringBeforeLast(""abcdabcd"", ""d""));
        assertEquals(""a"", StringUtils.substringBeforeLast(""abc"", ""b""));
        assertEquals(""abc "", StringUtils.substringBeforeLast(""abc \n"", ""\n""));
        assertEquals(""a"", StringUtils.substringBeforeLast(""a"", null));
        assertEquals(""a"", StringUtils.substringBeforeLast(""a"", """"));
        assertEquals("""", StringUtils.substringBeforeLast(""a"", ""a""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5767]])
987,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsAssignable(),"    @Test
    public void testIsAssignable() {
        Validate.isAssignableFrom(CharSequence.class, String.class);
        Validate.isAssignableFrom(AbstractList.class, ArrayList.class);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5746]])
277,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer(),"    @Test
    public void test_toBooleanObject_Integer() {
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1)));
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1)));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0)));
        assertEquals(null, BooleanUtils.toBooleanObject((Integer) null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5741]])
806,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testCountMatches_String(),"    @Test
    public void testCountMatches_String() {
        assertEquals(0, StringUtils.countMatches(null, null));
        assertEquals(0, StringUtils.countMatches(""blah"", null));
        assertEquals(0, StringUtils.countMatches(null, ""DD""));

        assertEquals(0, StringUtils.countMatches(""x"", """"));
        assertEquals(0, StringUtils.countMatches("""", """"));

        assertEquals(3, 
             StringUtils.countMatches(""one long someone sentence of one"", ""one""));
        assertEquals(0, 
             StringUtils.countMatches(""one long someone sentence of one"", ""two""));
        assertEquals(4, 
             StringUtils.countMatches(""oooooooooooo"", ""ooo""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5731]])
798,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testMid_String(),"    @Test
    public void testMid_String() {
        assertSame(null, StringUtils.mid(null, -1, 0));
        assertSame(null, StringUtils.mid(null, 0, -1));
        assertSame(null, StringUtils.mid(null, 3, 0));
        assertSame(null, StringUtils.mid(null, 3, 2));
        
        assertEquals("""", StringUtils.mid("""", 0, -1));
        assertEquals("""", StringUtils.mid("""", 0, 0));
        assertEquals("""", StringUtils.mid("""", 0, 2));
        
        assertEquals("""", StringUtils.mid(FOOBAR, 3, -1));
        assertEquals("""", StringUtils.mid(FOOBAR, 3, 0));
        assertEquals(""b"", StringUtils.mid(FOOBAR, 3, 1));
        assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3));
        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3));
        assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80));
        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));
        assertEquals("""", StringUtils.mid(FOOBAR, 9, 3));
        assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5730]])
833,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String(),"    @Test
    public void testSplitPreserveAllTokens_String() {
        assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null));
        assertEquals(0, StringUtils.splitPreserveAllTokens("""").length);
        
        String str = ""abc def"";
        String[] res = StringUtils.splitPreserveAllTokens(str);
        assertEquals(2, res.length);
        assertEquals(""abc"", res[0]);
        assertEquals(""def"", res[1]);
        
        str = ""abc  def"";
        res = StringUtils.splitPreserveAllTokens(str);
        assertEquals(3, res.length);
        assertEquals(""abc"", res[0]);
        assertEquals("""", res[1]);
        assertEquals(""def"", res[2]);
        
        str = "" abc "";
        res = StringUtils.splitPreserveAllTokens(str);
        assertEquals(3, res.length);
        assertEquals("""", res[0]);
        assertEquals(""abc"", res[1]);
        assertEquals("""", res[2]);
        
        str = ""a b .c"";
        res = StringUtils.splitPreserveAllTokens(str);
        assertEquals(3, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"", res[1]);
        assertEquals("".c"", res[2]);
        
        str = "" a b .c"";
        res = StringUtils.splitPreserveAllTokens(str);
        assertEquals(4, res.length);
        assertEquals("""", res[0]);
        assertEquals(""a"", res[1]);
        assertEquals(""b"", res[2]);
        assertEquals("".c"", res[3]);
        
        str = ""a  b  .c"";
        res = StringUtils.splitPreserveAllTokens(str);
        assertEquals(5, res.length);
        assertEquals(""a"", res[0]);
        assertEquals("""", res[1]);
        assertEquals(""b"", res[2]);
        assertEquals("""", res[3]);
        assertEquals("".c"", res[4]);
        
        str = "" a  "";
        res = StringUtils.splitPreserveAllTokens(str);
        assertEquals(4, res.length);
        assertEquals("""", res[0]);
        assertEquals(""a"", res[1]);
        assertEquals("""", res[2]);
        assertEquals("""", res[3]);

        str = "" a  b"";
        res = StringUtils.splitPreserveAllTokens(str);
        assertEquals(4, res.length);
        assertEquals("""", res[0]);
        assertEquals(""a"", res[1]);
        assertEquals("""", res[2]);
        assertEquals(""b"", res[3]);

        str = ""a"" + WHITESPACE + ""b"" + NON_WHITESPACE + ""c"";
        res = StringUtils.splitPreserveAllTokens(str);
        assertEquals(WHITESPACE.length() + 1, res.length);
        assertEquals(""a"", res[0]);
        for(int i = 1; i < WHITESPACE.length()-1; i++)
        {
          assertEquals("""", res[i]);
        }
        assertEquals(""b"" + NON_WHITESPACE + ""c"", res[WHITESPACE.length()]);                       
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5727]])
312,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_emptyInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testXor_primitive_emptyInput() {
        BooleanUtils.xor(new boolean[] {});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5723]])
341,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharEncodingTest.java,org.apache.commons.lang3.CharEncodingTest.testSupported(),"    @Test
    public void testSupported() {
        assertTrue(CharEncoding.isSupported(""UTF8""));
        assertTrue(CharEncoding.isSupported(""UTF-8""));
        assertTrue(CharEncoding.isSupported(""ASCII""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5722]])
914,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrim(),"    @Test
    public void testTrim() {
        assertEquals(FOO, StringUtils.trim(FOO + ""  ""));
        assertEquals(FOO, StringUtils.trim("" "" + FOO + ""  ""));
        assertEquals(FOO, StringUtils.trim("" "" + FOO));
        assertEquals(FOO, StringUtils.trim(FOO + """"));
        assertEquals("""", StringUtils.trim("" \t\r\n\b ""));
        assertEquals("""", StringUtils.trim(StringUtilsTest.TRIMMABLE));
        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));
        assertEquals("""", StringUtils.trim(""""));
        assertEquals(null, StringUtils.trim(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5711]])
736,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_StringString(),"    @Test
    public void testContainsIgnoreCase_StringString() {
        assertFalse(StringUtils.containsIgnoreCase(null, null));

        // Null tests
        assertFalse(StringUtils.containsIgnoreCase(null, """"));
        assertFalse(StringUtils.containsIgnoreCase(null, ""a""));
        assertFalse(StringUtils.containsIgnoreCase(null, ""abc""));

        assertFalse(StringUtils.containsIgnoreCase("""", null));
        assertFalse(StringUtils.containsIgnoreCase(""a"", null));
        assertFalse(StringUtils.containsIgnoreCase(""abc"", null));

        // Match len = 0
        assertTrue(StringUtils.containsIgnoreCase("""", """"));
        assertTrue(StringUtils.containsIgnoreCase(""a"", """"));
        assertTrue(StringUtils.containsIgnoreCase(""abc"", """"));

        // Match len = 1
        assertFalse(StringUtils.containsIgnoreCase("""", ""a""));
        assertTrue(StringUtils.containsIgnoreCase(""a"", ""a""));
        assertTrue(StringUtils.containsIgnoreCase(""abc"", ""a""));
        assertFalse(StringUtils.containsIgnoreCase("""", ""A""));
        assertTrue(StringUtils.containsIgnoreCase(""a"", ""A""));
        assertTrue(StringUtils.containsIgnoreCase(""abc"", ""A""));

        // Match len > 1
        assertFalse(StringUtils.containsIgnoreCase("""", ""abc""));
        assertFalse(StringUtils.containsIgnoreCase(""a"", ""abc""));
        assertTrue(StringUtils.containsIgnoreCase(""xabcz"", ""abc""));
        assertFalse(StringUtils.containsIgnoreCase("""", ""ABC""));
        assertFalse(StringUtils.containsIgnoreCase(""a"", ""ABC""));
        assertTrue(StringUtils.containsIgnoreCase(""xabcz"", ""ABC""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5708]])
316,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testXor_object_emptyInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testXor_object_emptyInput() {
        BooleanUtils.xor(new Boolean[] {});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5706]])
395,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToChar_String_char(),"    @Test
    public void testToChar_String_char() {
        assertEquals('A', CharUtils.toChar(""A"", 'X'));
        assertEquals('B', CharUtils.toChar(""BA"", 'X'));
        assertEquals('X', CharUtils.toChar("""", 'X'));
        assertEquals('X', CharUtils.toChar((String) null, 'X'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5706]])
431,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_NoAutoboxing(),"    @Test
    public void test_isAssignable_NoAutoboxing() throws Exception {
        assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false));
        assertFalse(ClassUtils.isAssignable(String.class, null, false));

        assertTrue(ClassUtils.isAssignable(null, Object.class, false));
        assertTrue(ClassUtils.isAssignable(null, Integer.class, false));
        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, false));
        assertTrue(ClassUtils.isAssignable(String.class, Object.class, false));
        assertTrue(ClassUtils.isAssignable(String.class, String.class, false));
        assertFalse(ClassUtils.isAssignable(Object.class, String.class, false));
        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class, false));
        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Object.class, false));
        assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE, false));
        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, false));
        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, false));
        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, false));
        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Object.class, false));
        assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, false));
        assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, false));
        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, false));
        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5704]])
126,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBoolean(),"    @Test
    public void testNullToEmptyBoolean() {
        // Test null handling
        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null));
        // Test valid array handling
        final boolean[] original = new boolean[] {true, false};
        assertEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final boolean[] empty = new boolean[]{};
        final boolean[] result = ArrayUtils.nullToEmpty(empty);
        assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5703]])
317,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullElementInput(),"    @Test(expected = IllegalArgumentException.class)
    public void testXor_object_nullElementInput() {
        BooleanUtils.xor(new Boolean[] {null});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5697]])
135,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyString(),"    @Test
    public void testNullToEmptyString() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.nullToEmpty((String[]) null));
        // Test valid array handling
        final String[] original = new String[] {""abc"", ""def""};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final String[] empty = new String[]{};
        final String[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_STRING_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5695]])
278,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int_int_int(),"    @Test
    public void test_toBoolean_int_int_int() {
        assertTrue(BooleanUtils.toBoolean(6, 6, 7));
        assertFalse(BooleanUtils.toBoolean(7, 6, 7));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5692]])
694,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new StringEscapeUtils());
        final Constructor<?>[] cons = StringEscapeUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(StringEscapeUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(StringEscapeUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5691]])
802,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringAfterLast_StringString(),"    @Test
    public void testSubstringAfterLast_StringString() {
        assertEquals(""baz"", StringUtils.substringAfterLast(""fooXXbarXXbaz"", ""XX""));

        assertEquals(null, StringUtils.substringAfterLast(null, null));
        assertEquals(null, StringUtils.substringAfterLast(null, """"));
        assertEquals(null, StringUtils.substringAfterLast(null, ""XX""));
        assertEquals("""", StringUtils.substringAfterLast("""", null));
        assertEquals("""", StringUtils.substringAfterLast("""", """"));
        assertEquals("""", StringUtils.substringAfterLast("""", ""a""));

        assertEquals("""", StringUtils.substringAfterLast(""foo"", null));
        assertEquals("""", StringUtils.substringAfterLast(""foo"", ""b""));
        assertEquals(""t"", StringUtils.substringAfterLast(""foot"", ""o""));
        assertEquals(""bc"", StringUtils.substringAfterLast(""abc"", ""a""));
        assertEquals(""a"", StringUtils.substringAfterLast(""abcba"", ""b""));
        assertEquals("""", StringUtils.substringAfterLast(""abc"", ""c""));
        assertEquals("""", StringUtils.substringAfterLast("""", ""d""));
        assertEquals("""", StringUtils.substringAfterLast(""abc"", """"));
    }        
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5689]])
429,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isAssignable(),"    @Test
    public void test_isAssignable() throws Exception {
        assertFalse(ClassUtils.isAssignable((Class<?>) null, null));
        assertFalse(ClassUtils.isAssignable(String.class, null));

        assertTrue(ClassUtils.isAssignable(null, Object.class));
        assertTrue(ClassUtils.isAssignable(null, Integer.class));
        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));
        assertTrue(ClassUtils.isAssignable(String.class, Object.class));
        assertTrue(ClassUtils.isAssignable(String.class, String.class));
        assertFalse(ClassUtils.isAssignable(Object.class, String.class));

        final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5);

        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class));
        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class));
        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));
        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class));
        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));
        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));
        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));
        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class));
        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));
        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class));
        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));
        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5688]])
891,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRemoveStart(),"    @Test
    public void testRemoveStart() {
        // StringUtils.removeStart("""", *)        = """"
        assertNull(StringUtils.removeStart(null, null));
        assertNull(StringUtils.removeStart(null, """"));
        assertNull(StringUtils.removeStart(null, ""a""));
        
        // StringUtils.removeStart(*, null)      = *
        assertEquals(StringUtils.removeStart("""", null), """");
        assertEquals(StringUtils.removeStart("""", """"), """");
        assertEquals(StringUtils.removeStart("""", ""a""), """");
        
        // All others:
        assertEquals(StringUtils.removeStart(""www.domain.com"", ""www.""), ""domain.com"");
        assertEquals(StringUtils.removeStart(""domain.com"", ""www.""), ""domain.com"");
        assertEquals(StringUtils.removeStart(""domain.com"", """"), ""domain.com"");        
        assertEquals(StringUtils.removeStart(""domain.com"", null), ""domain.com"");        
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5688]])
390,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToCharacterObject_char(),"    @SuppressWarnings(""deprecation"") // intentional test of deprecated method
    @Test
    public void testToCharacterObject_char() {
        assertEquals(new Character('a'), CharUtils.toCharacterObject('a'));
        assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));
       
        for (int i = 0; i < 128; i++) {
            final Character ch = CharUtils.toCharacterObject((char) i);
            final Character ch2 = CharUtils.toCharacterObject((char) i);
            assertSame(ch, ch2);
            assertEquals(i, ch.charValue());
        }
        for (int i = 128; i < 196; i++) {
            final Character ch = CharUtils.toCharacterObject((char) i);
            final Character ch2 = CharUtils.toCharacterObject((char) i);
            assertEquals(ch, ch2);
            assertTrue(ch != ch2);
            assertEquals(i, ch.charValue());
            assertEquals(i, ch2.charValue());
        }
        assertSame(CharUtils.toCharacterObject(""a""), CharUtils.toCharacterObject('a'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5687]])
915,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrimToNull(),"    @Test
    public void testTrimToNull() {
        assertEquals(FOO, StringUtils.trimToNull(FOO + ""  ""));
        assertEquals(FOO, StringUtils.trimToNull("" "" + FOO + ""  ""));
        assertEquals(FOO, StringUtils.trimToNull("" "" + FOO));
        assertEquals(FOO, StringUtils.trimToNull(FOO + """"));
        assertEquals(null, StringUtils.trimToNull("" \t\r\n\b ""));
        assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));
        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));
        assertEquals(null, StringUtils.trimToNull(""""));
        assertEquals(null, StringUtils.trimToNull(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5682]])
732,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringString(),"    @Test
    public void testContainsAny_StringString() {
        assertFalse(StringUtils.containsAny(null, (String) null));
        assertFalse(StringUtils.containsAny(null, """"));
        assertFalse(StringUtils.containsAny(null, ""ab""));

        assertFalse(StringUtils.containsAny("""", (String) null));
        assertFalse(StringUtils.containsAny("""", """"));
        assertFalse(StringUtils.containsAny("""", ""ab""));

        assertFalse(StringUtils.containsAny(""zzabyycdxx"", (String) null));
        assertFalse(StringUtils.containsAny(""zzabyycdxx"", """"));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", ""za""));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", ""by""));
        assertFalse(StringUtils.containsAny(""ab"", ""z""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5680]])
313,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_2items(),"    @Test
    public void testXor_primitive_validInput_2items() {
        assertTrue(
            ""True result for (true, true)"",
            ! BooleanUtils.xor(new boolean[] { true, true }));

        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils.xor(new boolean[] { false, false }));

        assertTrue(
            ""False result for (true, false)"",
            BooleanUtils.xor(new boolean[] { true, false }));

        assertTrue(
            ""False result for (false, true)"",
            BooleanUtils.xor(new boolean[] { false, true }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5675]])
383,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testCount_StringString(),"    @Test
    public void testCount_StringString() {
        assertEquals(0, CharSetUtils.count(null, (String) null));
        assertEquals(0, CharSetUtils.count(null, """"));
        
        assertEquals(0, CharSetUtils.count("""", (String) null));
        assertEquals(0, CharSetUtils.count("""", """"));
        assertEquals(0, CharSetUtils.count("""", ""a-e""));
        
        assertEquals(0, CharSetUtils.count(""hello"", (String) null));
        assertEquals(0, CharSetUtils.count(""hello"", """"));
        assertEquals(1, CharSetUtils.count(""hello"", ""a-e""));
        assertEquals(3, CharSetUtils.count(""hello"", ""l-p""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5667]])
362,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSequenceUtilsTest.java,org.apache.commons.lang3.CharSequenceUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new CharSequenceUtils());
        final Constructor<?>[] cons = CharSequenceUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(CharSequenceUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(CharSequenceUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5664]])
856,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar(),"    @Test
    public void testRightPad_StringIntChar() {
        assertEquals(null, StringUtils.rightPad(null, 5, ' '));
        assertEquals(""     "", StringUtils.rightPad("""", 5, ' '));
        assertEquals(""abc  "", StringUtils.rightPad(""abc"", 5, ' '));
        assertEquals(""abc"", StringUtils.rightPad(""abc"", 2, ' '));
        assertEquals(""abc"", StringUtils.rightPad(""abc"", -1, ' '));
        assertEquals(""abcxx"", StringUtils.rightPad(""abc"", 5, 'x'));
        final String str = StringUtils.rightPad(""aaa"", 10000, 'a');  // bigger than pad length
        assertEquals(10000, str.length());
        assertTrue(StringUtils.containsOnly(str, new char[] {'a'}));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5659]])
387,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringString(),"    @Test
    public void testDelete_StringString() {
        assertEquals(null, CharSetUtils.delete(null, (String) null));
        assertEquals(null, CharSetUtils.delete(null, """"));
        
        assertEquals("""", CharSetUtils.delete("""", (String) null));
        assertEquals("""", CharSetUtils.delete("""", """"));
        assertEquals("""", CharSetUtils.delete("""", ""a-e""));
        
        assertEquals(""hello"", CharSetUtils.delete(""hello"", (String) null));
        assertEquals(""hello"", CharSetUtils.delete(""hello"", """"));
        assertEquals(""hllo"", CharSetUtils.delete(""hello"", ""a-e""));
        assertEquals(""he"", CharSetUtils.delete(""hello"", ""l-p""));
        assertEquals(""hello"", CharSetUtils.delete(""hello"", ""z""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5658]])
380,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringStringarray(),"    @Test
    public void testSqueeze_StringStringarray() {
        assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));
        assertEquals(null, CharSetUtils.squeeze(null, new String[0]));
        assertEquals(null, CharSetUtils.squeeze(null, new String[] {null}));
        assertEquals(null, CharSetUtils.squeeze(null, new String[] {""el""}));
        
        assertEquals("""", CharSetUtils.squeeze("""", (String[]) null));
        assertEquals("""", CharSetUtils.squeeze("""", new String[0]));
        assertEquals("""", CharSetUtils.squeeze("""", new String[] {null}));
        assertEquals("""", CharSetUtils.squeeze("""", new String[] {""a-e""}));
        
        assertEquals(""hello"", CharSetUtils.squeeze(""hello"", (String[]) null));
        assertEquals(""hello"", CharSetUtils.squeeze(""hello"", new String[0]));
        assertEquals(""hello"", CharSetUtils.squeeze(""hello"", new String[] {null}));
        assertEquals(""hello"", CharSetUtils.squeeze(""hello"", new String[] {""a-e""}));
        
        assertEquals(""helo"", CharSetUtils.squeeze(""hello"", new String[] { ""el"" }));
        assertEquals(""hello"", CharSetUtils.squeeze(""hello"", new String[] { ""e"" }));
        assertEquals(""fofof"", CharSetUtils.squeeze(""fooffooff"", new String[] { ""of"" }));
        assertEquals(""fof"", CharSetUtils.squeeze(""fooooff"", new String[] { ""fo"" }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5658]])
257,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testIsAllSet(),"    @Test
    public void testIsAllSet() {
        for (int j = 0; j < 0x3F80; j += 0x80) {
            assertTrue(!bf_multi.isAllSet(j));
            assertTrue(bf_zero.isAllSet(j));
        }
        assertTrue(bf_multi.isAllSet(0x3F80));
        assertTrue(!bf_single.isAllSet(0));
        assertTrue(bf_single.isAllSet(0x4000));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5657]])
629,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testLANG807(),"    @Test
    public void testLANG807() {
        try {
            RandomStringUtils.random(3,5,5,false,false);
            fail(""Expected IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) { // distinguish from Random#nextInt message
            final String msg = ex.getMessage();
            assertTrue(""Message ("" + msg + "") must contain 'start'"", msg.contains(""start""));
            assertTrue(""Message ("" + msg + "") must contain 'end'"", msg.contains(""end""));
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5652]])
10,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testHashCode(),"    @Test(timeout = 666000)
    public void testHashCode() throws Exception {
        final Test test = getClass().getDeclaredMethod(""testHashCode"").getAnnotation(Test.class);
        assertEquals(test.hashCode(), AnnotationUtils.hashCode(test));
        final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class);
        assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1));
        final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class);
        assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5650]])
347,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_is(),"    @Test
    public void testConstructorAccessors_is() {
        final CharRange rangea = CharRange.is('a');
        assertEquals('a', rangea.getStart());
        assertEquals('a', rangea.getEnd());
        assertFalse(rangea.isNegated());
        assertEquals(""a"", rangea.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5644]])
983,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testExclusiveBetween_withMessage(),"    @Test
    public void testExclusiveBetween_withMessage()
    {
        Validate.exclusiveBetween(""a"", ""c"", ""b"", ""Error"");
        Validate.exclusiveBetween(0, 2, 1, ""Error"");
        try {
            Validate.exclusiveBetween(0, 5, 6, ""Error"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            assertEquals(""Error"", e.getMessage());
        }
        try {
            Validate.exclusiveBetween(0, 5, 5, ""Error"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            assertEquals(""Error"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5638]])
627,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),"    @Test
    public void testRandomStringUtils() {
        String r1 = RandomStringUtils.random(50);
        assertEquals(""random(50) length"", 50, r1.length());
        String r2 = RandomStringUtils.random(50);
        assertEquals(""random(50) length"", 50, r2.length());
        assertTrue(""!r1.equals(r2)"", !r1.equals(r2));
        
        r1 = RandomStringUtils.randomAscii(50);
        assertEquals(""randomAscii(50) length"", 50, r1.length());
        for(int i = 0; i < r1.length(); i++) {
            assertTrue(""char between 32 and 127"", r1.charAt(i) >= 32 && r1.charAt(i) <= 127);
        }        
        r2 = RandomStringUtils.randomAscii(50);
        assertTrue(""!r1.equals(r2)"", !r1.equals(r2));

        r1 = RandomStringUtils.randomAlphabetic(50);
        assertEquals(""randomAlphabetic(50)"", 50, r1.length());
        for(int i = 0; i < r1.length(); i++) {
            assertTrue(""r1 contains alphabetic"", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)));
        }
        r2 = RandomStringUtils.randomAlphabetic(50);
        assertTrue(""!r1.equals(r2)"", !r1.equals(r2));
        
        r1 = RandomStringUtils.randomAlphanumeric(50);
        assertEquals(""randomAlphanumeric(50)"", 50, r1.length());
        for(int i = 0; i < r1.length(); i++) {
            assertTrue(""r1 contains alphanumeric"", Character.isLetterOrDigit(r1.charAt(i)));
        }
        r2 = RandomStringUtils.randomAlphabetic(50);
        assertTrue(""!r1.equals(r2)"", !r1.equals(r2));
        
        r1 = RandomStringUtils.randomNumeric(50);
        assertEquals(""randomNumeric(50)"", 50, r1.length());
        for(int i = 0; i < r1.length(); i++) {
            assertTrue(""r1 contains numeric"", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)));
        }
        r2 = RandomStringUtils.randomNumeric(50);
        assertTrue(""!r1.equals(r2)"", !r1.equals(r2));
        
        String set = ""abcdefg"";
        r1 = RandomStringUtils.random(50, set);
        assertEquals(""random(50, \""abcdefg\"")"", 50, r1.length());
        for(int i = 0; i < r1.length(); i++) {
            assertTrue(""random char in set"", set.indexOf(r1.charAt(i)) > -1);
        }
        r2 = RandomStringUtils.random(50, set);
        assertTrue(""!r1.equals(r2)"", !r1.equals(r2));
        
        r1 = RandomStringUtils.random(50, (String) null);
        assertEquals(""random(50) length"", 50, r1.length());
        r2 = RandomStringUtils.random(50, (String) null);
        assertEquals(""random(50) length"", 50, r2.length());
        assertTrue(""!r1.equals(r2)"", !r1.equals(r2));
        
        set = ""stuvwxyz"";
        r1 = RandomStringUtils.random(50, set.toCharArray());
        assertEquals(""random(50, \""stuvwxyz\"")"", 50, r1.length());
        for(int i = 0; i < r1.length(); i++) {
            assertTrue(""random char in set"", set.indexOf(r1.charAt(i)) > -1);
        }
        r2 = RandomStringUtils.random(50, set);
        assertTrue(""!r1.equals(r2)"", !r1.equals(r2));
        
        r1 = RandomStringUtils.random(50, (char[]) null);
        assertEquals(""random(50) length"", 50, r1.length());
        r2 = RandomStringUtils.random(50, (char[]) null);
        assertEquals(""random(50) length"", 50, r2.length());
        assertTrue(""!r1.equals(r2)"", !r1.equals(r2));

        final long seed = System.currentTimeMillis();
        r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));
        r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));
        assertEquals(""r1.equals(r2)"", r1, r2);

        r1 = RandomStringUtils.random(0);
        assertEquals(""random(0).equals(\""\"")"", """", r1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5635]])
224,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToObject_boolean(),"    @Test
    public void testToObject_boolean() {
        final boolean[] b = null;
        assertArrayEquals(null, ArrayUtils.toObject(b));
        assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));
        assertTrue(Arrays.equals(
            new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE},
            ArrayUtils.toObject(new boolean[] {true, false, true}))
        );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5626]])
895,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRemove_String(),"    @Test
    public void testRemove_String() {
        // StringUtils.remove(null, *)        = null
        assertEquals(null, StringUtils.remove(null, null));
        assertEquals(null, StringUtils.remove(null, """"));
        assertEquals(null, StringUtils.remove(null, ""a""));
        
        // StringUtils.remove("""", *)          = """"
        assertEquals("""", StringUtils.remove("""", null));
        assertEquals("""", StringUtils.remove("""", """"));
        assertEquals("""", StringUtils.remove("""", ""a""));
        
        // StringUtils.remove(*, null)        = *
        assertEquals(null, StringUtils.remove(null, null));
        assertEquals("""", StringUtils.remove("""", null));
        assertEquals(""a"", StringUtils.remove(""a"", null));
        
        // StringUtils.remove(*, """")          = *
        assertEquals(null, StringUtils.remove(null, """"));
        assertEquals("""", StringUtils.remove("""", """"));
        assertEquals(""a"", StringUtils.remove(""a"", """"));
        
        // StringUtils.remove(""queued"", ""ue"") = ""qd""
        assertEquals(""qd"", StringUtils.remove(""queued"", ""ue""));
        
        // StringUtils.remove(""queued"", ""zz"") = ""queued""
        assertEquals(""queued"", StringUtils.remove(""queued"", ""zz""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5626]])
567,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testToLocale_1Part(),"    @Test
    public void testToLocale_1Part() {
        assertEquals(null, LocaleUtils.toLocale((String) null));
        
        assertValidToLocale(""us"");
        assertValidToLocale(""fr"");
        assertValidToLocale(""de"");
        assertValidToLocale(""zh"");
        // Valid format but lang doesnt exist, should make instance anyway
        assertValidToLocale(""qq"");
        
        try {
            LocaleUtils.toLocale(""Us"");
            fail(""Should fail if not lowercase"");
        } catch (final IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""US"");
            fail(""Should fail if not lowercase"");
        } catch (final IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""uS"");
            fail(""Should fail if not lowercase"");
        } catch (final IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""u#"");
            fail(""Should fail if not lowercase"");
        } catch (final IllegalArgumentException iae) {}
        
        try {
            LocaleUtils.toLocale(""u"");
            fail(""Must be 2 chars if less than 5"");
        } catch (final IllegalArgumentException iae) {}
       
        try {
            LocaleUtils.toLocale(""uuu"");
            fail(""Must be 2 chars if less than 5"");
        } catch (final IllegalArgumentException iae) {}

        try {
            LocaleUtils.toLocale(""uu_U"");
            fail(""Must be 2 chars if less than 5"");
        } catch (final IllegalArgumentException iae) {}
    }        
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5625]])
641,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIsWithCompare(),"    @Test
    public void testIsWithCompare(){
        final Comparator<Integer> c = new Comparator<Integer>(){
            @Override
            public int compare(final Integer o1, final Integer o2) {
                return 0; // all integers are equal
            }
        };
        Range<Integer> ri = Range.is(10);
        assertFalse(""should not contain null"",ri.contains(null));
        assertTrue(""should contain 10"",ri.contains(10));
        assertFalse(""should not contain 11"",ri.contains(11));
        ri = Range.is(10,c);
        assertFalse(""should not contain null"",ri.contains(null));
        assertTrue(""should contain 10"",ri.contains(10));
        assertTrue(""should contain 11"",ri.contains(11));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5620]])
612,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testCloneOfNotCloneable(),"    @Test
    public void testCloneOfNotCloneable() {
        final String string = new String(""apache"");
        assertNull(ObjectUtils.clone(string));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5617]])
874,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringBuilders(),"    @Test
    public void testDefaultIfEmpty_StringBuilders() {
        assertEquals(""NULL"", StringUtils.defaultIfEmpty(new StringBuilder(""""), new StringBuilder(""NULL"")).toString());
        assertEquals(""abc"", StringUtils.defaultIfEmpty(new StringBuilder(""abc""), new StringBuilder(""NULL"")).toString());
        assertNull(StringUtils.defaultIfEmpty(new StringBuilder(""""), null));
        // Tests compatibility for the API return type
        final StringBuilder s = StringUtils.defaultIfEmpty(new StringBuilder(""abc""), new StringBuilder(""NULL""));
        assertEquals(""abc"", s.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5614]])
400,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToString_char(),"    @Test
    public void testToString_char() {
        assertEquals(""a"", CharUtils.toString('a'));
        assertSame(CharUtils.toString('a'), CharUtils.toString('a'));
       
        for (int i = 0; i < 128; i++) {
            final String str = CharUtils.toString((char) i);
            final String str2 = CharUtils.toString((char) i);
            assertSame(str, str2);
            assertEquals(1, str.length());
            assertEquals(i, str.charAt(0));
        }
        for (int i = 128; i < 196; i++) {
            final String str = CharUtils.toString((char) i);
            final String str2 = CharUtils.toString((char) i);
            assertEquals(str, str2);
            assertTrue(str != str2);
            assertEquals(1, str.length());
            assertEquals(i, str.charAt(0));
            assertEquals(1, str2.length());
            assertEquals(i, str2.charAt(0));
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5612]])
602,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testCompare(),"    @Test
    public void testCompare() {
        final Integer one = Integer.valueOf(1);
        final Integer two = Integer.valueOf(2);
        final Integer nullValue = null;

        assertEquals(""Null Null false"", 0, ObjectUtils.compare(nullValue, nullValue));
        assertEquals(""Null Null true"",  0, ObjectUtils.compare(nullValue, nullValue, true));

        assertEquals(""Null one false"", -1, ObjectUtils.compare(nullValue, one));
        assertEquals(""Null one true"",   1, ObjectUtils.compare(nullValue, one, true));
        
        assertEquals(""one Null false"", 1, ObjectUtils.compare(one, nullValue));
        assertEquals(""one Null true"", -1, ObjectUtils.compare(one, nullValue, true));

        assertEquals(""one two false"", -1, ObjectUtils.compare(one, two));
        assertEquals(""one two true"",  -1, ObjectUtils.compare(one, two, true));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5611]])
319,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_3items(),"    @Test
    public void testXor_object_validInput_3items() {
        assertTrue(
            ""False result for (false, false, true)"",
            BooleanUtils
                .xor(
                    new Boolean[] {
                        Boolean.FALSE,
                        Boolean.FALSE,
                        Boolean.TRUE })
                .booleanValue());

        assertTrue(
            ""False result for (false, true, false)"",
            BooleanUtils
                .xor(
                    new Boolean[] {
                        Boolean.FALSE,
                        Boolean.TRUE,
                        Boolean.FALSE })
                .booleanValue());

        assertTrue(
            ""False result for (true, false, false)"",
            BooleanUtils
                .xor(
                    new Boolean[] {
                        Boolean.TRUE,
                        Boolean.FALSE,
                        Boolean.FALSE })
                .booleanValue());

        assertTrue(
            ""True result for (true, true, true)"",
            ! BooleanUtils
                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })
                .booleanValue());

        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils.xor(
                    new Boolean[] {
                        Boolean.FALSE,
                        Boolean.FALSE,
                        Boolean.FALSE })
                .booleanValue());

        assertTrue(
            ""True result for (true, true, false)"",
            ! BooleanUtils.xor(
                    new Boolean[] {
                        Boolean.TRUE,
                        Boolean.TRUE,
                        Boolean.FALSE })
                .booleanValue());

        assertTrue(
            ""True result for (true, false, true)"",
            ! BooleanUtils.xor(
                    new Boolean[] {
                        Boolean.TRUE,
                        Boolean.FALSE,
                        Boolean.TRUE })
                .booleanValue());

        assertTrue(
            ""False result for (false, true, true)"",
            ! BooleanUtils.xor(
                    new Boolean[] {
                        Boolean.FALSE,
                        Boolean.TRUE,
                        Boolean.TRUE })
                .booleanValue());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5607]])
908,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testPrependIfMissing(),"    @Test
    public void testPrependIfMissing() {
        assertEquals(""prependIfMissing(null,null)"", null, StringUtils.prependIfMissing(null,null));
        assertEquals(""prependIfMissing(abc,null)"", ""abc"", StringUtils.prependIfMissing(""abc"",null));
        assertEquals(""prependIfMissing(\""\"",xyz)"", ""xyz"", StringUtils.prependIfMissing("""",""xyz""));
        assertEquals(""prependIfMissing(abc,xyz)"", ""xyzabc"", StringUtils.prependIfMissing(""abc"",""xyz""));
        assertEquals(""prependIfMissing(xyzabc,xyz)"", ""xyzabc"", StringUtils.prependIfMissing(""xyzabc"",""xyz""));
        assertEquals(""prependIfMissing(XYZabc,xyz)"", ""xyzXYZabc"", StringUtils.prependIfMissing(""XYZabc"",""xyz""));

        assertEquals(""prependIfMissing(null,null null)"", null, StringUtils.prependIfMissing(null,null,(CharSequence[]) null));
        assertEquals(""prependIfMissing(abc,null,null)"", ""abc"", StringUtils.prependIfMissing(""abc"",null,(CharSequence[]) null));
        assertEquals(""prependIfMissing(\""\"",xyz,null)"", ""xyz"", StringUtils.prependIfMissing("""",""xyz"",(CharSequence[]) null));
        assertEquals(""prependIfMissing(abc,xyz,{null})"",""xyzabc"", StringUtils.prependIfMissing(""abc"",""xyz"",new CharSequence[]{null}));
        assertEquals(""prependIfMissing(abc,xyz,\""\"")"",""abc"", StringUtils.prependIfMissing(""abc"",""xyz"",""""));
        assertEquals(""prependIfMissing(abc,xyz,mno)"",""xyzabc"", StringUtils.prependIfMissing(""abc"",""xyz"",""mno""));
        assertEquals(""prependIfMissing(xyzabc,xyz,mno)"", ""xyzabc"", StringUtils.prependIfMissing(""xyzabc"",""xyz"",""mno""));
        assertEquals(""prependIfMissing(mnoabc,xyz,mno)"", ""mnoabc"", StringUtils.prependIfMissing(""mnoabc"",""xyz"",""mno""));
        assertEquals(""prependIfMissing(XYZabc,xyz,mno)"", ""xyzXYZabc"", StringUtils.prependIfMissing(""XYZabc"",""xyz"",""mno""));
        assertEquals(""prependIfMissing(MNOabc,xyz,mno)"", ""xyzMNOabc"", StringUtils.prependIfMissing(""MNOabc"",""xyz"",""mno""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5606]])
417,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getSimpleName_Object(),"    @Test
    public void test_getSimpleName_Object() {
        assertEquals(""ClassUtils"", ClassUtils.getSimpleName(new ClassUtils(), ""<null>""));
        assertEquals(""Inner"", ClassUtils.getSimpleName(new Inner(), ""<null>""));
        assertEquals(""String"", ClassUtils.getSimpleName(""hello"", ""<null>""));
        assertEquals(""<null>"", ClassUtils.getSimpleName(null, ""<null>""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5603]])
626,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new RandomStringUtils());
        final Constructor<?>[] cons = RandomStringUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(RandomStringUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(RandomStringUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5601]])
916,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testTrimToEmpty(),"    @Test
    public void testTrimToEmpty() {
        assertEquals(FOO, StringUtils.trimToEmpty(FOO + ""  ""));
        assertEquals(FOO, StringUtils.trimToEmpty("" "" + FOO + ""  ""));
        assertEquals(FOO, StringUtils.trimToEmpty("" "" + FOO));
        assertEquals(FOO, StringUtils.trimToEmpty(FOO + """"));
        assertEquals("""", StringUtils.trimToEmpty("" \t\r\n\b ""));
        assertEquals("""", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));
        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));
        assertEquals("""", StringUtils.trimToEmpty(""""));
        assertEquals("""", StringUtils.trimToEmpty(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5599]])
645,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testRangeOfChars(),"    @Test
    public void testRangeOfChars() {
        final Range<Character> chars = Range.between('a', 'z');
        assertTrue(chars.contains('b'));
        assertFalse(chars.contains('B'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5598]])
318,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_2items(),"    @Test
    public void testXor_object_validInput_2items() {
        assertTrue(
            ""True result for (true, true)"",
            ! BooleanUtils
                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })
                .booleanValue());

        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils
                .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE })
                .booleanValue());

        assertTrue(
            ""False result for (true, false)"",
            BooleanUtils
                .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })
                .booleanValue());

        assertTrue(
            ""False result for (false, true)"",
            BooleanUtils
                .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE })
                .booleanValue());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5596]])
365,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testGetInstance(),"    @Test
    public void testGetInstance() {
        assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null));
        assertSame(CharSet.EMPTY, CharSet.getInstance(""""));
        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(""a-zA-Z""));
        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(""A-Za-z""));
        assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance(""a-z""));
        assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance(""A-Z""));
        assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance(""0-9""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5584]])
835,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt(),"    @Test
    public void testSplitPreserveAllTokens_StringString_StringStringInt() {
        assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, "".""));
        assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ""."", 3));
        
        assertEquals(0, StringUtils.splitPreserveAllTokens("""", ""."").length);
        assertEquals(0, StringUtils.splitPreserveAllTokens("""", ""."", 3).length);
        
        innerTestSplitPreserveAllTokens('.', ""."", ' ');
        innerTestSplitPreserveAllTokens('.', ""."", ',');
        innerTestSplitPreserveAllTokens('.', "".,"", 'x');
        for (int i = 0; i < WHITESPACE.length(); i++) {
            for (int j = 0; j < NON_WHITESPACE.length(); j++) {
                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));
                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));
            }
        }

        {
          String[] results;
          final String[] expectedResults = {""ab"", ""de fg""};
          results = StringUtils.splitPreserveAllTokens(""ab de fg"", null, 2);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }

        {
          String[] results;
          final String[] expectedResults = {""ab"", ""  de fg""};
          results = StringUtils.splitPreserveAllTokens(""ab   de fg"", null, 2);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }
        
        {
          String[] results;
          final String[] expectedResults = {""ab"", ""::de:fg""};
          results = StringUtils.splitPreserveAllTokens(""ab:::de:fg"", "":"", 2);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }
        
        {
          String[] results;
          final String[] expectedResults = {""ab"", """", "" de fg""};
          results = StringUtils.splitPreserveAllTokens(""ab   de fg"", null, 3);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }
        
        {
          String[] results;
          final String[] expectedResults = {""ab"", """", """", ""de fg""};
          results = StringUtils.splitPreserveAllTokens(""ab   de fg"", null, 4);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }

        {
          final String[] expectedResults = {""ab"", ""cd:ef""};
          String[] results;
          results = StringUtils.splitPreserveAllTokens(""ab:cd:ef"","":"", 2);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }

        {
          String[] results;
          final String[] expectedResults = {""ab"", "":cd:ef""};
          results = StringUtils.splitPreserveAllTokens(""ab::cd:ef"","":"", 2);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }

        {
          String[] results;
          final String[] expectedResults = {""ab"", """", "":cd:ef""};
          results = StringUtils.splitPreserveAllTokens(""ab:::cd:ef"","":"", 3);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }

        {
          String[] results;
          final String[] expectedResults = {""ab"", """", """", ""cd:ef""};
          results = StringUtils.splitPreserveAllTokens(""ab:::cd:ef"","":"", 4);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }

        {
          String[] results;
          final String[] expectedResults = {"""", ""ab"", """", """", ""cd:ef""};
          results = StringUtils.splitPreserveAllTokens("":ab:::cd:ef"","":"", 5);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }
        
        {
          String[] results;
          final String[] expectedResults = {"""", """", ""ab"", """", """", ""cd:ef""};
          results = StringUtils.splitPreserveAllTokens(""::ab:::cd:ef"","":"", 6);
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }
        
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5580]])
831,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt(),"    @Test
    public void testSplitByWholeString_StringStringBooleanInt() {
        assertArrayEquals( null, StringUtils.splitByWholeSeparator( null, ""."", 3 ) ) ;

        assertEquals( 0, StringUtils.splitByWholeSeparator( """", ""."", 3 ).length ) ;

        final String stringToSplitOnNulls = ""ab   de fg"" ;
        final String[] splitOnNullExpectedResults = { ""ab"", ""de fg"" } ;
        //String[] splitOnNullExpectedResults = { ""ab"", ""de"" } ;

        final String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;
        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;
        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {
            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;
        }

        final String stringToSplitOnCharactersAndString = ""abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"" ;

        final String[] splitOnStringExpectedResults = { ""abstemiously"", ""abstemiouslyaeiouyabstemiously"" } ;
        //String[] splitOnStringExpectedResults = { ""abstemiously"", ""abstemiously"" } ;
        final String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, ""aeiouy"", 2 ) ;
        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;
        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) {
            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5580]])
453,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testGetClassRawPrimitives(),"    @Test
    public void testGetClassRawPrimitives() throws ClassNotFoundException {
        assertEquals( int.class, ClassUtils.getClass( ""int"" ) );
        assertEquals( long.class, ClassUtils.getClass( ""long"" ) );
        assertEquals( short.class, ClassUtils.getClass( ""short"" ) );
        assertEquals( byte.class, ClassUtils.getClass( ""byte"" ) );
        assertEquals( char.class, ClassUtils.getClass( ""char"" ) );
        assertEquals( float.class, ClassUtils.getClass( ""float"" ) );
        assertEquals( double.class, ClassUtils.getClass( ""double"" ) );
        assertEquals( boolean.class, ClassUtils.getClass( ""boolean"" ) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5576]])
388,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testDelete_StringStringarray(),"    @Test
    public void testDelete_StringStringarray() {
        assertEquals(null, CharSetUtils.delete(null, (String[]) null));
        assertEquals(null, CharSetUtils.delete(null, new String[0]));
        assertEquals(null, CharSetUtils.delete(null, new String[] {null}));
        assertEquals(null, CharSetUtils.delete(null, new String[] {""el""}));
        
        assertEquals("""", CharSetUtils.delete("""", (String[]) null));
        assertEquals("""", CharSetUtils.delete("""", new String[0]));
        assertEquals("""", CharSetUtils.delete("""", new String[] {null}));
        assertEquals("""", CharSetUtils.delete("""", new String[] {""a-e""}));
        
        assertEquals(""hello"", CharSetUtils.delete(""hello"", (String[]) null));
        assertEquals(""hello"", CharSetUtils.delete(""hello"", new String[0]));
        assertEquals(""hello"", CharSetUtils.delete(""hello"", new String[] {null}));
        assertEquals(""hello"", CharSetUtils.delete(""hello"", new String[] {""xyz""}));

        assertEquals(""ho"", CharSetUtils.delete(""hello"", new String[] { ""el"" }));
        assertEquals("""", CharSetUtils.delete(""hello"", new String[] { ""elho"" }));
        assertEquals(""hello"", CharSetUtils.delete(""hello"", new String[] { """" }));
        assertEquals(""hello"", CharSetUtils.delete(""hello"", """"));
        assertEquals("""", CharSetUtils.delete(""hello"", new String[] { ""a-z"" }));
        assertEquals("""", CharSetUtils.delete(""----"", new String[] { ""-"" }));
        assertEquals(""heo"", CharSetUtils.delete(""hello"", new String[] { ""l"" }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5574]])
371,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate(),"    @Test
    public void testConstructor_String_oddNegate() {
        CharSet set;
        CharRange[] array;
        set = CharSet.getInstance(""^"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // ""^""
        
        set = CharSet.getInstance(""^^"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // ""^^""
        
        set = CharSet.getInstance(""^^^"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // ""^^""
        assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // ""^""
        
        set = CharSet.getInstance(""^^^^"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // ""^^"" x2
        
        set = CharSet.getInstance(""a^"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); // ""a""
        assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // ""^""
        
        set = CharSet.getInstance(""^a-"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); // ""^a""
        assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); // ""-""
        
        set = CharSet.getInstance(""^^-c"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); // ""^^-c""
        
        set = CharSet.getInstance(""^c-^"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // ""^c-^""
        
        set = CharSet.getInstance(""^c-^d"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // ""^c-^""
        assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); // ""d""
        
        set = CharSet.getInstance(""^^-"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // ""^^""
        assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); // ""-""
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5574]])
771,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_char(),"    @Test
    public void testLastIndexOf_char() {
        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));
        assertEquals(-1, StringUtils.lastIndexOf("""", ' '));
        assertEquals(7, StringUtils.lastIndexOf(""aabaabaa"", 'a'));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", 'b'));

        assertEquals(5, StringUtils.lastIndexOf(new StringBuilder(""aabaabaa""), 'b'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5573]])
892,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase(),"    @Test
    public void testRemoveStartIgnoreCase() {
        // StringUtils.removeStart("""", *)        = """"
        assertNull(""removeStartIgnoreCase(null, null)"", StringUtils.removeStartIgnoreCase(null, null));
        assertNull(""removeStartIgnoreCase(null, \""\"")"", StringUtils.removeStartIgnoreCase(null, """"));
        assertNull(""removeStartIgnoreCase(null, \""a\"")"", StringUtils.removeStartIgnoreCase(null, ""a""));
        
        // StringUtils.removeStart(*, null)      = *
        assertEquals(""removeStartIgnoreCase(\""\"", null)"", StringUtils.removeStartIgnoreCase("""", null), """");
        assertEquals(""removeStartIgnoreCase(\""\"", \""\"")"", StringUtils.removeStartIgnoreCase("""", """"), """");
        assertEquals(""removeStartIgnoreCase(\""\"", \""a\"")"", StringUtils.removeStartIgnoreCase("""", ""a""), """");
        
        // All others:
        assertEquals(""removeStartIgnoreCase(\""www.domain.com\"", \""www.\"")"", StringUtils.removeStartIgnoreCase(""www.domain.com"", ""www.""), ""domain.com"");
        assertEquals(""removeStartIgnoreCase(\""domain.com\"", \""www.\"")"", StringUtils.removeStartIgnoreCase(""domain.com"", ""www.""), ""domain.com"");
        assertEquals(""removeStartIgnoreCase(\""domain.com\"", \""\"")"", StringUtils.removeStartIgnoreCase(""domain.com"", """"), ""domain.com"");        
        assertEquals(""removeStartIgnoreCase(\""domain.com\"", null)"", StringUtils.removeStartIgnoreCase(""domain.com"", null), ""domain.com"");        
        
        // Case insensitive:
        assertEquals(""removeStartIgnoreCase(\""www.domain.com\"", \""WWW.\"")"", StringUtils.removeStartIgnoreCase(""www.domain.com"", ""WWW.""), ""domain.com"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5572]])
262,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testClearShort(),"    @Test
    public void testClearShort() {
        assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);
        assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);
        assertEquals(bf_zero.clearShort((short) -1), (short) 0xFFFF);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5572]])
617,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testPossibleCloneOfNotCloneable(),"    @Test
    public void testPossibleCloneOfNotCloneable() {
        final String string = new String(""apache"");
        assertSame(string, ObjectUtils.cloneIfPossible(string));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5568]])
794,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testSubstring_StringInt(),"    @Test
    public void testSubstring_StringInt() {
        assertEquals(null, StringUtils.substring(null, 0));
        assertEquals("""", StringUtils.substring("""", 0));
        assertEquals("""", StringUtils.substring("""", 2));
        
        assertEquals("""", StringUtils.substring(SENTENCE, 80));
        assertEquals(BAZ, StringUtils.substring(SENTENCE, 8));
        assertEquals(BAZ, StringUtils.substring(SENTENCE, -3));
        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0));
        assertEquals(""abc"", StringUtils.substring(""abc"", -4));
        assertEquals(""abc"", StringUtils.substring(""abc"", -3));
        assertEquals(""bc"", StringUtils.substring(""abc"", -2));
        assertEquals(""c"", StringUtils.substring(""abc"", -1));
        assertEquals(""abc"", StringUtils.substring(""abc"", 0));
        assertEquals(""bc"", StringUtils.substring(""abc"", 1));
        assertEquals(""c"", StringUtils.substring(""abc"", 2));
        assertEquals("""", StringUtils.substring(""abc"", 3));
        assertEquals("""", StringUtils.substring(""abc"", 4));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5565]])
944,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotEmptyArray2(),"    @Test
    public void testNotEmptyArray2() {
        Validate.notEmpty(new Object[] {null}, ""MSG"");
        try {
            Validate.notEmpty((Object[]) null, ""MSG"");
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        try {
            Validate.notEmpty(new Object[0], ""MSG"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        
        final String[] array = new String[] {""hi""};
        final String[] test = Validate.notEmpty(array, ""Message"");
        assertSame(array, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5565]])
136,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyBooleanObject(),"    @Test
    public void testNullToEmptyBooleanObject() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null));
        // Test valid array handling
        final Boolean[] original = new Boolean[] {Boolean.TRUE, Boolean.FALSE};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final Boolean[] empty = new Boolean[]{};
        final Boolean[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5551]])
781,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsIsTest.java,org.apache.commons.lang3.StringUtilsIsTest.testIsAlphanumeric(),"    @Test
    public void testIsAlphanumeric() {
        assertFalse(StringUtils.isAlphanumeric(null));
        assertFalse(StringUtils.isAlphanumeric(""""));
        assertFalse(StringUtils.isAlphanumeric("" ""));
        assertTrue(StringUtils.isAlphanumeric(""a""));
        assertTrue(StringUtils.isAlphanumeric(""A""));
        assertTrue(StringUtils.isAlphanumeric(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));
        assertFalse(StringUtils.isAlphanumeric(""ham kso""));
        assertTrue(StringUtils.isAlphanumeric(""1""));
        assertTrue(StringUtils.isAlphanumeric(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));
        assertFalse(StringUtils.isAlphanumeric(""_""));
        assertFalse(StringUtils.isAlphanumeric(""hkHKHik*khbkuh""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5549]])
804,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBetween_StringStringString(),"    @Test
    public void testSubstringBetween_StringStringString() {
        assertEquals(null, StringUtils.substringBetween(null, """", """"));
        assertEquals(null, StringUtils.substringBetween("""", null, """"));
        assertEquals(null, StringUtils.substringBetween("""", """", null));
        assertEquals("""", StringUtils.substringBetween("""", """", """"));
        assertEquals("""", StringUtils.substringBetween(""foo"", """", """"));
        assertEquals(null, StringUtils.substringBetween(""foo"", """", ""]""));
        assertEquals(null, StringUtils.substringBetween(""foo"", ""["", ""]""));
        assertEquals("""", StringUtils.substringBetween(""    "", "" "", ""  ""));
        assertEquals(""bar"", StringUtils.substringBetween(""<foo>bar</foo>"", ""<foo>"", ""</foo>"") );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5548]])
284,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_int_int_int_noMatch(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBooleanObject_int_int_int_noMatch() {
        BooleanUtils.toBooleanObject(9, 6, 7, 8);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5547]])
100,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToString(),"    @Test
    public void testToString() {
        assertEquals(""{}"", ArrayUtils.toString(null));
        assertEquals(""{}"", ArrayUtils.toString(new Object[0]));
        assertEquals(""{}"", ArrayUtils.toString(new String[0]));
        assertEquals(""{<null>}"", ArrayUtils.toString(new String[] {null}));
        assertEquals(""{pink,blue}"", ArrayUtils.toString(new String[] {""pink"",""blue""}));
        
        assertEquals(""<empty>"", ArrayUtils.toString(null, ""<empty>""));
        assertEquals(""{}"", ArrayUtils.toString(new Object[0], ""<empty>""));
        assertEquals(""{}"", ArrayUtils.toString(new String[0], ""<empty>""));
        assertEquals(""{<null>}"", ArrayUtils.toString(new String[] {null}, ""<empty>""));
        assertEquals(""{pink,blue}"", ArrayUtils.toString(new String[] {""pink"",""blue""}, ""<empty>""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5544]])
589,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testHashCode(),"    @Test
    public void testHashCode() {
        assertEquals(0, ObjectUtils.hashCode(null));
        assertEquals(""a"".hashCode(), ObjectUtils.hashCode(""a""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5542]])
971,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new Validate());
        final Constructor<?>[] cons = Validate.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(Validate.class.getModifiers()));
        assertFalse(Modifier.isFinal(Validate.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5540]])
631,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testRandomAlphaNumeric(),"    @Test
    public void testRandomAlphaNumeric() {}
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5537]])
988,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsAssignableExceptionMessage(),"    @Test
    public void testIsAssignableExceptionMessage() {
        try {
            Validate.isAssignableFrom(List.class, String.class);
            fail(""Expecting IllegalArgumentException"");
        } catch(final IllegalArgumentException e) {
            assertEquals(""Cannot assign a java.lang.String to a java.util.List"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5533]])
774,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt(),"    @Test
    public void testLastIndexOf_StringInt() {
        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));
        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));
        assertEquals(-1, StringUtils.lastIndexOf(null, """", 0));
        assertEquals(-1, StringUtils.lastIndexOf(null, """", -1));
        assertEquals(-1, StringUtils.lastIndexOf("""", null, 0));
        assertEquals(-1, StringUtils.lastIndexOf("""", null, -1));
        assertEquals(0, StringUtils.lastIndexOf("""", """", 0));
        assertEquals(-1, StringUtils.lastIndexOf("""", """", -1));
        assertEquals(0, StringUtils.lastIndexOf("""", """", 9));
        assertEquals(0, StringUtils.lastIndexOf(""abc"", """", 0));
        assertEquals(-1, StringUtils.lastIndexOf(""abc"", """", -1));
        assertEquals(3, StringUtils.lastIndexOf(""abc"", """", 9));
        assertEquals(7, StringUtils.lastIndexOf(""aabaabaa"", ""a"", 8));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 8));
        assertEquals(4, StringUtils.lastIndexOf(""aabaabaa"", ""ab"", 8));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 3));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 9));
        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", ""b"", -1));
        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 0));
        assertEquals(0, StringUtils.lastIndexOf(""aabaabaa"", ""a"", 0));
        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", ""a"", -1));

        // Test that fromIndex works correctly, i.e. cannot match after fromIndex
        assertEquals(7, StringUtils.lastIndexOf(""12345678"", ""8"", 9));
        assertEquals(7, StringUtils.lastIndexOf(""12345678"", ""8"", 8));
        assertEquals(7, StringUtils.lastIndexOf(""12345678"", ""8"", 7)); // 7 is last index
        assertEquals(-1, StringUtils.lastIndexOf(""12345678"", ""8"", 6));

        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 1));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", ""b"", 2));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", ""ba"", 2));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", ""ba"", 3));

        assertEquals(2, StringUtils.lastIndexOf(new StringBuilder(""aabaabaa""), ""b"", 3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5532]])
755,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testEqualsIgnoreCase(),"    @Test
    public void testEqualsIgnoreCase() {
        assertTrue(StringUtils.equalsIgnoreCase(null, null));
        assertTrue(StringUtils.equalsIgnoreCase(FOO, FOO));
        assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));
        assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));
        assertFalse(StringUtils.equalsIgnoreCase(FOO, BAR));
        assertFalse(StringUtils.equalsIgnoreCase(FOO, null));
        assertFalse(StringUtils.equalsIgnoreCase(null, FOO));
        assertTrue(StringUtils.equalsIgnoreCase("""",""""));
        assertFalse(StringUtils.equalsIgnoreCase(""abcd"",""abcd ""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5528]])
917,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_String(),"    @Test
    public void testStrip_String() {
        assertEquals(null, StringUtils.strip(null));
        assertEquals("""", StringUtils.strip(""""));
        assertEquals("""", StringUtils.strip(""        ""));
        assertEquals(""abc"", StringUtils.strip(""  abc  ""));
        assertEquals(StringUtilsTest.NON_WHITESPACE, 
            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5527]])
286,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue() {
        BooleanUtils.toBooleanObject(null, Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5521]])
921,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripStart_StringString(),"    @Test
    public void testStripStart_StringString() {
        // null stripStart
        assertEquals(null, StringUtils.stripStart(null, null));
        assertEquals("""", StringUtils.stripStart("""", null));
        assertEquals("""", StringUtils.stripStart(""        "", null));
        assertEquals(""abc  "", StringUtils.stripStart(""  abc  "", null));
        assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, 
            StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));

        // """" stripStart
        assertEquals(null, StringUtils.stripStart(null, """"));
        assertEquals("""", StringUtils.stripStart("""", """"));
        assertEquals(""        "", StringUtils.stripStart(""        "", """"));
        assertEquals(""  abc  "", StringUtils.stripStart(""  abc  "", """"));
        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, """"));
        
        // "" "" stripStart
        assertEquals(null, StringUtils.stripStart(null, "" ""));
        assertEquals("""", StringUtils.stripStart("""", "" ""));
        assertEquals("""", StringUtils.stripStart(""        "", "" ""));
        assertEquals(""abc  "", StringUtils.stripStart(""  abc  "", "" ""));
        
        // ""ab"" stripStart
        assertEquals(null, StringUtils.stripStart(null, ""ab""));
        assertEquals("""", StringUtils.stripStart("""", ""ab""));
        assertEquals(""        "", StringUtils.stripStart(""        "", ""ab""));
        assertEquals(""  abc  "", StringUtils.stripStart(""  abc  "", ""ab""));
        assertEquals(""cabab"", StringUtils.stripStart(""abcabab"", ""ab""));
        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, """"));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5517]])
348,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNot(),"    @Test
    public void testConstructorAccessors_isNot() {
        final CharRange rangea = CharRange.isNot('a');
        assertEquals('a', rangea.getStart());
        assertEquals('a', rangea.getEnd());
        assertTrue(rangea.isNegated());
        assertEquals(""^a"", rangea.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5515]])
761,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArrayWithSupplementaryChars(),"    @Test
    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {
        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));
        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5514]])
727,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContains_StringWithBadSupplementaryChars(),"    @Test
    public void testContains_StringWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001));
        assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001));
        assertFalse(StringUtils.contains(CharU20001, CharUSuppCharHigh));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertTrue(StringUtils.contains(CharU20001, CharUSuppCharLow));
        assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + ""a"", ""a""));
        assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + ""a"", ""a""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5504]])
754,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testEqualsOnStrings(),"    @Test
    public void testEqualsOnStrings() {
        assertTrue(StringUtils.equals(null, null));
        assertTrue(StringUtils.equals(FOO, FOO));
        assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));
        assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));
        assertFalse(StringUtils.equals(FOO, BAR));
        assertFalse(StringUtils.equals(FOO, null));
        assertFalse(StringUtils.equals(null, FOO));
        assertFalse(StringUtils.equals(FOO, FOOBAR));
        assertFalse(StringUtils.equals(FOOBAR, FOO));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5500]])
976,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testValidIndex_withMessage_charSequence(),"    @Test
    public void testValidIndex_withMessage_charSequence() {
        final CharSequence str = ""Hi"";
        Validate.validIndex(str, 0, ""Broken: "");
        Validate.validIndex(str, 1, ""Broken: "");
        try {
            Validate.validIndex(str, -1, ""Broken: "");
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""Broken: "", ex.getMessage());
        }
        try {
            Validate.validIndex(str, 2, ""Broken: "");
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""Broken: "", ex.getMessage());
        }
        
        final String input = ""Hi"";
        final String test = Validate.validIndex(input, 0, ""Message"");
        assertSame(input, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5499]])
743,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsOnly_CharArray(),"    @Test
    public void testContainsOnly_CharArray() {
        final String str1 = ""a"";
        final String str2 = ""b"";
        final String str3 = ""ab"";
        final char[] chars1= {'b'};
        final char[] chars2= {'a'};
        final char[] chars3= {'a', 'b'};
        final char[] emptyChars = new char[0];
        assertFalse(StringUtils.containsOnly(null, (char[]) null));
        assertFalse(StringUtils.containsOnly("""", (char[]) null));
        assertFalse(StringUtils.containsOnly(null, emptyChars));
        assertFalse(StringUtils.containsOnly(str1, emptyChars));
        assertTrue(StringUtils.containsOnly("""", emptyChars));
        assertTrue(StringUtils.containsOnly("""", chars1));
        assertFalse(StringUtils.containsOnly(str1, chars1));
        assertTrue(StringUtils.containsOnly(str1, chars2));
        assertTrue(StringUtils.containsOnly(str1, chars3));
        assertTrue(StringUtils.containsOnly(str2, chars1));
        assertFalse(StringUtils.containsOnly(str2, chars2));
        assertTrue(StringUtils.containsOnly(str2, chars3));
        assertFalse(StringUtils.containsOnly(str3, chars1));
        assertFalse(StringUtils.containsOnly(str3, chars2));
        assertTrue(StringUtils.containsOnly(str3, chars3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5499]])
382,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testContainsAny_StringStringarray(),"    @Test
    public void testContainsAny_StringStringarray() {
        assertFalse(CharSetUtils.containsAny(null, (String[]) null));
        assertFalse(CharSetUtils.containsAny(null, new String[0]));
        assertFalse(CharSetUtils.containsAny(null, new String[] {null}));
        assertFalse(CharSetUtils.containsAny(null, new String[] {""a-e""}));
        
        assertFalse(CharSetUtils.containsAny("""", (String[]) null));
        assertFalse(CharSetUtils.containsAny("""", new String[0]));
        assertFalse(CharSetUtils.containsAny("""", new String[] {null}));
        assertFalse(CharSetUtils.containsAny("""", new String[] {""a-e""}));
        
        assertFalse(CharSetUtils.containsAny(""hello"", (String[]) null));
        assertFalse(CharSetUtils.containsAny(""hello"", new String[0]));
        assertFalse(CharSetUtils.containsAny(""hello"", new String[] {null}));
        assertTrue(CharSetUtils.containsAny(""hello"", new String[] {""a-e""}));
        
        assertTrue(CharSetUtils.containsAny(""hello"", new String[] { ""el"" }));
        assertFalse(CharSetUtils.containsAny(""hello"", new String[] { ""x"" }));
        assertTrue(CharSetUtils.containsAny(""hello"", new String[] { ""e-i"" }));
        assertTrue(CharSetUtils.containsAny(""hello"", new String[] { ""a-z"" }));
        assertFalse(CharSetUtils.containsAny(""hello"", new String[] { """" }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5497]])
699,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeJava(),"    @Test
    public void testUnescapeJava() throws IOException {
        assertEquals(null, StringEscapeUtils.unescapeJava(null));
        try {
            StringEscapeUtils.UNESCAPE_JAVA.translate(null, null);
            fail();
        } catch (final IOException ex) {
            fail();
        } catch (final IllegalArgumentException ex) {
        }
        try {
            StringEscapeUtils.UNESCAPE_JAVA.translate("""", null);
            fail();
        } catch (final IOException ex) {
            fail();
        } catch (final IllegalArgumentException ex) {
        }
        try {
            StringEscapeUtils.unescapeJava(""\\u02-3"");
            fail();
        } catch (final RuntimeException ex) {
        }
        
        assertUnescapeJava("""", """");
        assertUnescapeJava(""test"", ""test"");
        assertUnescapeJava(""\ntest\b"", ""\\ntest\\b"");
        assertUnescapeJava(""\u123425foo\ntest\b"", ""\\u123425foo\\ntest\\b"");
        assertUnescapeJava(""'\foo\teste\r"", ""\\'\\foo\\teste\\r"");
        assertUnescapeJava("""", ""\\"");
        //foo
        assertUnescapeJava(""lowercase Unicode"", ""\uABCDx"", ""\\uabcdx"");
        assertUnescapeJava(""uppercase Unicode"", ""\uABCDx"", ""\\uABCDx"");
        assertUnescapeJava(""Unicode as final character"", ""\uABCD"", ""\\uabcd"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5494]])
584,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new ObjectUtils());
        final Constructor<?>[] cons = ObjectUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(ObjectUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(ObjectUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5492]])
843,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRemovePattern(),"    @Test
    public void testRemovePattern() {
        assertEquals("""", StringUtils.removePattern(""<A>x\\ny</A>"", ""<A>.*</A>""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5489]])
594,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStringBuilder(),"    @Test
    public void testIdentityToStringStringBuilder() {
        assertEquals(null, ObjectUtils.identityToString(null));
        assertEquals(
            ""java.lang.String@"" + Integer.toHexString(System.identityHashCode(FOO)),
            ObjectUtils.identityToString(FOO));
        final Integer i = Integer.valueOf(90);
        final String expected = ""java.lang.Integer@"" + Integer.toHexString(System.identityHashCode(i));
        
        assertEquals(expected, ObjectUtils.identityToString(i));
        
        final StringBuilder builder = new StringBuilder();
        ObjectUtils.identityToString(builder, i);
        assertEquals(expected, builder.toString());

        try {
            ObjectUtils.identityToString((StringBuilder)null, ""tmp"");
            fail(""NullPointerException expected"");
        } catch(final NullPointerException npe) {
        }
        
        try {
            ObjectUtils.identityToString(new StringBuilder(), null);
            fail(""NullPointerException expected"");
        } catch(final NullPointerException npe) {
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5488]])
787,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsIsTest.java,org.apache.commons.lang3.StringUtilsIsTest.testIsNumericSpace(),"    @Test
    public void testIsNumericSpace() {
        assertFalse(StringUtils.isNumericSpace(null));
        assertTrue(StringUtils.isNumericSpace(""""));
        assertTrue(StringUtils.isNumericSpace("" ""));
        assertFalse(StringUtils.isNumericSpace(""a""));
        assertFalse(StringUtils.isNumericSpace(""A""));
        assertFalse(StringUtils.isNumericSpace(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));
        assertFalse(StringUtils.isNumericSpace(""ham kso""));
        assertTrue(StringUtils.isNumericSpace(""1""));
        assertTrue(StringUtils.isNumericSpace(""1000""));
        assertFalse(StringUtils.isNumericSpace(""2.3""));
        assertTrue(StringUtils.isNumericSpace(""10 00""));
        assertFalse(StringUtils.isNumericSpace(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));
        assertFalse(StringUtils.isNumericSpace(""_""));
        assertFalse(StringUtils.isNumericSpace(""hkHKHik*khbkuh""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5486]])
828,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt(),"    @Test
    public void testSplit_StringString_StringStringInt() {
        assertArrayEquals(null, StringUtils.split(null, "".""));
        assertArrayEquals(null, StringUtils.split(null, ""."", 3));
        
        assertEquals(0, StringUtils.split("""", ""."").length);
        assertEquals(0, StringUtils.split("""", ""."", 3).length);
        
        innerTestSplit('.', ""."", ' ');
        innerTestSplit('.', ""."", ',');
        innerTestSplit('.', "".,"", 'x');
        for (int i = 0; i < WHITESPACE.length(); i++) {
            for (int j = 0; j < NON_WHITESPACE.length(); j++) {
                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));
                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));
            }
        }
        
        String[] results;
        final String[] expectedResults = {""ab"", ""de fg""};
        results = StringUtils.split(""ab   de fg"", null, 2);
        assertEquals(expectedResults.length, results.length);
        for (int i = 0; i < expectedResults.length; i++) {
            assertEquals(expectedResults[i], results[i]);
        }
        
        final String[] expectedResults2 = {""ab"", ""cd:ef""};
        results = StringUtils.split(""ab:cd:ef"","":"", 2);
        assertEquals(expectedResults2.length, results.length);
        for (int i = 0; i < expectedResults2.length; i++) {
            assertEquals(expectedResults2[i], results[i]);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5481]])
773,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_String(),"    @Test
    public void testLastIndexOf_String() {
        assertEquals(-1, StringUtils.lastIndexOf(null, null));
        assertEquals(-1, StringUtils.lastIndexOf("""", null));
        assertEquals(-1, StringUtils.lastIndexOf("""", ""a""));
        assertEquals(0, StringUtils.lastIndexOf("""", """"));
        assertEquals(8, StringUtils.lastIndexOf(""aabaabaa"", """"));
        assertEquals(7, StringUtils.lastIndexOf(""aabaabaa"", ""a""));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", ""b""));
        assertEquals(4, StringUtils.lastIndexOf(""aabaabaa"", ""ab""));

        assertEquals(4, StringUtils.lastIndexOf(new StringBuilder(""aabaabaa""), ""ab""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5478]])
918,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToNull_String(),"    @Test
    public void testStripToNull_String() {
        assertEquals(null, StringUtils.stripToNull(null));
        assertEquals(null, StringUtils.stripToNull(""""));
        assertEquals(null, StringUtils.stripToNull(""        ""));
        assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE));
        assertEquals(""ab c"", StringUtils.stripToNull(""  ab c  ""));
        assertEquals(StringUtilsTest.NON_WHITESPACE, 
            StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5474]])
766,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArrayWithSupplementaryChars(),"    @Test
    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {
        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5470]])
441,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNull(),"    @Test
    public void testWrapperToPrimitiveNull() {
        assertNull(""Wrong result for null class"", ClassUtils.wrapperToPrimitive(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5469]])
946,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotEmptyCollection2(),"    @Test
    public void testNotEmptyCollection2() {
        final Collection<Integer> coll = new ArrayList<Integer>();
        try {
            Validate.notEmpty((Collection<?>) null, ""MSG"");
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        try {
            Validate.notEmpty(coll, ""MSG"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        coll.add(Integer.valueOf(8));
        Validate.notEmpty(coll, ""MSG"");
        
        final Collection<Integer> test = Validate.notEmpty(coll, ""Message"");
        assertSame(coll, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5466]])
340,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharEncodingTest.java,org.apache.commons.lang3.CharEncodingTest.testMustBeSupportedJava1_3_1(),"    @Test
    public void testMustBeSupportedJava1_3_1() {
        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);
            this.assertSupportedEncoding(CharEncoding.US_ASCII);
            this.assertSupportedEncoding(CharEncoding.UTF_16);
            this.assertSupportedEncoding(CharEncoding.UTF_16BE);
            this.assertSupportedEncoding(CharEncoding.UTF_16LE);
            this.assertSupportedEncoding(CharEncoding.UTF_8);
        } else {
            this.warn(""Java 1.3 tests not run since the current version is "" + SystemUtils.JAVA_SPECIFICATION_VERSION);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5466]])
830,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean(),"    @Test
    public void testSplitByWholeString_StringStringBoolean() {
        assertArrayEquals( null, StringUtils.splitByWholeSeparator( null, ""."" ) ) ;

        assertEquals( 0, StringUtils.splitByWholeSeparator( """", ""."" ).length ) ;

        final String stringToSplitOnNulls = ""ab   de fg"" ;
        final String[] splitOnNullExpectedResults = { ""ab"", ""de"", ""fg"" } ;

        final String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ;
        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;
        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {
            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;
        }

        final String stringToSplitOnCharactersAndString = ""abstemiouslyaeiouyabstemiously"" ;

        final String[] splitOnStringExpectedResults = { ""abstemiously"", ""abstemiously"" } ;
        final String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, ""aeiouy"" ) ;
        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;
        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {
            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;
        }

        final String[] splitWithMultipleSeparatorExpectedResults = {""ab"", ""cd"", ""ef""};
        final String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator(""ab:cd::ef"", "":"");
        assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length );
        for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) {
            assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ;
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5464]])
314,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_3items(),"    @Test
    public void testXor_primitive_validInput_3items() {
        assertTrue(
            ""False result for (false, false, true)"",
            BooleanUtils.xor(new boolean[] { false, false, true }));

        assertTrue(
            ""False result for (false, true, false)"",
            BooleanUtils.xor(new boolean[] { false, true, false }));

        assertTrue(
            ""False result for (true, false, false)"",
            BooleanUtils.xor(new boolean[] { true, false, false }));

        assertTrue(
            ""True result for (true, true, true)"",
            ! BooleanUtils.xor(new boolean[] { true, true, true }));

        assertTrue(
            ""True result for (false, false)"",
            ! BooleanUtils.xor(new boolean[] { false, false, false }));

        assertTrue(
            ""True result for (true, true, false)"",
            ! BooleanUtils.xor(new boolean[] { true, true, false }));

        assertTrue(
            ""True result for (true, false, true)"",
            ! BooleanUtils.xor(new boolean[] { true, false, true }));

        assertTrue(
            ""False result for (false, true, true)"",
            ! BooleanUtils.xor(new boolean[] { false, true, true }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5457]])
803,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringBetween_StringString(),"    @Test
    public void testSubstringBetween_StringString() {
        assertEquals(null, StringUtils.substringBetween(null, ""tag""));
        assertEquals("""", StringUtils.substringBetween("""", """"));
        assertEquals(null, StringUtils.substringBetween("""", ""abc""));
        assertEquals("""", StringUtils.substringBetween(""    "", "" ""));
        assertEquals(null, StringUtils.substringBetween(""abc"", null));
        assertEquals("""", StringUtils.substringBetween(""abc"", """"));
        assertEquals(null, StringUtils.substringBetween(""abc"", ""a""));
        assertEquals(""bc"", StringUtils.substringBetween(""abca"", ""a""));
        assertEquals(""bc"", StringUtils.substringBetween(""abcabca"", ""a""));
        assertEquals(""bar"", StringUtils.substringBetween(""\nbar\n"", ""\n""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5456]])
291,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_boolean_int_int(),"    @Test
    public void test_toInteger_boolean_int_int() {
        assertEquals(6, BooleanUtils.toInteger(true, 6, 7));
        assertEquals(7, BooleanUtils.toInteger(false, 6, 7));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5456]])
176,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContains(),"    @Test
    public void testContains() {
        final Object[] array = new Object[] { ""0"", ""1"", ""2"", ""3"", null, ""0"" };
        assertFalse(ArrayUtils.contains(null, null));
        assertFalse(ArrayUtils.contains(null, ""1""));
        assertTrue(ArrayUtils.contains(array, ""0""));
        assertTrue(ArrayUtils.contains(array, ""1""));
        assertTrue(ArrayUtils.contains(array, ""2""));
        assertTrue(ArrayUtils.contains(array, ""3""));
        assertTrue(ArrayUtils.contains(array, null));
        assertFalse(ArrayUtils.contains(array, ""notInArray""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5456]])
225,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_char(),"    @Test
    public void testToPrimitive_char() {
        final Character[] b = null;
        assertEquals(null, ArrayUtils.toPrimitive(b));
        
        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0]));
        
        assertTrue(Arrays.equals(
            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},
            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), 
                new Character(Character.MAX_VALUE), new Character('0')}))
        );

        try {
            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});
            fail();
        } catch (final NullPointerException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5449]])
809,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testCaseFunctions(),"    @Test
    public void testCaseFunctions() {
        assertEquals(null, StringUtils.upperCase(null));
        assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH));
        assertEquals(null, StringUtils.lowerCase(null));
        assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH));
        assertEquals(null, StringUtils.capitalize(null));
        assertEquals(null, StringUtils.uncapitalize(null));

        assertEquals(""capitalize(empty-string) failed"",
                """", StringUtils.capitalize("""") );
        assertEquals(""capitalize(single-char-string) failed"",
                ""X"", StringUtils.capitalize(""x"") );
        assertEquals(""capitalize(String) failed"",
                FOO_CAP, StringUtils.capitalize(FOO_CAP) );
        assertEquals(""capitalize(string) failed"",
                FOO_CAP, StringUtils.capitalize(FOO_UNCAP) );

        assertEquals(""uncapitalize(String) failed"",
                FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );
        assertEquals(""uncapitalize(string) failed"",
                FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP) );
        assertEquals(""uncapitalize(empty-string) failed"",
                """", StringUtils.uncapitalize("""") );
        assertEquals(""uncapitalize(single-char-string) failed"",
                ""x"", StringUtils.uncapitalize(""X"") );
                     
        // reflection type of tests: Sentences.
        assertEquals(""uncapitalize(capitalize(String)) failed"",
                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );
        assertEquals(""capitalize(uncapitalize(String)) failed"",
                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );

        // reflection type of tests: One word.
        assertEquals(""uncapitalize(capitalize(String)) failed"",
                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );
        assertEquals(""capitalize(uncapitalize(String)) failed"",
                     FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );

        assertEquals(""upperCase(String) failed"",
                     ""FOO TEST THING"", StringUtils.upperCase(""fOo test THING"") );
        assertEquals(""upperCase(empty-string) failed"",
                     """", StringUtils.upperCase("""") );
        assertEquals(""lowerCase(String) failed"",
                     ""foo test thing"", StringUtils.lowerCase(""fOo test THING"") );
        assertEquals(""lowerCase(empty-string) failed"",
                     """", StringUtils.lowerCase("""") );

        assertEquals(""upperCase(String, Locale) failed"",
                     ""FOO TEST THING"", StringUtils.upperCase(""fOo test THING"", Locale.ENGLISH) );
        assertEquals(""upperCase(empty-string, Locale) failed"",
                     """", StringUtils.upperCase("""", Locale.ENGLISH) );
        assertEquals(""lowerCase(String, Locale) failed"",
                     ""foo test thing"", StringUtils.lowerCase(""fOo test THING"", Locale.ENGLISH) );
        assertEquals(""lowerCase(empty-string, Locale) failed"",
                     """", StringUtils.lowerCase("""", Locale.ENGLISH) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5449]])
628,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testLANG805(),"    @Test
    public void testLANG805() {
        final long seed = System.currentTimeMillis();
        assertEquals(""aaa"", RandomStringUtils.random(3,0,0,false,false,new char[]{'a'},new Random(seed)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5447]])
599,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testNull(),"    @SuppressWarnings(""cast"") // 1 OK, because we are checking for code change
    @Test
    public void testNull() {
        assertNotNull(ObjectUtils.NULL);
        // 1 Check that NULL really is a Null i.e. the definition has not been changed
        assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);
        assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5445]])
412,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new ClassUtils());
        final Constructor<?>[] cons = ClassUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(ClassUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(ClassUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5445]])
981,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testInclusiveBetween_withMessage(),"    @Test
    public void testInclusiveBetween_withMessage()
    {
        Validate.inclusiveBetween(""a"", ""c"", ""b"", ""Error"");
        Validate.inclusiveBetween(0, 2, 1, ""Error"");
        Validate.inclusiveBetween(0, 2, 2, ""Error"");
        try {
            Validate.inclusiveBetween(0, 5, 6, ""Error"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            assertEquals(""Error"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5443]])
373,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testEquals_Object(),"    @Test
    public void testEquals_Object() {
        final CharSet abc = CharSet.getInstance(""abc"");
        final CharSet abc2 = CharSet.getInstance(""abc"");
        final CharSet atoc = CharSet.getInstance(""a-c"");
        final CharSet atoc2 = CharSet.getInstance(""a-c"");
        final CharSet notatoc = CharSet.getInstance(""^a-c"");
        final CharSet notatoc2 = CharSet.getInstance(""^a-c"");
        
        assertFalse(abc.equals(null));
        
        assertTrue(abc.equals(abc));
        assertTrue(abc.equals(abc2));
        assertFalse(abc.equals(atoc));
        assertFalse(abc.equals(notatoc));
        
        assertFalse(atoc.equals(abc));
        assertTrue(atoc.equals(atoc));
        assertTrue(atoc.equals(atoc2));
        assertFalse(atoc.equals(notatoc));
        
        assertFalse(notatoc.equals(abc));
        assertFalse(notatoc.equals(atoc));
        assertTrue(notatoc.equals(notatoc));
        assertTrue(notatoc.equals(notatoc2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5441]])
882,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,"org.apache.commons.lang3.StringUtilsTest.assertAbbreviateWithOffset(java.lang.String, int, int)","    private void assertAbbreviateWithOffset(final String expected, final int offset, final int maxWidth) {
        final String abcdefghijklmno = ""abcdefghijklmno"";
        final String message = ""abbreviate(String,int,int) failed"";
        final String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);
        if (offset >= 0 && offset < abcdefghijklmno.length()) {
            assertTrue(message + "" -- should contain offset character"",
                    actual.indexOf((char)('a'+offset)) != -1);
        }
        assertTrue(message + "" -- should not be greater than maxWidth"",
                actual.length() <= maxWidth);
        assertEquals(message, expected, actual);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5440]])
811,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_Objects(),"    @Test
    public void testJoin_Objects() {
        assertEquals(""abc"", StringUtils.join(""a"", ""b"", ""c""));
        assertEquals(""a"",   StringUtils.join(null, """", ""a""));
        assertEquals(null,  StringUtils.join((Object[])null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5436]])
379,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testSqueeze_StringString(),"    @Test
    public void testSqueeze_StringString() {
        assertEquals(null, CharSetUtils.squeeze(null, (String) null));
        assertEquals(null, CharSetUtils.squeeze(null, """"));
        
        assertEquals("""", CharSetUtils.squeeze("""", (String) null));
        assertEquals("""", CharSetUtils.squeeze("""", """"));
        assertEquals("""", CharSetUtils.squeeze("""", ""a-e""));
        
        assertEquals(""hello"", CharSetUtils.squeeze(""hello"", (String) null));
        assertEquals(""hello"", CharSetUtils.squeeze(""hello"", """"));
        assertEquals(""hello"", CharSetUtils.squeeze(""hello"", ""a-e""));
        assertEquals(""helo"", CharSetUtils.squeeze(""hello"", ""l-p""));
        assertEquals(""heloo"", CharSetUtils.squeeze(""helloo"", ""l""));
        assertEquals(""hello"", CharSetUtils.squeeze(""helloo"", ""^l""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5431]])
593,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStringBuffer(),"    @Test
    public void testIdentityToStringStringBuffer() {
        final Integer i = Integer.valueOf(45);
        final String expected = ""java.lang.Integer@"" + Integer.toHexString(System.identityHashCode(i));

        final StringBuffer buffer = new StringBuffer();
        ObjectUtils.identityToString(buffer, i);
        assertEquals(expected, buffer.toString());

        try {
            ObjectUtils.identityToString((StringBuffer)null, ""tmp"");
            fail(""NullPointerException expected"");
        } catch(final NullPointerException npe) {
        }
        try {
            ObjectUtils.identityToString(new StringBuffer(), null);
            fail(""NullPointerException expected"");
        } catch(final NullPointerException npe) {
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5431]])
444,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesEmpty(),"    @Test
    public void testWrappersToPrimitivesEmpty() {
        final Class<?>[] empty = new Class[0];
        assertArrayEquals(""Wrong result for empty input"", empty, ClassUtils.wrappersToPrimitives(empty));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5431]])
256,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testIsSet(),"    @Test
    public void testIsSet() {
        assertTrue(!bf_multi.isSet(0));
        assertTrue(!bf_zero.isSet(0));
        for (int j = 0x80; j <= 0x3F80; j += 0x80) {
            assertTrue(bf_multi.isSet(j));
        }
        for (int j = 0x80; j <= 0x3F80; j += 0x80) {
            assertTrue(!bf_zero.isSet(j));
        }
        assertTrue(!bf_single.isSet(0));
        assertTrue(bf_single.isSet(0x4000));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5429]])
436,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testIsPrimitiveWrapper(),"    @Test
    public void testIsPrimitiveWrapper() {

        // test primitive wrapper classes
        assertTrue(""Boolean.class"", ClassUtils.isPrimitiveWrapper(Boolean.class));
        assertTrue(""Byte.class"", ClassUtils.isPrimitiveWrapper(Byte.class));
        assertTrue(""Character.class"", ClassUtils.isPrimitiveWrapper(Character.class));
        assertTrue(""Short.class"", ClassUtils.isPrimitiveWrapper(Short.class));
        assertTrue(""Integer.class"", ClassUtils.isPrimitiveWrapper(Integer.class));
        assertTrue(""Long.class"", ClassUtils.isPrimitiveWrapper(Long.class));
        assertTrue(""Double.class"", ClassUtils.isPrimitiveWrapper(Double.class));
        assertTrue(""Float.class"", ClassUtils.isPrimitiveWrapper(Float.class));
        
        // test primitive classes
        assertFalse(""boolean"", ClassUtils.isPrimitiveWrapper(Boolean.TYPE));
        assertFalse(""byte"", ClassUtils.isPrimitiveWrapper(Byte.TYPE));
        assertFalse(""char"", ClassUtils.isPrimitiveWrapper(Character.TYPE));
        assertFalse(""short"", ClassUtils.isPrimitiveWrapper(Short.TYPE));
        assertFalse(""int"", ClassUtils.isPrimitiveWrapper(Integer.TYPE));
        assertFalse(""long"", ClassUtils.isPrimitiveWrapper(Long.TYPE));
        assertFalse(""double"", ClassUtils.isPrimitiveWrapper(Double.TYPE));
        assertFalse(""float"", ClassUtils.isPrimitiveWrapper(Float.TYPE));
        
        // others
        assertFalse(""null"", ClassUtils.isPrimitiveWrapper(null));
        assertFalse(""Void.class"", ClassUtils.isPrimitiveWrapper(Void.class));
        assertFalse(""Void.TYPE"", ClassUtils.isPrimitiveWrapper(Void.TYPE));
        assertFalse(""String.class"", ClassUtils.isPrimitiveWrapper(String.class));
        assertFalse(""this.getClass()"", ClassUtils.isPrimitiveWrapper(this.getClass()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5426]])
595,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringStrBuilder(),"    @Test
    public void testIdentityToStringStrBuilder() {
        final Integer i = Integer.valueOf(102);
        final String expected = ""java.lang.Integer@"" + Integer.toHexString(System.identityHashCode(i));

        final StrBuilder builder = new StrBuilder();
        ObjectUtils.identityToString(builder, i);
        assertEquals(expected, builder.toString());

        try {
            ObjectUtils.identityToString((StrBuilder)null, ""tmp"");
            fail(""NullPointerException expected"");
        } catch(final NullPointerException npe) {
        }
        
        try {
            ObjectUtils.identityToString(new StrBuilder(), null);
            fail(""NullPointerException expected"");
        } catch(final NullPointerException npe) {
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5421]])
221,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContainsBoolean(),"    @Test
    public void testContainsBoolean() {
        boolean[] array = null;
        assertFalse(ArrayUtils.contains(array, true));
        array = new boolean[] { true, false, true };
        assertTrue(ArrayUtils.contains(array, true));
        assertTrue(ArrayUtils.contains(array, false));
        array = new boolean[] { true, true };
        assertTrue(ArrayUtils.contains(array, true));
        assertFalse(ArrayUtils.contains(array, false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5420]])
632,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testRandomNumeric(),"    @Test
    public void testRandomNumeric() {}
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5415]])
457,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.assertGetClassThrowsClassNotFound(java.lang.String),"    private void assertGetClassThrowsClassNotFound( final String className ) throws Exception {
        assertGetClassThrowsException( className, ClassNotFoundException.class );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5414]])
700,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,"org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String)","    private void assertUnescapeJava(final String unescaped, final String original) throws IOException {
        assertUnescapeJava(null, unescaped, original);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5412]])
613,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testCloneOfUncloneable(),"    @Test(expected = NoSuchMethodException.class)
    public void testCloneOfUncloneable() throws Throwable {
        final UncloneableString string = new UncloneableString(""apache"");
        try {
            ObjectUtils.clone(string);
            fail(""Thrown "" + CloneFailedException.class.getName() + "" expected"");
        } catch (final CloneFailedException e) {
            throw e.getCause();
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5411]])
789,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java,org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWithIgnoreCase(),"    @Test
    public void testStartsWithIgnoreCase() {
        assertTrue(""startsWithIgnoreCase(null, null)"",    StringUtils.startsWithIgnoreCase(null, (String)null));
        assertFalse(""startsWithIgnoreCase(FOOBAR, null)"", StringUtils.startsWithIgnoreCase(FOOBAR, (String)null));
        assertFalse(""startsWithIgnoreCase(null, FOO)"",    StringUtils.startsWithIgnoreCase(null, FOO));
        assertTrue(""startsWithIgnoreCase(FOOBAR, \""\"")"",  StringUtils.startsWithIgnoreCase(FOOBAR, """"));

        assertTrue(""startsWithIgnoreCase(foobar, foo)"", StringUtils.startsWithIgnoreCase(foobar, foo));
        assertTrue(""startsWithIgnoreCase(FOOBAR, FOO)"", StringUtils.startsWithIgnoreCase(FOOBAR, FOO));
        assertTrue(""startsWithIgnoreCase(foobar, FOO)"", StringUtils.startsWithIgnoreCase(foobar, FOO));
        assertTrue(""startsWithIgnoreCase(FOOBAR, foo)"", StringUtils.startsWithIgnoreCase(FOOBAR, foo));

        assertFalse(""startsWithIgnoreCase(foo, foobar)"", StringUtils.startsWithIgnoreCase(foo, foobar));
        assertFalse(""startsWithIgnoreCase(foo, foobar)"", StringUtils.startsWithIgnoreCase(bar, foobar));

        assertFalse(""startsWithIgnoreCase(foobar, bar)"", StringUtils.startsWithIgnoreCase(foobar, bar));
        assertFalse(""startsWithIgnoreCase(FOOBAR, BAR)"", StringUtils.startsWithIgnoreCase(FOOBAR, BAR));
        assertFalse(""startsWithIgnoreCase(foobar, BAR)"", StringUtils.startsWithIgnoreCase(foobar, BAR));
        assertFalse(""startsWithIgnoreCase(FOOBAR, bar)"", StringUtils.startsWithIgnoreCase(FOOBAR, bar));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5411]])
635,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsHomog(),"    @Test
    public void testRandomStringUtilsHomog() {}
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5410]])
582,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testLang865(),"    @Test
    public void testLang865() {
        assertValidToLocale(""_GB"", """", ""GB"", """");
        assertValidToLocale(""_GB_P"", """", ""GB"", ""P"");
        assertValidToLocale(""_GB_POSIX"", """", ""GB"", ""POSIX"");
        try {
            LocaleUtils.toLocale(""_G"");
            fail(""Must be at least 3 chars if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_Gb"");
            fail(""Must be uppercase if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_gB"");
            fail(""Must be uppercase if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_1B"");
            fail(""Must be letter if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_G1"");
            fail(""Must be letter if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_GB_"");
            fail(""Must be at least 5 chars if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_GBAP"");
            fail(""Must have underscore after the country if starts with underscore and is at least 5 chars"");
        } catch (final IllegalArgumentException iae) {
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5409]])
281,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer_nullValue(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBoolean_Integer_Integer_Integer_nullValue() {
        BooleanUtils.toBoolean(null, Integer.valueOf(6), Integer.valueOf(7));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5407]])
247,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyObject(),"    @Test
    public void testIsEmptyObject() {
        final Object[] emptyArray = new Object[] {};
        final Object[] notEmptyArray = new Object[] { new String(""Value"") };
        assertTrue(ArrayUtils.isEmpty((Object[])null));
        assertTrue(ArrayUtils.isEmpty(emptyArray));
        assertFalse(ArrayUtils.isEmpty(notEmptyArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5398]])
456,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.assertGetClassThrowsNullPointerException(java.lang.String),"    private void assertGetClassThrowsNullPointerException( final String className ) throws Exception {
        assertGetClassThrowsException( className, NullPointerException.class );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5396]])
943,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotEmptyArray1(),"    @Test
    public void testNotEmptyArray1() {
        Validate.notEmpty(new Object[] {null});
        try {
            Validate.notEmpty((Object[]) null);
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""The validated array is empty"", ex.getMessage());
        }
        try {
            Validate.notEmpty(new Object[0]);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""The validated array is empty"", ex.getMessage());
        }
        
        final String[] array = new String[] {""hi""};
        final String[] test = Validate.notEmpty(array);
        assertSame(array, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5393]])
384,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetUtilsTest.java,org.apache.commons.lang3.CharSetUtilsTest.testCount_StringStringarray(),"    @Test
    public void testCount_StringStringarray() {
        assertEquals(0, CharSetUtils.count(null, (String[]) null));
        assertEquals(0, CharSetUtils.count(null, new String[0]));
        assertEquals(0, CharSetUtils.count(null, new String[] {null}));
        assertEquals(0, CharSetUtils.count(null, new String[] {""a-e""}));
        
        assertEquals(0, CharSetUtils.count("""", (String[]) null));
        assertEquals(0, CharSetUtils.count("""", new String[0]));
        assertEquals(0, CharSetUtils.count("""", new String[] {null}));
        assertEquals(0, CharSetUtils.count("""", new String[] {""a-e""}));
        
        assertEquals(0, CharSetUtils.count(""hello"", (String[]) null));
        assertEquals(0, CharSetUtils.count(""hello"", new String[0]));
        assertEquals(0, CharSetUtils.count(""hello"", new String[] {null}));
        assertEquals(1, CharSetUtils.count(""hello"", new String[] {""a-e""}));
        
        assertEquals(3, CharSetUtils.count(""hello"", new String[] { ""el"" }));
        assertEquals(0, CharSetUtils.count(""hello"", new String[] { ""x"" }));
        assertEquals(2, CharSetUtils.count(""hello"", new String[] { ""e-i"" }));
        assertEquals(5, CharSetUtils.count(""hello"", new String[] { ""a-z"" }));
        assertEquals(0, CharSetUtils.count(""hello"", new String[] { """" }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5393]])
729,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsAny_StringCharArray(),"    @Test
    public void testContainsAny_StringCharArray() {
        assertFalse(StringUtils.containsAny(null, (char[]) null));
        assertFalse(StringUtils.containsAny(null, new char[0]));
        assertFalse(StringUtils.containsAny(null, new char[] { 'a', 'b' }));

        assertFalse(StringUtils.containsAny("""", (char[]) null));
        assertFalse(StringUtils.containsAny("""", new char[0]));
        assertFalse(StringUtils.containsAny("""", new char[] { 'a', 'b' }));

        assertFalse(StringUtils.containsAny(""zzabyycdxx"", (char[]) null));
        assertFalse(StringUtils.containsAny(""zzabyycdxx"", new char[0]));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", new char[] { 'z', 'a' }));
        assertTrue(StringUtils.containsAny(""zzabyycdxx"", new char[] { 'b', 'y' }));
        assertFalse(StringUtils.containsAny(""ab"", new char[] { 'z' }));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5392]])
238,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_long(),"     @Test
     public void testToPrimitive_long() {
         final Long[] b = null;
         assertEquals(null, ArrayUtils.toPrimitive(b));
         
         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, 
            ArrayUtils.toPrimitive(new Long[0]));
         
         assertTrue(Arrays.equals(
             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE), 
                 Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)}))
         );

         try {
             ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE), null});
             fail();
         } catch (final NullPointerException ex) {}
     }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5387]])
393,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToChar_Character_char(),"    @Test
    public void testToChar_Character_char() {
        assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));
        assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));
        assertEquals('X', CharUtils.toChar((Character) null, 'X'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5386]])
947,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotEmptyMap1(),"    @Test
    public void testNotEmptyMap1() {
        final Map<String, Integer> map = new HashMap<String, Integer>();
        try {
            Validate.notEmpty((Map<?, ?>) null);
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""The validated map is empty"", ex.getMessage());
        }
        try {
            Validate.notEmpty(map);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""The validated map is empty"", ex.getMessage());
        }
        map.put(""ll"", Integer.valueOf(8));
        Validate.notEmpty(map);
        
        final Map<String, Integer> test = Validate.notEmpty(map);
        assertSame(map, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5385]])
948,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotEmptyMap2(),"    @Test
    public void testNotEmptyMap2() {
        final Map<String, Integer> map = new HashMap<String, Integer>();
        try {
            Validate.notEmpty((Map<?, ?>) null, ""MSG"");
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        try {
            Validate.notEmpty(map, ""MSG"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        map.put(""ll"", Integer.valueOf(8));
        Validate.notEmpty(map, ""MSG"");
        
        final Map<String, Integer> test = Validate.notEmpty(map, ""Message"");
        assertSame(map, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5384]])
575,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testIsAvailableLocale(),"    @SuppressWarnings(""boxing"") // JUnit4 does not support primitive equality testing apart from long
    @Test
    public void testIsAvailableLocale() {
        final Set<Locale> set = LocaleUtils.availableLocaleSet();
        assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));
        assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));
        assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));
        assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));
        assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));
        assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));
        assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5382]])
919,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripToEmpty_String(),"    @Test
    public void testStripToEmpty_String() {
        assertEquals("""", StringUtils.stripToEmpty(null));
        assertEquals("""", StringUtils.stripToEmpty(""""));
        assertEquals("""", StringUtils.stripToEmpty(""        ""));
        assertEquals("""", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));
        assertEquals(""ab c"", StringUtils.stripToEmpty(""  ab c  ""));
        assertEquals(StringUtilsTest.NON_WHITESPACE, 
            StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5381]])
752,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testCustomCharSequence(),"    @Test
    public void testCustomCharSequence() {
        assertThat(new CustomCharSequence(FOO), IsNot.<CharSequence>not(FOO));
        assertThat(FOO, IsNot.<CharSequence>not(new CustomCharSequence(FOO)));
        assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5376]])
925,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new SystemUtils());
        final Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(SystemUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(SystemUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5376]])
985,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testIsInstanceOfExceptionMessage(),"    @Test
    public void testIsInstanceOfExceptionMessage() {
        try {
            Validate.isInstanceOf(List.class, ""hi"");
            fail(""Expecting IllegalArgumentException"");
        } catch(final IllegalArgumentException e) {
            assertEquals(""Expected type: java.util.List, actual: java.lang.String"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5373]])
619,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testConstMethods(),"    @Test
    public void testConstMethods() {

        // To truly test the CONST() method, we'd want to look in the
        // bytecode to see if the literals were folded into the
        // class, or if the bytecode kept the method call.

        assertTrue(""CONST(boolean)"", ObjectUtils.CONST(true));
        assertEquals(""CONST(byte)"", (byte) 3, ObjectUtils.CONST((byte) 3));
        assertEquals(""CONST(char)"", (char) 3, ObjectUtils.CONST((char) 3));
        assertEquals(""CONST(short)"", (short) 3, ObjectUtils.CONST((short) 3));
        assertEquals(""CONST(int)"", 3, ObjectUtils.CONST(3));
        assertEquals(""CONST(long)"", 3l, ObjectUtils.CONST(3l));
        assertEquals(""CONST(float)"", 3f, ObjectUtils.CONST(3f), 0);
        assertEquals(""CONST(double)"", 3.0, ObjectUtils.CONST(3.0), 0);
        assertEquals(""CONST(Object)"", ""abc"", ObjectUtils.CONST(""abc""));

        // Make sure documentation examples from Javadoc all work
        // (this fixed a lot of my bugs when I these!)
        //
        // My bugs should be in a software engineering textbook
        // for ""Can you screw this up?""  The answer is, yes,
        // you can even screw this up.  (When you == Julius)
        // .
        final boolean MAGIC_FLAG = ObjectUtils.CONST(true);
        final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127);
        final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127);
        final char MAGIC_CHAR = ObjectUtils.CONST('a');
        final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123);
        final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127);
        final int MAGIC_INT = ObjectUtils.CONST(123);
        final long MAGIC_LONG1 = ObjectUtils.CONST(123L);
        final long MAGIC_LONG2 = ObjectUtils.CONST(3);
        final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f);
        final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0);
        final String MAGIC_STRING = ObjectUtils.CONST(""abc"");

        assertTrue(MAGIC_FLAG);
        assertEquals(127, MAGIC_BYTE1);
        assertEquals(127, MAGIC_BYTE2);
        assertEquals('a', MAGIC_CHAR);
        assertEquals(123, MAGIC_SHORT1);
        assertEquals(127, MAGIC_SHORT2);
        assertEquals(123, MAGIC_INT);
        assertEquals(123, MAGIC_LONG1);
        assertEquals(3, MAGIC_LONG2);
        assertEquals(1.0f, MAGIC_FLOAT, 0.0f);
        assertEquals(1.0, MAGIC_DOUBLE, 0.0);
        assertEquals(""abc"", MAGIC_STRING);

        try {
            ObjectUtils.CONST_BYTE(-129);
            fail(""CONST_BYTE(-129): IllegalArgumentException should have been thrown."");
        } catch (final IllegalArgumentException iae) {

        }
        try {
            ObjectUtils.CONST_BYTE(128);
            fail(""CONST_BYTE(128): IllegalArgumentException should have been thrown."");
        } catch (final IllegalArgumentException iae) {

        }
        try {
            ObjectUtils.CONST_SHORT(-32769);
            fail(""CONST_SHORT(-32769): IllegalArgumentException should have been thrown."");
        } catch (final IllegalArgumentException iae) {

        }
        try {
            ObjectUtils.CONST_BYTE(32768);
            fail(""CONST_SHORT(32768): IllegalArgumentException should have been thrown."");
        } catch (final IllegalArgumentException iae) {

        }

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5373]])
618,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testPossibleCloneOfUncloneable(),"    @Test(expected = NoSuchMethodException.class)
    public void testPossibleCloneOfUncloneable() throws Throwable {
        final UncloneableString string = new UncloneableString(""apache"");
        try {
            ObjectUtils.cloneIfPossible(string);
            fail(""Thrown "" + CloneFailedException.class.getName() + "" expected"");
        } catch (final CloneFailedException e) {
            throw e.getCause();
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5368]])
649,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testToStringFormat(),"    @Test
    public void testToStringFormat() {
        final String str = intRange.toString(""From %1$s to %2$s"");
        assertEquals(""From 10 to 20"", str);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5366]])
901,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testStringUtilsCharSequenceContract(),"    @Test
    public void testStringUtilsCharSequenceContract() {
        final Class<StringUtils> c = StringUtils.class;
        final Method[] methods = c.getMethods();
        for (final Method m : methods) {
            if (m.getReturnType() == String.class || m.getReturnType() == String[].class) {
                // Assume this is mutable and ensure the first parameter is not CharSequence.
                // It may be String or it may be something else (String[], Object, Object[]) so 
                // don't actively test for that.
                final Class<?>[] params = m.getParameterTypes();
                if ( params.length > 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) {
                    fail(""The method "" + m + "" appears to be mutable in spirit and therefore must not accept a CharSequence"");
                }
            } else {
                // Assume this is immutable in spirit and ensure the first parameter is not String.
                // As above, it may be something other than CharSequence.
                final Class<?>[] params = m.getParameterTypes();
                if ( params.length > 0 && (params[0] == String.class || params[0] == String[].class)) {
                    fail(""The method "" + m + "" appears to be immutable in spirit and therefore must not accept a String"");
                }
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5365]])
982,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testExclusiveBetween(),"    @Test
    public void testExclusiveBetween()
    {
        Validate.exclusiveBetween(""a"", ""c"", ""b"");
        Validate.exclusiveBetween(0, 2, 1);
        try {
            Validate.exclusiveBetween(0, 5, 6);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            assertEquals(""The value 6 is not in the specified exclusive range of 0 to 5"", e.getMessage());
        }
        try {
            Validate.exclusiveBetween(0, 5, 5);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            assertEquals(""The value 5 is not in the specified exclusive range of 0 to 5"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5365]])
859,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar(),"    @Test
    public void testLeftPad_StringIntChar() {
        assertEquals(null, StringUtils.leftPad(null, 5, ' '));
        assertEquals(""     "", StringUtils.leftPad("""", 5, ' '));
        assertEquals(""  abc"", StringUtils.leftPad(""abc"", 5, ' '));
        assertEquals(""xxabc"", StringUtils.leftPad(""abc"", 5, 'x'));
        assertEquals(""\uffff\uffffabc"", StringUtils.leftPad(""abc"", 5, '\uffff'));
        assertEquals(""abc"", StringUtils.leftPad(""abc"", 2, ' '));
        final String str = StringUtils.leftPad(""aaa"", 10000, 'a');  // bigger than pad length
        assertEquals(10000, str.length());
        assertTrue(StringUtils.containsOnly(str, new char[] {'a'}));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5363]])
737,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsNone_CharArray(),"    @Test
    public void testContainsNone_CharArray() {
        final String str1 = ""a"";
        final String str2 = ""b"";
        final String str3 = ""ab."";
        final char[] chars1= {'b'};
        final char[] chars2= {'.'};
        final char[] chars3= {'c', 'd'};
        final char[] emptyChars = new char[0];
        assertTrue(StringUtils.containsNone(null, (char[]) null));
        assertTrue(StringUtils.containsNone("""", (char[]) null));
        assertTrue(StringUtils.containsNone(null, emptyChars));
        assertTrue(StringUtils.containsNone(str1, emptyChars));
        assertTrue(StringUtils.containsNone("""", emptyChars));
        assertTrue(StringUtils.containsNone("""", chars1));
        assertTrue(StringUtils.containsNone(str1, chars1));
        assertTrue(StringUtils.containsNone(str1, chars2));
        assertTrue(StringUtils.containsNone(str1, chars3));
        assertFalse(StringUtils.containsNone(str2, chars1));
        assertTrue(StringUtils.containsNone(str2, chars2));
        assertTrue(StringUtils.containsNone(str2, chars3));
        assertFalse(StringUtils.containsNone(str3, chars1));
        assertFalse(StringUtils.containsNone(str3, chars2));
        assertTrue(StringUtils.containsNone(str3, chars3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5363]])
435,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testIsPrimitiveOrWrapper(),"    @Test
    public void testIsPrimitiveOrWrapper() {

        // test primitive wrapper classes
        assertTrue(""Boolean.class"", ClassUtils.isPrimitiveOrWrapper(Boolean.class));
        assertTrue(""Byte.class"", ClassUtils.isPrimitiveOrWrapper(Byte.class));
        assertTrue(""Character.class"", ClassUtils.isPrimitiveOrWrapper(Character.class));
        assertTrue(""Short.class"", ClassUtils.isPrimitiveOrWrapper(Short.class));
        assertTrue(""Integer.class"", ClassUtils.isPrimitiveOrWrapper(Integer.class));
        assertTrue(""Long.class"", ClassUtils.isPrimitiveOrWrapper(Long.class));
        assertTrue(""Double.class"", ClassUtils.isPrimitiveOrWrapper(Double.class));
        assertTrue(""Float.class"", ClassUtils.isPrimitiveOrWrapper(Float.class));
        
        // test primitive classes
        assertTrue(""boolean"", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE));
        assertTrue(""byte"", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE));
        assertTrue(""char"", ClassUtils.isPrimitiveOrWrapper(Character.TYPE));
        assertTrue(""short"", ClassUtils.isPrimitiveOrWrapper(Short.TYPE));
        assertTrue(""int"", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE));
        assertTrue(""long"", ClassUtils.isPrimitiveOrWrapper(Long.TYPE));
        assertTrue(""double"", ClassUtils.isPrimitiveOrWrapper(Double.TYPE));
        assertTrue(""float"", ClassUtils.isPrimitiveOrWrapper(Float.TYPE));
        assertTrue(""Void.TYPE"", ClassUtils.isPrimitiveOrWrapper(Void.TYPE));
        
        // others
        assertFalse(""null"", ClassUtils.isPrimitiveOrWrapper(null));
        assertFalse(""Void.class"", ClassUtils.isPrimitiveOrWrapper(Void.class));
        assertFalse(""String.class"", ClassUtils.isPrimitiveOrWrapper(String.class));
        assertFalse(""this.getClass()"", ClassUtils.isPrimitiveOrWrapper(this.getClass()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5359]])
104,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testArrayCreation(),"    @Test
    public void testArrayCreation()
    {
        final String[] array = ArrayUtils.toArray(""foo"", ""bar"");
        assertEquals(2, array.length);
        assertEquals(""foo"", array[0]);
        assertEquals(""bar"", array[1]);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5355]])
805,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testSubstringsBetween_StringStringString(),"    @Test
    public void testSubstringsBetween_StringStringString() {

        String[] results = StringUtils.substringsBetween(""[one], [two], [three]"", ""["", ""]"");
        assertEquals(3, results.length);
        assertEquals(""one"", results[0]);
        assertEquals(""two"", results[1]);
        assertEquals(""three"", results[2]);

        results = StringUtils.substringsBetween(""[one], [two], three"", ""["", ""]"");
        assertEquals(2, results.length);
        assertEquals(""one"", results[0]);
        assertEquals(""two"", results[1]);

        results = StringUtils.substringsBetween(""[one], [two], three]"", ""["", ""]"");
        assertEquals(2, results.length);
        assertEquals(""one"", results[0]);
        assertEquals(""two"", results[1]);

        results = StringUtils.substringsBetween(""[one], two], three]"", ""["", ""]"");
        assertEquals(1, results.length);
        assertEquals(""one"", results[0]);

        results = StringUtils.substringsBetween(""one], two], [three]"", ""["", ""]"");
        assertEquals(1, results.length);
        assertEquals(""three"", results[0]);

        // 'ab hello ba' will match, but 'ab non ba' won't
        // this is because the 'a' is shared between the two and can't be matched twice
        results = StringUtils.substringsBetween(""aabhellobabnonba"", ""ab"", ""ba"");
        assertEquals(1, results.length);
        assertEquals(""hello"", results[0]);

        results = StringUtils.substringsBetween(""one, two, three"", ""["", ""]"");
        assertNull(results);

        results = StringUtils.substringsBetween(""[one, two, three"", ""["", ""]"");
        assertNull(results);

        results = StringUtils.substringsBetween(""one, two, three]"", ""["", ""]"");
        assertNull(results);

        results = StringUtils.substringsBetween(""[one], [two], [three]"", ""["", null);
        assertNull(results);

        results = StringUtils.substringsBetween(""[one], [two], [three]"", null, ""]"");
        assertNull(results);

        results = StringUtils.substringsBetween(""[one], [two], [three]"", """", """");
        assertNull(results);

        results = StringUtils.substringsBetween(null, ""["", ""]"");
        assertNull(results);

        results = StringUtils.substringsBetween("""", ""["", ""]"");
        assertEquals(0, results.length);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5353]])
287,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch() {
        BooleanUtils.toBooleanObject(Integer.valueOf(9), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5351]])
416,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getSimpleName_Class(),"    @Test
    public void test_getSimpleName_Class() {
        assertEquals(""ClassUtils"", ClassUtils.getSimpleName(ClassUtils.class));
        assertEquals(""Entry"", ClassUtils.getSimpleName(Map.Entry.class));
        assertEquals("""", ClassUtils.getSimpleName((Class<?>) null));

        // LANG-535
        assertEquals(""String[]"", ClassUtils.getSimpleName(String[].class));
        assertEquals(""Entry[]"", ClassUtils.getSimpleName(Map.Entry[].class));

        // Primitives
        assertEquals(""boolean"", ClassUtils.getSimpleName(boolean.class));
        assertEquals(""byte"", ClassUtils.getSimpleName(byte.class));
        assertEquals(""char"", ClassUtils.getSimpleName(char.class));
        assertEquals(""short"", ClassUtils.getSimpleName(short.class));
        assertEquals(""int"", ClassUtils.getSimpleName(int.class));
        assertEquals(""long"", ClassUtils.getSimpleName(long.class));
        assertEquals(""float"", ClassUtils.getSimpleName(float.class));
        assertEquals(""double"", ClassUtils.getSimpleName(double.class));

        // Primitive Arrays
        assertEquals(""boolean[]"", ClassUtils.getSimpleName(boolean[].class));
        assertEquals(""byte[]"", ClassUtils.getSimpleName(byte[].class));
        assertEquals(""char[]"", ClassUtils.getSimpleName(char[].class));
        assertEquals(""short[]"", ClassUtils.getSimpleName(short[].class));
        assertEquals(""int[]"", ClassUtils.getSimpleName(int[].class));
        assertEquals(""long[]"", ClassUtils.getSimpleName(long[].class));
        assertEquals(""float[]"", ClassUtils.getSimpleName(float[].class));
        assertEquals(""double[]"", ClassUtils.getSimpleName(double[].class));

        // Arrays of arrays of ...
        assertEquals(""String[][]"", ClassUtils.getSimpleName(String[][].class));
        assertEquals(""String[][][]"", ClassUtils.getSimpleName(String[][][].class));
        assertEquals(""String[][][][]"", ClassUtils.getSimpleName(String[][][][].class));
        
        // On-the-fly types
        class Named extends Object {}
        assertEquals("""", ClassUtils.getSimpleName(new Object(){}.getClass()));
        assertEquals(""Named"", ClassUtils.getSimpleName(Named.class));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5350]])
415,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_String(),"    @Test
    public void test_getShortClassName_String() {
        assertEquals(""ClassUtils"", ClassUtils.getShortClassName(ClassUtils.class.getName()));
        assertEquals(""Map.Entry"", ClassUtils.getShortClassName(Map.Entry.class.getName()));
        assertEquals("""", ClassUtils.getShortClassName((String) null));
        assertEquals("""", ClassUtils.getShortClassName(""""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5350]])
792,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java,org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWithIgnoreCase(),"    @Test
    public void testEndsWithIgnoreCase() {
        assertTrue(""endsWithIgnoreCase(null, null)"",    StringUtils.endsWithIgnoreCase(null, (String)null));
        assertFalse(""endsWithIgnoreCase(FOOBAR, null)"", StringUtils.endsWithIgnoreCase(FOOBAR, (String)null));
        assertFalse(""endsWithIgnoreCase(null, FOO)"",    StringUtils.endsWithIgnoreCase(null, FOO));
        assertTrue(""endsWithIgnoreCase(FOOBAR, \""\"")"",  StringUtils.endsWithIgnoreCase(FOOBAR, """"));

        assertFalse(""endsWithIgnoreCase(foobar, foo)"", StringUtils.endsWithIgnoreCase(foobar, foo));
        assertFalse(""endsWithIgnoreCase(FOOBAR, FOO)"", StringUtils.endsWithIgnoreCase(FOOBAR, FOO));
        assertFalse(""endsWithIgnoreCase(foobar, FOO)"", StringUtils.endsWithIgnoreCase(foobar, FOO));
        assertFalse(""endsWithIgnoreCase(FOOBAR, foo)"", StringUtils.endsWithIgnoreCase(FOOBAR, foo));

        assertFalse(""endsWithIgnoreCase(foo, foobar)"", StringUtils.endsWithIgnoreCase(foo, foobar));
        assertFalse(""endsWithIgnoreCase(foo, foobar)"", StringUtils.endsWithIgnoreCase(bar, foobar));

        assertTrue(""endsWithIgnoreCase(foobar, bar)"", StringUtils.endsWithIgnoreCase(foobar, bar));
        assertTrue(""endsWithIgnoreCase(FOOBAR, BAR)"", StringUtils.endsWithIgnoreCase(FOOBAR, BAR));
        assertTrue(""endsWithIgnoreCase(foobar, BAR)"", StringUtils.endsWithIgnoreCase(foobar, BAR));
        assertTrue(""endsWithIgnoreCase(FOOBAR, bar)"", StringUtils.endsWithIgnoreCase(FOOBAR, bar));

        // javadoc
        assertTrue(StringUtils.endsWithIgnoreCase(""abcdef"", ""def""));
        assertTrue(StringUtils.endsWithIgnoreCase(""ABCDEF"", ""def""));
        assertFalse(StringUtils.endsWithIgnoreCase(""ABCDEF"", ""cde""));

        // ""alpha,beta,gamma,delta"".endsWith(""DELTA"")
        assertTrue(""endsWith(\u03B1\u03B2\u03B3\u03B4, \u0394)"",
                StringUtils.endsWithIgnoreCase(""\u03B1\u03B2\u03B3\u03B4"", ""\u0394""));
        // ""alpha,beta,gamma,delta"".endsWith(""GAMMA"")
        assertFalse(""endsWith(\u03B1\u03B2\u03B3\u03B4, \u0393)"",
                StringUtils.endsWithIgnoreCase(""\u03B1\u03B2\u03B3\u03B4"", ""\u0393""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5349]])
459,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testGetPublicMethod(),"    @Test
    public void testGetPublicMethod() throws Exception {
        // Tests with Collections$UnmodifiableSet
        final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());
        final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), ""isEmpty"",  new Class[0]);
            assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));

        try {
            isEmptyMethod.invoke(set, new Object[0]);
        } catch(final java.lang.IllegalAccessException iae) {
            fail(""Should not have thrown IllegalAccessException"");
        }

        // Tests with a public Class
        final Method toStringMethod = ClassUtils.getPublicMethod(Object.class, ""toString"",  new Class[0]);
            assertEquals(Object.class.getMethod(""toString"", new Class[0]), toStringMethod);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5348]])
643,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testBetweenWithCompare(),"    @Test
    public void testBetweenWithCompare(){
        // TODO add tests with a better comparator
        final Comparator<Integer> c = new Comparator<Integer>(){
            @Override
            public int compare(final Integer o1, final Integer o2) {
                return 0; // all integers are equal
            }
        };
        Range<Integer> rb = Range.between(-10,20);
        assertFalse(""should not contain null"",rb.contains(null));
        assertTrue(""should contain 10"",rb.contains(10));
        assertTrue(""should contain -10"",rb.contains(-10));
        assertFalse(""should not contain 21"",rb.contains(21));
        assertFalse(""should not contain -11"",rb.contains(-11));
        rb = Range.between(-10,20,c);
        assertFalse(""should not contain null"",rb.contains(null));
        assertTrue(""should contain 10"",rb.contains(10));
        assertTrue(""should contain -10"",rb.contains(-10));
        assertTrue(""should contain 21"",rb.contains(21));
        assertTrue(""should contain -11"",rb.contains(-11));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5346]])
906,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testAppendIfMissing(),"    @Test
    public void testAppendIfMissing() {
        assertEquals(""appendIfMissing(null,null)"", null, StringUtils.appendIfMissing(null,null));
        assertEquals(""appendIfMissing(abc,null)"", ""abc"", StringUtils.appendIfMissing(""abc"",null));
        assertEquals(""appendIfMissing(\""\"",xyz)"", ""xyz"", StringUtils.appendIfMissing("""",""xyz""));
        assertEquals(""appendIfMissing(abc,xyz)"", ""abcxyz"", StringUtils.appendIfMissing(""abc"",""xyz""));
        assertEquals(""appendIfMissing(abcxyz,xyz)"", ""abcxyz"", StringUtils.appendIfMissing(""abcxyz"",""xyz""));
        assertEquals(""appendIfMissing(aXYZ,xyz)"", ""aXYZxyz"", StringUtils.appendIfMissing(""aXYZ"",""xyz""));

        assertEquals(""appendIfMissing(null,null,null)"", null, StringUtils.appendIfMissing(null,null,(CharSequence[]) null));
        assertEquals(""appendIfMissing(abc,null,null)"", ""abc"", StringUtils.appendIfMissing(""abc"",null,(CharSequence[]) null));
        assertEquals(""appendIfMissing(\""\"",xyz,null))"", ""xyz"", StringUtils.appendIfMissing("""",""xyz"",(CharSequence[]) null));
        assertEquals(""appendIfMissing(abc,xyz,{null})"", ""abcxyz"", StringUtils.appendIfMissing(""abc"",""xyz"",new CharSequence[]{null}));
        assertEquals(""appendIfMissing(abc,xyz,\""\"")"", ""abc"", StringUtils.appendIfMissing(""abc"",""xyz"",""""));
        assertEquals(""appendIfMissing(abc,xyz,mno)"", ""abcxyz"", StringUtils.appendIfMissing(""abc"",""xyz"",""mno""));
        assertEquals(""appendIfMissing(abcxyz,xyz,mno)"", ""abcxyz"", StringUtils.appendIfMissing(""abcxyz"",""xyz"",""mno""));
        assertEquals(""appendIfMissing(abcmno,xyz,mno)"", ""abcmno"", StringUtils.appendIfMissing(""abcmno"",""xyz"",""mno""));
        assertEquals(""appendIfMissing(abcXYZ,xyz,mno)"", ""abcXYZxyz"", StringUtils.appendIfMissing(""abcXYZ"",""xyz"",""mno""));
        assertEquals(""appendIfMissing(abcMNO,xyz,mno)"", ""abcMNOxyz"", StringUtils.appendIfMissing(""abcMNO"",""xyz"",""mno""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5343]])
99,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new ArrayUtils());
        final Constructor<?>[] cons = ArrayUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(ArrayUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(ArrayUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5342]])
634,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testRandomAscii(),"    @Test
    public void testRandomAscii() {}
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5339]])
227,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToObject_char(),"    @Test
    public void testToObject_char() {
        final char[] b = null;
        assertArrayEquals(null, ArrayUtils.toObject(b));
        
        assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, 
            ArrayUtils.toObject(new char[0]));
        
        assertTrue(Arrays.equals(
            new Character[] {new Character(Character.MIN_VALUE), 
                new Character(Character.MAX_VALUE), new Character('0')},
                ArrayUtils.toObject(new char[] {Character.MIN_VALUE, Character.MAX_VALUE, 
                '0'} ))
        );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5335]])
405,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testIsAsciiPrintable_char(),"    @Test
    public void testIsAsciiPrintable_char() {
        assertTrue(CharUtils.isAsciiPrintable('a'));
        assertTrue(CharUtils.isAsciiPrintable('A'));
        assertTrue(CharUtils.isAsciiPrintable('3'));
        assertTrue(CharUtils.isAsciiPrintable('-'));
        assertFalse(CharUtils.isAsciiPrintable('\n'));
        assertFalse(CharUtils.isAscii(CHAR_COPY));
       
        for (int i = 0; i < 196; i++) {
            if (i >= 32 && i <= 126) {
                assertTrue(CharUtils.isAsciiPrintable((char) i));
            } else {
                assertFalse(CharUtils.isAsciiPrintable((char) i));
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5331]])
768,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringStringWithSupplementaryChars(),"    @Test
    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {
        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));
        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5331]])
430,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Autoboxing(),"    @Test
    public void test_isAssignable_Autoboxing() throws Exception {
        assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));
        assertFalse(ClassUtils.isAssignable(String.class, null, true));

        assertTrue(ClassUtils.isAssignable(null, Object.class, true));
        assertTrue(ClassUtils.isAssignable(null, Integer.class, true));
        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true));
        assertTrue(ClassUtils.isAssignable(String.class, Object.class, true));
        assertTrue(ClassUtils.isAssignable(String.class, String.class, true));
        assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));
        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));
        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class, true));
        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));
        assertTrue(ClassUtils.isAssignable(Integer.class, Object.class, true));
        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));
        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));
        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));
        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));
        assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, true));
        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));
        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5331]])
442,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitives(),"    @Test
    public void testWrappersToPrimitives() {
        // an array with classes to test
        final Class<?>[] classes = {
                Boolean.class, Byte.class, Character.class, Short.class,
                Integer.class, Long.class, Float.class, Double.class,
                String.class, ClassUtils.class, null
        };

        final Class<?>[] primitives = ClassUtils.wrappersToPrimitives(classes);
        // now test the result
        assertEquals(""Wrong length of result array"", classes.length, primitives.length);
        for (int i = 0; i < classes.length; i++) {
            final Class<?> expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);
            assertEquals(classes[i] + "" -> "" + expectedPrimitive, expectedPrimitive,
                    primitives[i]);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5320]])
280,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer(),"    @Test
    public void test_toBoolean_Integer_Integer_Integer() {
        final Integer six = Integer.valueOf(6);
        final Integer seven = Integer.valueOf(7);

        assertTrue(BooleanUtils.toBoolean((Integer) null, null, seven));
        assertFalse(BooleanUtils.toBoolean((Integer) null, six, null));

        assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven));
        assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5320]])
780,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsIsTest.java,org.apache.commons.lang3.StringUtilsIsTest.testIsAlpha(),"    @Test
    public void testIsAlpha() {
        assertFalse(StringUtils.isAlpha(null));
        assertFalse(StringUtils.isAlpha(""""));
        assertFalse(StringUtils.isAlpha("" ""));
        assertTrue(StringUtils.isAlpha(""a""));
        assertTrue(StringUtils.isAlpha(""A""));
        assertTrue(StringUtils.isAlpha(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));
        assertFalse(StringUtils.isAlpha(""ham kso""));
        assertFalse(StringUtils.isAlpha(""1""));
        assertFalse(StringUtils.isAlpha(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));
        assertFalse(StringUtils.isAlpha(""_""));
        assertFalse(StringUtils.isAlpha(""hkHKHik*khbkuh""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5318]])
778,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastOrdinalIndexOf(),"    @Test
    public void testLastOrdinalIndexOf() {
        assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, ""*"", 42) );
        assertEquals(-1, StringUtils.lastOrdinalIndexOf(""*"", null, 42) );
        assertEquals(0, StringUtils.lastOrdinalIndexOf("""", """", 42) );
        assertEquals(7, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""a"", 1) );
        assertEquals(6, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""a"", 2) );
        assertEquals(5, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""b"", 1) );
        assertEquals(2, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""b"", 2) );
        assertEquals(4, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""ab"", 1) );
        assertEquals(1, StringUtils.lastOrdinalIndexOf(""aabaabaa"", ""ab"", 2) );
        assertEquals(8, StringUtils.lastOrdinalIndexOf(""aabaabaa"", """", 1) );
        assertEquals(8, StringUtils.lastOrdinalIndexOf(""aabaabaa"", """", 2) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5316]])
375,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testContains_Char(),"    @Test
    public void testContains_Char() {
        final CharSet btod = CharSet.getInstance(""b-d"");
        final CharSet dtob = CharSet.getInstance(""d-b"");
        final CharSet bcd = CharSet.getInstance(""bcd"");
        final CharSet bd = CharSet.getInstance(""bd"");
        final CharSet notbtod = CharSet.getInstance(""^b-d"");
        
        assertFalse(btod.contains('a'));
        assertTrue(btod.contains('b'));
        assertTrue(btod.contains('c'));
        assertTrue(btod.contains('d'));
        assertFalse(btod.contains('e'));
        
        assertFalse(bcd.contains('a'));
        assertTrue(bcd.contains('b'));
        assertTrue(bcd.contains('c'));
        assertTrue(bcd.contains('d'));
        assertFalse(bcd.contains('e'));
        
        assertFalse(bd.contains('a'));
        assertTrue(bd.contains('b'));
        assertFalse(bd.contains('c'));
        assertTrue(bd.contains('d'));
        assertFalse(bd.contains('e'));
        
        assertTrue(notbtod.contains('a'));
        assertFalse(notbtod.contains('b'));
        assertFalse(notbtod.contains('c'));
        assertFalse(notbtod.contains('d'));
        assertTrue(notbtod.contains('e'));
        
        assertFalse(dtob.contains('a'));
        assertTrue(dtob.contains('b'));
        assertTrue(dtob.contains('c'));
        assertTrue(dtob.contains('d'));
        assertFalse(dtob.contains('e'));
      
        final CharRange[] array = dtob.getCharRanges();
        assertEquals(""[b-d]"", dtob.toString());
        assertEquals(1, array.length);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5316]])
842,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReplacePattern(),"    @Test
    public void testReplacePattern() {
        assertEquals(""X"", StringUtils.replacePattern(""<A>\nxy\n</A>"", ""<A>.*</A>"", ""X""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5315]])
894,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase(),"    @Test
    public void testRemoveEndIgnoreCase() {
        // StringUtils.removeEndIgnoreCase("""", *)        = """"
        assertNull(""removeEndIgnoreCase(null, null)"", StringUtils.removeEndIgnoreCase(null, null));
        assertNull(""removeEndIgnoreCase(null, \""\"")"", StringUtils.removeEndIgnoreCase(null, """"));
        assertNull(""removeEndIgnoreCase(null, \""a\"")"", StringUtils.removeEndIgnoreCase(null, ""a""));
        
        // StringUtils.removeEnd(*, null)      = *
        assertEquals(""removeEndIgnoreCase(\""\"", null)"", StringUtils.removeEndIgnoreCase("""", null), """");
        assertEquals(""removeEndIgnoreCase(\""\"", \""\"")"", StringUtils.removeEndIgnoreCase("""", """"), """");
        assertEquals(""removeEndIgnoreCase(\""\"", \""a\"")"", StringUtils.removeEndIgnoreCase("""", ""a""), """");
        
        // All others:
        assertEquals(""removeEndIgnoreCase(\""www.domain.com.\"", \"".com\"")"", StringUtils.removeEndIgnoreCase(""www.domain.com."", "".com""), ""www.domain.com."");
        assertEquals(""removeEndIgnoreCase(\""www.domain.com\"", \"".com\"")"", StringUtils.removeEndIgnoreCase(""www.domain.com"", "".com""), ""www.domain"");
        assertEquals(""removeEndIgnoreCase(\""www.domain\"", \"".com\"")"", StringUtils.removeEndIgnoreCase(""www.domain"", "".com""), ""www.domain"");
        assertEquals(""removeEndIgnoreCase(\""domain.com\"", \""\"")"", StringUtils.removeEndIgnoreCase(""domain.com"", """"), ""domain.com"");   
        assertEquals(""removeEndIgnoreCase(\""domain.com\"", null)"", StringUtils.removeEndIgnoreCase(""domain.com"", null), ""domain.com"");   

        // Case insensitive:
        assertEquals(""removeEndIgnoreCase(\""www.domain.com\"", \"".COM\"")"", StringUtils.removeEndIgnoreCase(""www.domain.com"", "".COM""), ""www.domain"");
        assertEquals(""removeEndIgnoreCase(\""www.domain.COM\"", \"".com\"")"", StringUtils.removeEndIgnoreCase(""www.domain.COM"", "".com""), ""www.domain"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5312]])
601,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testMin(),"    @Test
    public void testMin() {
        final Calendar calendar = Calendar.getInstance();
        final Date nonNullComparable1 = calendar.getTime();
        final Date nonNullComparable2 = calendar.getTime();
        final String[] nullAray = null;
        
        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );
        final Date minComparable = calendar.getTime();
        
        assertNotSame( nonNullComparable1, nonNullComparable2 );
        
        assertNull(ObjectUtils.min( (String) null ) );
        assertNull(ObjectUtils.min( nullAray ) );
        assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1 ) );
        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, null ) );
        assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1, null ) );
        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, nonNullComparable2 ) );
        assertSame( nonNullComparable2, ObjectUtils.min( nonNullComparable2, nonNullComparable1 ) );
        assertSame( minComparable, ObjectUtils.min( nonNullComparable1, minComparable ) );
        assertSame( minComparable, ObjectUtils.min( minComparable, nonNullComparable1 ) );
        assertSame( minComparable, ObjectUtils.min( null, nonNullComparable1, null, minComparable ) );

        assertNull( ObjectUtils.min((String)null, (String)null) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5311]])
756,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_char(),"    @Test
    public void testIndexOf_char() {
        assertEquals(-1, StringUtils.indexOf(null, ' '));
        assertEquals(-1, StringUtils.indexOf("""", ' '));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", 'a'));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", 'b'));

        assertEquals(2, StringUtils.indexOf(new StringBuilder(""aabaabaa""), 'b'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5308]])
282,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer_noMatch(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBoolean_Integer_Integer_Integer_noMatch() {
        BooleanUtils.toBoolean(Integer.valueOf(8), Integer.valueOf(6), Integer.valueOf(7));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5307]])
279,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int_int_int_noMatch(),"    @Test(expected = IllegalArgumentException.class)
    public void test_toBoolean_int_int_int_noMatch() {
        BooleanUtils.toBoolean(8, 6, 7);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5307]])
511,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.testConstructable(),"    @Test
    public void testConstructable() {
        // enforce public constructor
        new EnumUtils();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5304]])
588,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testNotEqual(),"    @Test
    public void testNotEqual() {
        assertFalse(""ObjectUtils.notEqual(null, null) returned false"", ObjectUtils.notEqual(null, null));
        assertTrue(""ObjectUtils.notEqual(\""foo\"", null) returned true"", ObjectUtils.notEqual(FOO, null));
        assertTrue(""ObjectUtils.notEqual(null, \""bar\"") returned true"", ObjectUtils.notEqual(null, BAR));
        assertTrue(""ObjectUtils.notEqual(\""foo\"", \""bar\"") returned true"", ObjectUtils.notEqual(FOO, BAR));
        assertFalse(""ObjectUtils.notEqual(\""foo\"", \""foo\"") returned false"", ObjectUtils.notEqual(FOO, FOO));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5303]])
764,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringWithSupplementaryChars(),"    @Test
    public void testIndexOfAny_StringStringWithSupplementaryChars() {
        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));
        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));
        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));
        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5303]])
860,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString(),"    @Test
    public void testLeftPad_StringIntString() {
        assertEquals(null, StringUtils.leftPad(null, 5, ""-+""));
        assertEquals(null, StringUtils.leftPad(null, 5, null));
        assertEquals(""     "", StringUtils.leftPad("""", 5, "" ""));
        assertEquals(""-+-+abc"", StringUtils.leftPad(""abc"", 7, ""-+""));
        assertEquals(""-+~abc"", StringUtils.leftPad(""abc"", 6, ""-+~""));
        assertEquals(""-+abc"", StringUtils.leftPad(""abc"", 5, ""-+~""));
        assertEquals(""abc"", StringUtils.leftPad(""abc"", 2, "" ""));
        assertEquals(""abc"", StringUtils.leftPad(""abc"", -1, "" ""));
        assertEquals(""  abc"", StringUtils.leftPad(""abc"", 5, null));
        assertEquals(""  abc"", StringUtils.leftPad(""abc"", 5, """"));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5301]])
292,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_Boolean_int_int_int(),"    @Test
    public void test_toInteger_Boolean_int_int_int() {
        assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));
        assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));
        assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5301]])
440,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitiveNoWrapper(),"    @Test
    public void testWrapperToPrimitiveNoWrapper() {
        assertNull(""Wrong result for non wrapper class"", ClassUtils.wrapperToPrimitive(String.class));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5300]])
105,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testArrayCreationWithGeneralReturnType(),"    @Test
    public void testArrayCreationWithGeneralReturnType()
    {
        final Object obj = ArrayUtils.toArray(""foo"", ""bar"");
        assertTrue(obj instanceof String[]);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5300]])
5,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testOneArgNull(),"    @Test
    public void testOneArgNull() {
        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null));
        assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5299]])
294,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean_Integer_Integer_Integer(),"    @Test
    public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {
        final Integer six = Integer.valueOf(6);
        final Integer seven = Integer.valueOf(7);
        final Integer eight = Integer.valueOf(8);
        assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));
        assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));
        assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight));
        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5294]])
363,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSequenceUtilsTest.java,org.apache.commons.lang3.CharSequenceUtilsTest.testSubSequence(),"    @Test
    public void testSubSequence() {
        //
        // null input
        //
        Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1));
        Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0));
        Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1));
        //
        // non-null input
        //
        Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0));
        Assert.assertEquals(""012"", CharSequenceUtils.subSequence(""012"", 0));
        Assert.assertEquals(""12"", CharSequenceUtils.subSequence(""012"", 1));
        Assert.assertEquals(""2"", CharSequenceUtils.subSequence(""012"", 2));
        Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(""012"", 3));
        //
        // Exception expected
        //
        try {
            Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1));
            Assert.fail(""Expected "" + IndexOutOfBoundsException.class.getName());
        } catch (final IndexOutOfBoundsException e) {
            // Expected
        }
        try {
            Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1));
            Assert.fail(""Expected "" + IndexOutOfBoundsException.class.getName());
        } catch (final IndexOutOfBoundsException e) {
            // Expected
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5291]])
355,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testEquals_Object(),"    @Test
    public void testEquals_Object() {
        final CharRange rangea = CharRange.is('a');
        final CharRange rangeae = CharRange.isIn('a', 'e');
        final CharRange rangenotbf = CharRange.isIn('b', 'f');

        assertFalse(rangea.equals(null));

        assertTrue(rangea.equals(rangea));
        assertTrue(rangea.equals(CharRange.is('a')));
        assertTrue(rangeae.equals(rangeae));
        assertTrue(rangeae.equals(CharRange.isIn('a', 'e')));
        assertTrue(rangenotbf.equals(rangenotbf));
        assertTrue(rangenotbf.equals(CharRange.isIn('b', 'f')));

        assertFalse(rangea.equals(rangeae));
        assertFalse(rangea.equals(rangenotbf));
        assertFalse(rangeae.equals(rangea));
        assertFalse(rangeae.equals(rangenotbf));
        assertFalse(rangenotbf.equals(rangea));
        assertFalse(rangenotbf.equals(rangeae));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5289]])
902,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testToString(),"    @Test
    public void testToString() throws UnsupportedEncodingException {
        final String expectedString = ""The quick brown fox jumped over the lazy dog."";
        String encoding = SystemUtils.FILE_ENCODING;
        byte[] expectedBytes = expectedString.getBytes(encoding);
        // sanity check start
        assertArrayEquals(expectedBytes, expectedString.getBytes());
        // sanity check end
        assertEquals(expectedString, StringUtils.toString(expectedBytes, null));
        assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding));
        encoding = ""UTF-16"";
        expectedBytes = expectedString.getBytes(encoding);
        assertEquals(expectedString, StringUtils.toString(expectedBytes, encoding));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5286]])
661,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIsBeforeRange(),"    @Test
    public void testIsBeforeRange() {
        assertFalse(intRange.isBeforeRange(null));
        
        assertFalse(intRange.isBeforeRange(Range.between(5, 9)));
        
        assertFalse(intRange.isBeforeRange(Range.between(5, 10)));
        assertFalse(intRange.isBeforeRange(Range.between(5, 20)));
        assertFalse(intRange.isBeforeRange(Range.between(5, 25)));
        assertFalse(intRange.isBeforeRange(Range.between(15, 25)));
        
        assertTrue(intRange.isBeforeRange(Range.between(21, 25)));
        
        assertFalse(intRange.isBeforeRange(Range.between(10, 20)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5285]])
777,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfIgnoreCase_StringInt(),"    @Test
    public void testLastIndexOfIgnoreCase_StringInt() {
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, """", 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, """", -1));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", null, 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", null, -1));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase("""", """", 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", """", -1));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase("""", """", 9));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(""abc"", """", 0));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(""abc"", """", -1));
        assertEquals(3, StringUtils.lastIndexOfIgnoreCase(""abc"", """", 9));
        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""A"", 8));
        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", 8));
        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""AB"", 8));
        assertEquals(2, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", 3));
        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", 9));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", -1));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B"", 0));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""A"", 0));
        assertEquals(1, StringUtils.lastIndexOfIgnoreCase(""aab"", ""AB"", 1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5280]])
845,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString(),"    @Test
    public void testReplaceOnce_StringStringString() {
        assertEquals(null, StringUtils.replaceOnce(null, null, null));
        assertEquals(null, StringUtils.replaceOnce(null, null, ""any""));
        assertEquals(null, StringUtils.replaceOnce(null, ""any"", null));
        assertEquals(null, StringUtils.replaceOnce(null, ""any"", ""any""));

        assertEquals("""", StringUtils.replaceOnce("""", null, null));
        assertEquals("""", StringUtils.replaceOnce("""", null, ""any""));
        assertEquals("""", StringUtils.replaceOnce("""", ""any"", null));
        assertEquals("""", StringUtils.replaceOnce("""", ""any"", ""any""));

        assertEquals(""FOO"", StringUtils.replaceOnce(""FOO"", """", ""any""));
        assertEquals(""FOO"", StringUtils.replaceOnce(""FOO"", null, ""any""));
        assertEquals(""FOO"", StringUtils.replaceOnce(""FOO"", ""F"", null));
        assertEquals(""FOO"", StringUtils.replaceOnce(""FOO"", null, null));

        assertEquals(""foofoo"", StringUtils.replaceOnce(""foofoofoo"", ""foo"", """"));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5280]])
898,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testGetCommonPrefix_StringArray(),"    @Test
    public void testGetCommonPrefix_StringArray() {
        assertEquals("""", StringUtils.getCommonPrefix((String[])null));
        assertEquals("""", StringUtils.getCommonPrefix());
        assertEquals(""abc"", StringUtils.getCommonPrefix(""abc""));
        assertEquals("""", StringUtils.getCommonPrefix(null, null));
        assertEquals("""", StringUtils.getCommonPrefix("""", """"));
        assertEquals("""", StringUtils.getCommonPrefix("""", null));
        assertEquals("""", StringUtils.getCommonPrefix(""abc"", null, null));
        assertEquals("""", StringUtils.getCommonPrefix(null, null, ""abc""));
        assertEquals("""", StringUtils.getCommonPrefix("""", ""abc""));
        assertEquals("""", StringUtils.getCommonPrefix(""abc"", """"));
        assertEquals(""abc"", StringUtils.getCommonPrefix(""abc"", ""abc""));
        assertEquals(""a"", StringUtils.getCommonPrefix(""abc"", ""a""));
        assertEquals(""ab"", StringUtils.getCommonPrefix(""ab"", ""abxyz""));
        assertEquals(""ab"", StringUtils.getCommonPrefix(""abcde"", ""abxyz""));
        assertEquals("""", StringUtils.getCommonPrefix(""abcde"", ""xyz""));
        assertEquals("""", StringUtils.getCommonPrefix(""xyz"", ""abcde""));
        assertEquals(""i am a "", StringUtils.getCommonPrefix(""i am a machine"", ""i am a robot""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5269]])
283,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_int_int_int(),"    @Test
    public void test_toBooleanObject_int_int_int() {
        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));
        assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5269]])
396,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToIntValue_char(),"    @Test
    public void testToIntValue_char() {
        assertEquals(0, CharUtils.toIntValue('0'));
        assertEquals(1, CharUtils.toIntValue('1'));
        assertEquals(2, CharUtils.toIntValue('2'));
        assertEquals(3, CharUtils.toIntValue('3'));
        assertEquals(4, CharUtils.toIntValue('4'));
        assertEquals(5, CharUtils.toIntValue('5'));
        assertEquals(6, CharUtils.toIntValue('6'));
        assertEquals(7, CharUtils.toIntValue('7'));
        assertEquals(8, CharUtils.toIntValue('8'));
        assertEquals(9, CharUtils.toIntValue('9'));
        try {
            CharUtils.toIntValue('a');
        } catch (final IllegalArgumentException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5266]])
945,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNotEmptyCollection1(),"    @Test
    public void testNotEmptyCollection1() {
        final Collection<Integer> coll = new ArrayList<Integer>();
        try {
            Validate.notEmpty((Collection<?>) null);
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""The validated collection is empty"", ex.getMessage());
        }
        try {
            Validate.notEmpty(coll);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""The validated collection is empty"", ex.getMessage());
        }
        coll.add(Integer.valueOf(8));
        Validate.notEmpty(coll);
        
        final Collection<Integer> test = Validate.notEmpty(coll);
        assertSame(coll, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5265]])
697,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,"org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String)","    private void assertEscapeJava(final String escaped, final String original) throws IOException {
        assertEscapeJava(null, escaped, original);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5264]])
795,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsSubstringTest.java,org.apache.commons.lang3.StringUtilsSubstringTest.testSubstring_StringIntInt(),"    @Test
    public void testSubstring_StringIntInt() {
        assertEquals(null, StringUtils.substring(null, 0, 0));
        assertEquals(null, StringUtils.substring(null, 1, 2));
        assertEquals("""", StringUtils.substring("""", 0, 0));
        assertEquals("""", StringUtils.substring("""", 1, 2));
        assertEquals("""", StringUtils.substring("""", -2, -1));
        
        assertEquals("""", StringUtils.substring(SENTENCE, 8, 6));
        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3));
        assertEquals(""o"", StringUtils.substring(SENTENCE, -9, 3));
        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));
        assertEquals(""o"", StringUtils.substring(SENTENCE, -9, -8));
        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));
        assertEquals("""", StringUtils.substring(SENTENCE, 2, 2));
        assertEquals(""b"",StringUtils.substring(""abc"", -2, -1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5264]])
22,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testLANG571(),"    @Test
    public void testLANG571(){
        final String[] stringArray=null;
        final String aString=null;
        try {
            @SuppressWarnings(""unused"")
            final
            String[] sa = ArrayUtils.add(stringArray, aString);
            fail(""Should have caused IllegalArgumentException"");
        } catch (final IllegalArgumentException iae){
            //expected
        }
        try {
            @SuppressWarnings(""unused"")
            final
            String[] sa = ArrayUtils.add(stringArray, 0, aString);
            fail(""Should have caused IllegalArgumentException"");
        } catch (final IllegalArgumentException iae){
            //expected
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5262]])
249,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyObject(),"    @Test
    public void testIsNotEmptyObject() {
        final Object[] emptyArray = new Object[] {};
        final Object[] notEmptyArray = new Object[] { new String(""Value"") };
        assertFalse(ArrayUtils.isNotEmpty((Object[])null));
        assertFalse(ArrayUtils.isNotEmpty(emptyArray));
        assertTrue(ArrayUtils.isNotEmpty(notEmptyArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5262]])
563,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new LocaleUtils());
        final Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(LocaleUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(LocaleUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5261]])
897,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringArray(),"    @Test
    public void testDifferenceAt_StringArray() {        
        assertEquals(-1, StringUtils.indexOfDifference((String[])null));
        assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));
        assertEquals(-1, StringUtils.indexOfDifference(new String[] {""abc""}));
        assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));
        assertEquals(-1, StringUtils.indexOfDifference(new String[] {"""", """"}));
        assertEquals(0, StringUtils.indexOfDifference(new String[] {"""", null}));
        assertEquals(0, StringUtils.indexOfDifference(new String[] {""abc"", null, null}));
        assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, ""abc""}));
        assertEquals(0, StringUtils.indexOfDifference(new String[] {"""", ""abc""}));
        assertEquals(0, StringUtils.indexOfDifference(new String[] {""abc"", """"}));
        assertEquals(-1, StringUtils.indexOfDifference(new String[] {""abc"", ""abc""}));
        assertEquals(1, StringUtils.indexOfDifference(new String[] {""abc"", ""a""}));
        assertEquals(2, StringUtils.indexOfDifference(new String[] {""ab"", ""abxyz""}));
        assertEquals(2, StringUtils.indexOfDifference(new String[] {""abcde"", ""abxyz""}));
        assertEquals(0, StringUtils.indexOfDifference(new String[] {""abcde"", ""xyz""}));
        assertEquals(0, StringUtils.indexOfDifference(new String[] {""xyz"", ""abcde""}));
        assertEquals(7, StringUtils.indexOfDifference(new String[] {""i am a machine"", ""i am a robot""}));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5259]])
893,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRemoveEnd(),"    @Test
    public void testRemoveEnd() {
        // StringUtils.removeEnd("""", *)        = """"
        assertNull(StringUtils.removeEnd(null, null));
        assertNull(StringUtils.removeEnd(null, """"));
        assertNull(StringUtils.removeEnd(null, ""a""));
        
        // StringUtils.removeEnd(*, null)      = *
        assertEquals(StringUtils.removeEnd("""", null), """");
        assertEquals(StringUtils.removeEnd("""", """"), """");
        assertEquals(StringUtils.removeEnd("""", ""a""), """");
        
        // All others:
        assertEquals(StringUtils.removeEnd(""www.domain.com."", "".com""), ""www.domain.com."");
        assertEquals(StringUtils.removeEnd(""www.domain.com"", "".com""), ""www.domain"");
        assertEquals(StringUtils.removeEnd(""www.domain"", "".com""), ""www.domain"");
        assertEquals(StringUtils.removeEnd(""domain.com"", """"), ""domain.com"");   
        assertEquals(StringUtils.removeEnd(""domain.com"", null), ""domain.com"");   
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5246]])
414,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Class(),"    @Test
    public void test_getShortClassName_Class() {
        assertEquals(""ClassUtils"", ClassUtils.getShortClassName(ClassUtils.class));
        assertEquals(""Map.Entry"", ClassUtils.getShortClassName(Map.Entry.class));
        assertEquals("""", ClassUtils.getShortClassName((Class<?>) null));

        // LANG-535
        assertEquals(""String[]"", ClassUtils.getShortClassName(String[].class));
        assertEquals(""Map.Entry[]"", ClassUtils.getShortClassName(Map.Entry[].class));

        // Primitives
        assertEquals(""boolean"", ClassUtils.getShortClassName(boolean.class));
        assertEquals(""byte"", ClassUtils.getShortClassName(byte.class));
        assertEquals(""char"", ClassUtils.getShortClassName(char.class));
        assertEquals(""short"", ClassUtils.getShortClassName(short.class));
        assertEquals(""int"", ClassUtils.getShortClassName(int.class));
        assertEquals(""long"", ClassUtils.getShortClassName(long.class));
        assertEquals(""float"", ClassUtils.getShortClassName(float.class));
        assertEquals(""double"", ClassUtils.getShortClassName(double.class));

        // Primitive Arrays
        assertEquals(""boolean[]"", ClassUtils.getShortClassName(boolean[].class));
        assertEquals(""byte[]"", ClassUtils.getShortClassName(byte[].class));
        assertEquals(""char[]"", ClassUtils.getShortClassName(char[].class));
        assertEquals(""short[]"", ClassUtils.getShortClassName(short[].class));
        assertEquals(""int[]"", ClassUtils.getShortClassName(int[].class));
        assertEquals(""long[]"", ClassUtils.getShortClassName(long[].class));
        assertEquals(""float[]"", ClassUtils.getShortClassName(float[].class));
        assertEquals(""double[]"", ClassUtils.getShortClassName(double[].class));

        // Arrays of arrays of ...
        assertEquals(""String[][]"", ClassUtils.getShortClassName(String[][].class));
        assertEquals(""String[][][]"", ClassUtils.getShortClassName(String[][][].class));
        assertEquals(""String[][][][]"", ClassUtils.getShortClassName(String[][][][].class));
        
        // Inner types
        class Named extends Object {}
        assertEquals(""ClassUtilsTest.2"", ClassUtils.getShortClassName(new Object(){}.getClass()));
        assertEquals(""ClassUtilsTest.2Named"", ClassUtils.getShortClassName(Named.class));
        assertEquals(""ClassUtilsTest.Inner"", ClassUtils.getShortClassName(Inner.class));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5246]])
759,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_StringInt(),"    @Test
    public void testIndexOf_StringInt() {
        assertEquals(-1, StringUtils.indexOf(null, null, 0));
        assertEquals(-1, StringUtils.indexOf(null, null, -1));
        assertEquals(-1, StringUtils.indexOf(null, """", 0));
        assertEquals(-1, StringUtils.indexOf(null, """", -1));
        assertEquals(-1, StringUtils.indexOf("""", null, 0));
        assertEquals(-1, StringUtils.indexOf("""", null, -1));
        assertEquals(0, StringUtils.indexOf("""", """", 0));
        assertEquals(0, StringUtils.indexOf("""", """", -1));
        assertEquals(0, StringUtils.indexOf("""", """", 9));
        assertEquals(0, StringUtils.indexOf(""abc"", """", 0));
        assertEquals(0, StringUtils.indexOf(""abc"", """", -1));
        assertEquals(3, StringUtils.indexOf(""abc"", """", 9));
        assertEquals(3, StringUtils.indexOf(""abc"", """", 3));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", ""a"", 0));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", ""b"", 0));
        assertEquals(1, StringUtils.indexOf(""aabaabaa"", ""ab"", 0));
        assertEquals(5, StringUtils.indexOf(""aabaabaa"", ""b"", 3));
        assertEquals(-1, StringUtils.indexOf(""aabaabaa"", ""b"", 9));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", ""b"", -1));
        assertEquals(2,StringUtils.indexOf(""aabaabaa"", """", 2));

        // Test that startIndex works correctly, i.e. cannot match before startIndex
        assertEquals(7, StringUtils.indexOf(""12345678"", ""8"", 5));
        assertEquals(7, StringUtils.indexOf(""12345678"", ""8"", 6));
        assertEquals(7, StringUtils.indexOf(""12345678"", ""8"", 7)); // 7 is last index
        assertEquals(-1, StringUtils.indexOf(""12345678"", ""8"", 8));

        assertEquals(5, StringUtils.indexOf(new StringBuilder(""aabaabaa""), ""b"", 3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5246]])
758,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_String(),"    @Test
    public void testIndexOf_String() {
        assertEquals(-1, StringUtils.indexOf(null, null));
        assertEquals(-1, StringUtils.indexOf("""", null));
        assertEquals(0, StringUtils.indexOf("""", """"));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", ""a""));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", ""b""));
        assertEquals(1, StringUtils.indexOf(""aabaabaa"", ""ab""));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", """"));

        assertEquals(2, StringUtils.indexOf(new StringBuilder(""aabaabaa""), ""b""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5246]])
841,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringString(),"    @Test
    public void testReplace_StringStringString() {
        assertEquals(null, StringUtils.replace(null, null, null));
        assertEquals(null, StringUtils.replace(null, null, ""any""));
        assertEquals(null, StringUtils.replace(null, ""any"", null));
        assertEquals(null, StringUtils.replace(null, ""any"", ""any""));

        assertEquals("""", StringUtils.replace("""", null, null));
        assertEquals("""", StringUtils.replace("""", null, ""any""));
        assertEquals("""", StringUtils.replace("""", ""any"", null));
        assertEquals("""", StringUtils.replace("""", ""any"", ""any""));

        assertEquals(""FOO"", StringUtils.replace(""FOO"", """", ""any""));
        assertEquals(""FOO"", StringUtils.replace(""FOO"", null, ""any""));
        assertEquals(""FOO"", StringUtils.replace(""FOO"", ""F"", null));
        assertEquals(""FOO"", StringUtils.replace(""FOO"", null, null));

        assertEquals("""", StringUtils.replace(""foofoofoo"", ""foo"", """"));
        assertEquals(""barbarbar"", StringUtils.replace(""foofoofoo"", ""foo"", ""bar""));
        assertEquals(""farfarfar"", StringUtils.replace(""foofoofoo"", ""oo"", ""ar""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5245]])
930,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testIS_JAVA(),"    @Test
    public void testIS_JAVA() {
        final String javaVersion = System.getProperty(""java.version"");
        if (javaVersion == null) {
            assertFalse(SystemUtils.IS_JAVA_1_1);
            assertFalse(SystemUtils.IS_JAVA_1_2);
            assertFalse(SystemUtils.IS_JAVA_1_3);
            assertFalse(SystemUtils.IS_JAVA_1_4);
            assertFalse(SystemUtils.IS_JAVA_1_5);
            assertFalse(SystemUtils.IS_JAVA_1_6);
            assertFalse(SystemUtils.IS_JAVA_1_7);
        } else if (javaVersion.startsWith(""1.1"")) {
            assertTrue(SystemUtils.IS_JAVA_1_1);
            assertFalse(SystemUtils.IS_JAVA_1_2);
            assertFalse(SystemUtils.IS_JAVA_1_3);
            assertFalse(SystemUtils.IS_JAVA_1_4);
            assertFalse(SystemUtils.IS_JAVA_1_5);
            assertFalse(SystemUtils.IS_JAVA_1_6);
            assertFalse(SystemUtils.IS_JAVA_1_7);
        } else if (javaVersion.startsWith(""1.2"")) {
            assertFalse(SystemUtils.IS_JAVA_1_1);
            assertTrue(SystemUtils.IS_JAVA_1_2);
            assertFalse(SystemUtils.IS_JAVA_1_3);
            assertFalse(SystemUtils.IS_JAVA_1_4);
            assertFalse(SystemUtils.IS_JAVA_1_5);
            assertFalse(SystemUtils.IS_JAVA_1_6);
            assertFalse(SystemUtils.IS_JAVA_1_7);
        } else if (javaVersion.startsWith(""1.3"")) {
            assertFalse(SystemUtils.IS_JAVA_1_1);
            assertFalse(SystemUtils.IS_JAVA_1_2);
            assertTrue(SystemUtils.IS_JAVA_1_3);
            assertFalse(SystemUtils.IS_JAVA_1_4);
            assertFalse(SystemUtils.IS_JAVA_1_5);
            assertFalse(SystemUtils.IS_JAVA_1_6);
            assertFalse(SystemUtils.IS_JAVA_1_7);
        } else if (javaVersion.startsWith(""1.4"")) {
            assertFalse(SystemUtils.IS_JAVA_1_1);
            assertFalse(SystemUtils.IS_JAVA_1_2);
            assertFalse(SystemUtils.IS_JAVA_1_3);
            assertTrue(SystemUtils.IS_JAVA_1_4);
            assertFalse(SystemUtils.IS_JAVA_1_5);
            assertFalse(SystemUtils.IS_JAVA_1_6);
            assertFalse(SystemUtils.IS_JAVA_1_7);
        } else if (javaVersion.startsWith(""1.5"")) {
            assertFalse(SystemUtils.IS_JAVA_1_1);
            assertFalse(SystemUtils.IS_JAVA_1_2);
            assertFalse(SystemUtils.IS_JAVA_1_3);
            assertFalse(SystemUtils.IS_JAVA_1_4);
            assertTrue(SystemUtils.IS_JAVA_1_5);
            assertFalse(SystemUtils.IS_JAVA_1_6);
            assertFalse(SystemUtils.IS_JAVA_1_7);
        } else if (javaVersion.startsWith(""1.6"")) {
            assertFalse(SystemUtils.IS_JAVA_1_1);
            assertFalse(SystemUtils.IS_JAVA_1_2);
            assertFalse(SystemUtils.IS_JAVA_1_3);
            assertFalse(SystemUtils.IS_JAVA_1_4);
            assertFalse(SystemUtils.IS_JAVA_1_5);
            assertTrue(SystemUtils.IS_JAVA_1_6);
            assertFalse(SystemUtils.IS_JAVA_1_7);
        } else {
            System.out.println(""Can't test IS_JAVA value: ""+javaVersion);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5243]])
108,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testEmptyArrayCreation(),"    @Test
    public void testEmptyArrayCreation()
    {
        final String[] array = ArrayUtils.<String>toArray();
        assertEquals(0, array.length);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5243]])
784,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsIsTest.java,org.apache.commons.lang3.StringUtilsIsTest.testIsAlphanumericSpace(),"    @Test
    public void testIsAlphanumericSpace() {
        assertFalse(StringUtils.isAlphanumericSpace(null));
        assertTrue(StringUtils.isAlphanumericSpace(""""));
        assertTrue(StringUtils.isAlphanumericSpace("" ""));
        assertTrue(StringUtils.isAlphanumericSpace(""a""));
        assertTrue(StringUtils.isAlphanumericSpace(""A""));
        assertTrue(StringUtils.isAlphanumericSpace(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));
        assertTrue(StringUtils.isAlphanumericSpace(""ham kso""));
        assertTrue(StringUtils.isAlphanumericSpace(""1""));
        assertTrue(StringUtils.isAlphanumericSpace(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));
        assertFalse(StringUtils.isAlphanumericSpace(""_""));
        assertFalse(StringUtils.isAlphanumericSpace(""hkHKHik*khbkuh""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5239]])
600,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testMax(),"    @Test
    public void testMax() {
        final Calendar calendar = Calendar.getInstance();
        final Date nonNullComparable1 = calendar.getTime();
        final Date nonNullComparable2 = calendar.getTime();
        final String[] nullAray = null;
        
        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );
        final Date minComparable = calendar.getTime();
        
        assertNotSame( nonNullComparable1, nonNullComparable2 );
        
        assertNull(ObjectUtils.max( (String) null ) );
        assertNull(ObjectUtils.max( nullAray ) );
        assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) );
        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, null ) );
        assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1, null ) );
        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, nonNullComparable2 ) );
        assertSame( nonNullComparable2, ObjectUtils.max( nonNullComparable2, nonNullComparable1 ) );
        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, minComparable ) );
        assertSame( nonNullComparable1, ObjectUtils.max( minComparable, nonNullComparable1 ) );
        assertSame( nonNullComparable1, ObjectUtils.max( null, minComparable, null, nonNullComparable1 ) );

        assertNull( ObjectUtils.max((String)null, (String)null) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5236]])
451,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses2D(),"    @Test
    public void testGetClassWithArrayClasses2D() throws Exception {
        assertGetClassReturnsClass( String[][].class );
        assertGetClassReturnsClass( int[][].class );
        assertGetClassReturnsClass( long[][].class );
        assertGetClassReturnsClass( short[][].class );
        assertGetClassReturnsClass( byte[][].class );
        assertGetClassReturnsClass( char[][].class );
        assertGetClassReturnsClass( float[][].class );
        assertGetClassReturnsClass( double[][].class );
        assertGetClassReturnsClass( boolean[][].class );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5235]])
857,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString(),"    @Test
    public void testRightPad_StringIntString() {
        assertEquals(null, StringUtils.rightPad(null, 5, ""-+""));
        assertEquals(""     "", StringUtils.rightPad("""", 5, "" ""));
        assertEquals(null, StringUtils.rightPad(null, 8, null));
        assertEquals(""abc-+-+"", StringUtils.rightPad(""abc"", 7, ""-+""));
        assertEquals(""abc-+~"", StringUtils.rightPad(""abc"", 6, ""-+~""));
        assertEquals(""abc-+"", StringUtils.rightPad(""abc"", 5, ""-+~""));
        assertEquals(""abc"", StringUtils.rightPad(""abc"", 2, "" ""));
        assertEquals(""abc"", StringUtils.rightPad(""abc"", -1, "" ""));
        assertEquals(""abc  "", StringUtils.rightPad(""abc"", 5, null));
        assertEquals(""abc  "", StringUtils.rightPad(""abc"", 5, """"));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5234]])
922,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripEnd_StringString(),"    @Test
    public void testStripEnd_StringString() {
        // null stripEnd
        assertEquals(null, StringUtils.stripEnd(null, null));
        assertEquals("""", StringUtils.stripEnd("""", null));
        assertEquals("""", StringUtils.stripEnd(""        "", null));
        assertEquals(""  abc"", StringUtils.stripEnd(""  abc  "", null));
        assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE, 
            StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));

        // """" stripEnd
        assertEquals(null, StringUtils.stripEnd(null, """"));
        assertEquals("""", StringUtils.stripEnd("""", """"));
        assertEquals(""        "", StringUtils.stripEnd(""        "", """"));
        assertEquals(""  abc  "", StringUtils.stripEnd(""  abc  "", """"));
        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, """"));
        
        // "" "" stripEnd
        assertEquals(null, StringUtils.stripEnd(null, "" ""));
        assertEquals("""", StringUtils.stripEnd("""", "" ""));
        assertEquals("""", StringUtils.stripEnd(""        "", "" ""));
        assertEquals(""  abc"", StringUtils.stripEnd(""  abc  "", "" ""));
        
        // ""ab"" stripEnd
        assertEquals(null, StringUtils.stripEnd(null, ""ab""));
        assertEquals("""", StringUtils.stripEnd("""", ""ab""));
        assertEquals(""        "", StringUtils.stripEnd(""        "", ""ab""));
        assertEquals(""  abc  "", StringUtils.stripEnd(""  abc  "", ""ab""));
        assertEquals(""abc"", StringUtils.stripEnd(""abcabab"", ""ab""));
        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, """"));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5233]])
404,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testIsAscii_char(),"    @Test
    public void testIsAscii_char() {
        assertTrue(CharUtils.isAscii('a'));
        assertTrue(CharUtils.isAscii('A'));
        assertTrue(CharUtils.isAscii('3'));
        assertTrue(CharUtils.isAscii('-'));
        assertTrue(CharUtils.isAscii('\n'));
        assertFalse(CharUtils.isAscii(CHAR_COPY));
       
        for (int i = 0; i < 128; i++) {
            if (i < 128) {
                assertTrue(CharUtils.isAscii((char) i));
            } else {
                assertFalse(CharUtils.isAscii((char) i));
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5232]])
607,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian_nullComparator(),"    @Test(expected = NullPointerException.class)
    public void testComparatorMedian_nullComparator() {
        ObjectUtils.median((Comparator<CharSequence>) null, new NonComparableCharSequence(""foo""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5227]])
706,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeUnknownEntity(),"    @Test
    public void testUnescapeUnknownEntity() throws Exception {
        assertEquals(""&zzzz;"", StringEscapeUtils.unescapeHtml4(""&zzzz;""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5227]])
616,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testPossibleCloneOfCloneable(),"    @Test
    public void testPossibleCloneOfCloneable() {
        final CloneableString string = new CloneableString(""apache"");
        final CloneableString stringClone = ObjectUtils.cloneIfPossible(string);
        assertEquals(""apache"", stringClone.getValue());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5224]])
927,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testGetJavaIoTmpDir(),"    @Test
    public void testGetJavaIoTmpDir() {
        final File dir = SystemUtils.getJavaIoTmpDir();
        Assert.assertNotNull(dir);
        Assert.assertTrue(dir.exists());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5224]])
979,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testMatchesPattern_withMessage(),"    @Test
    public void testMatchesPattern_withMessage()
    {
        final CharSequence str = ""hi"";
        Validate.matchesPattern(str, ""[a-z]*"", ""Does not match"");
        try
        {
            Validate.matchesPattern(str, ""[0-9]*"", ""Does not match"");
            fail(""Expecting IllegalArgumentException"");
        }
        catch (final IllegalArgumentException e)
        {
            assertEquals(""Does not match"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5224]])
458,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testShowJavaBug(),"    @Test
    public void testShowJavaBug() throws Exception {
        // Tests with Collections$UnmodifiableSet
        final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());
        final Method isEmptyMethod = set.getClass().getMethod(""isEmpty"",  new Class[0]);
        try {
            isEmptyMethod.invoke(set, new Object[0]);
            fail(""Failed to throw IllegalAccessException as expected"");
        } catch(final IllegalAccessException iae) {
            // expected
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5223]])
980,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testInclusiveBetween(),"    @Test
    public void testInclusiveBetween()
    {
        Validate.inclusiveBetween(""a"", ""c"", ""b"");
        Validate.inclusiveBetween(0, 2, 1);
        Validate.inclusiveBetween(0, 2, 2);
        try {
            Validate.inclusiveBetween(0, 5, 6);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException e) {
            assertEquals(""The value 6 is not in the specified inclusive range of 0 to 5"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5222]])
129,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShort(),"    @Test
    public void testNullToEmptyShort() {
        // Test null handling
        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null));
        // Test valid array handling
        final short[] original = new short[] {1, 2};
        assertEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final short[] empty = new short[]{};
        final short[] result = ArrayUtils.nullToEmpty(empty);
        assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5215]])
909,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testPrependIfMissingIgnoreCase(),"    @Test
    public void testPrependIfMissingIgnoreCase() {
        assertEquals(""prependIfMissingIgnoreCase(null,null)"", null, StringUtils.prependIfMissingIgnoreCase(null,null));
        assertEquals(""prependIfMissingIgnoreCase(abc,null)"", ""abc"", StringUtils.prependIfMissingIgnoreCase(""abc"",null));
        assertEquals(""prependIfMissingIgnoreCase(\""\"",xyz)"", ""xyz"", StringUtils.prependIfMissingIgnoreCase("""",""xyz""));
        assertEquals(""prependIfMissingIgnoreCase(abc,xyz)"", ""xyzabc"", StringUtils.prependIfMissingIgnoreCase(""abc"",""xyz""));
        assertEquals(""prependIfMissingIgnoreCase(xyzabc,xyz)"", ""xyzabc"", StringUtils.prependIfMissingIgnoreCase(""xyzabc"",""xyz""));
        assertEquals(""prependIfMissingIgnoreCase(XYZabc,xyz)"", ""XYZabc"", StringUtils.prependIfMissingIgnoreCase(""XYZabc"",""xyz""));

        assertEquals(""prependIfMissingIgnoreCase(null,null null)"", null, StringUtils.prependIfMissingIgnoreCase(null,null,(CharSequence[]) null));
        assertEquals(""prependIfMissingIgnoreCase(abc,null,null)"", ""abc"", StringUtils.prependIfMissingIgnoreCase(""abc"",null,(CharSequence[]) null));
        assertEquals(""prependIfMissingIgnoreCase(\""\"",xyz,null)"", ""xyz"", StringUtils.prependIfMissingIgnoreCase("""",""xyz"",(CharSequence[]) null));
        assertEquals(""prependIfMissingIgnoreCase(abc,xyz,{null})"",""xyzabc"", StringUtils.prependIfMissingIgnoreCase(""abc"",""xyz"",new CharSequence[]{null}));
        assertEquals(""prependIfMissingIgnoreCase(abc,xyz,\""\"")"",""abc"", StringUtils.prependIfMissingIgnoreCase(""abc"",""xyz"",""""));
        assertEquals(""prependIfMissingIgnoreCase(abc,xyz,mno)"",""xyzabc"", StringUtils.prependIfMissingIgnoreCase(""abc"",""xyz"",""mno""));
        assertEquals(""prependIfMissingIgnoreCase(xyzabc,xyz,mno)"", ""xyzabc"", StringUtils.prependIfMissingIgnoreCase(""xyzabc"",""xyz"",""mno""));
        assertEquals(""prependIfMissingIgnoreCase(mnoabc,xyz,mno)"", ""mnoabc"", StringUtils.prependIfMissingIgnoreCase(""mnoabc"",""xyz"",""mno""));
        assertEquals(""prependIfMissingIgnoreCase(XYZabc,xyz,mno)"", ""XYZabc"", StringUtils.prependIfMissingIgnoreCase(""XYZabc"",""xyz"",""mno""));
        assertEquals(""prependIfMissingIgnoreCase(MNOabc,xyz,mno)"", ""MNOabc"", StringUtils.prependIfMissingIgnoreCase(""MNOabc"",""xyz"",""mno""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5211]])
285,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer(),"    @Test
    public void test_toBooleanObject_Integer_Integer_Integer_Integer() {
        final Integer six = Integer.valueOf(6);
        final Integer seven = Integer.valueOf(7);
        final Integer eight = Integer.valueOf(8);

        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight));
        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight));
        assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null));

        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight));
        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight));
        assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5210]])
130,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyChar(),"    @Test
    public void testNullToEmptyChar() {
        // Test null handling
        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.nullToEmpty((char[]) null));
        // Test valid array handling
        final char[] original = new char[] {'a', 'b'};
        assertEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final char[] empty = new char[]{};
        final char[] result = ArrayUtils.nullToEmpty(empty);
        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5200]])
650,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testGetMinimum(),"    @Test
    public void testGetMinimum() {
        assertEquals(10, (int) intRange.getMinimum());
        assertEquals(10L, (long) longRange.getMinimum());
        assertEquals(10f, floatRange.getMinimum(), 0.00001f);
        assertEquals(10d, doubleRange.getMinimum(), 0.00001d);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5199]])
34,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArrayOutOfBoundsIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllBooleanArrayOutOfBoundsIndex() {
        ArrayUtils.removeAll(new boolean[] { true, false }, 2);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5198]])
867,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString(),"    @Test
    public void testCenter_StringIntString() {
        assertEquals(null, StringUtils.center(null, 4, null));
        assertEquals(null, StringUtils.center(null, -1, "" ""));
        assertEquals(null, StringUtils.center(null, 4, "" ""));
        assertEquals(""    "", StringUtils.center("""", 4, "" ""));
        assertEquals(""ab"", StringUtils.center(""ab"", 0, "" ""));
        assertEquals(""ab"", StringUtils.center(""ab"", -1, "" ""));
        assertEquals(""ab"", StringUtils.center(""ab"", 1, "" ""));
        assertEquals(""    "", StringUtils.center("""", 4, "" ""));
        assertEquals("" ab "", StringUtils.center(""ab"", 4, "" ""));
        assertEquals(""abcd"", StringUtils.center(""abcd"", 2, "" ""));
        assertEquals("" a  "", StringUtils.center(""a"", 4, "" ""));
        assertEquals(""yayz"", StringUtils.center(""a"", 4, ""yz""));
        assertEquals(""yzyayzy"", StringUtils.center(""a"", 7, ""yz""));
        assertEquals(""  abc  "", StringUtils.center(""abc"", 7, null));
        assertEquals(""  abc  "", StringUtils.center(""abc"", 7, """"));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5197]])
560,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/JavaVersionTest.java,org.apache.commons.lang3.JavaVersionTest.testAtLeast(),"    @Test
    public void testAtLeast() {
        assertFalse(""1.2 at least 1.5 passed"", JAVA_1_2.atLeast(JAVA_1_5));
        assertTrue(""1.5 at least 1.2 failed"", JAVA_1_5.atLeast(JAVA_1_2));
        assertFalse(""1.6 at least 1.7 passed"", JAVA_1_6.atLeast(JAVA_1_7));

        assertTrue(""0.9 at least 1.5 failed"", JAVA_0_9.atLeast(JAVA_1_5));
        assertFalse(""0.9 at least 1.6 passed"", JAVA_0_9.atLeast(JAVA_1_6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5196]])
929,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testGetUserHome(),"    @Test
    public void testGetUserHome() {
        final File dir = SystemUtils.getUserHome();
        Assert.assertNotNull(dir);
        Assert.assertTrue(dir.exists());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5196]])
850,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testOverlay_StringStringIntInt(),"    @Test
    public void testOverlay_StringStringIntInt() {
        assertEquals(null, StringUtils.overlay(null, null, 2, 4));
        assertEquals(null, StringUtils.overlay(null, null, -2, -4));
        
        assertEquals("""", StringUtils.overlay("""", null, 0, 0));
        assertEquals("""", StringUtils.overlay("""", """", 0, 0));
        assertEquals(""zzzz"", StringUtils.overlay("""", ""zzzz"", 0, 0));
        assertEquals(""zzzz"", StringUtils.overlay("""", ""zzzz"", 2, 4));
        assertEquals(""zzzz"", StringUtils.overlay("""", ""zzzz"", -2, -4));
        
        assertEquals(""abef"", StringUtils.overlay(""abcdef"", null, 2, 4));
        assertEquals(""abef"", StringUtils.overlay(""abcdef"", null, 4, 2));
        assertEquals(""abef"", StringUtils.overlay(""abcdef"", """", 2, 4));
        assertEquals(""abef"", StringUtils.overlay(""abcdef"", """", 4, 2));
        assertEquals(""abzzzzef"", StringUtils.overlay(""abcdef"", ""zzzz"", 2, 4));
        assertEquals(""abzzzzef"", StringUtils.overlay(""abcdef"", ""zzzz"", 4, 2));
        
        assertEquals(""zzzzef"", StringUtils.overlay(""abcdef"", ""zzzz"", -1, 4));
        assertEquals(""zzzzef"", StringUtils.overlay(""abcdef"", ""zzzz"", 4, -1));
        assertEquals(""zzzzabcdef"", StringUtils.overlay(""abcdef"", ""zzzz"", -2, -1));
        assertEquals(""zzzzabcdef"", StringUtils.overlay(""abcdef"", ""zzzz"", -1, -2));
        assertEquals(""abcdzzzz"", StringUtils.overlay(""abcdef"", ""zzzz"", 4, 10));
        assertEquals(""abcdzzzz"", StringUtils.overlay(""abcdef"", ""zzzz"", 10, 4));
        assertEquals(""abcdefzzzz"", StringUtils.overlay(""abcdef"", ""zzzz"", 8, 10));
        assertEquals(""abcdefzzzz"", StringUtils.overlay(""abcdef"", ""zzzz"", 10, 8));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5192]])
907,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testAppendIfMissingIgnoreCase(),"    @Test
    public void testAppendIfMissingIgnoreCase() {
        assertEquals(""appendIfMissingIgnoreCase(null,null)"", null, StringUtils.appendIfMissingIgnoreCase(null,null));
        assertEquals(""appendIfMissingIgnoreCase(abc,null)"", ""abc"", StringUtils.appendIfMissingIgnoreCase(""abc"",null));
        assertEquals(""appendIfMissingIgnoreCase(\""\"",xyz)"", ""xyz"", StringUtils.appendIfMissingIgnoreCase("""",""xyz""));
        assertEquals(""appendIfMissingIgnoreCase(abc,xyz)"", ""abcxyz"", StringUtils.appendIfMissingIgnoreCase(""abc"",""xyz""));
        assertEquals(""appendIfMissingIgnoreCase(abcxyz,xyz)"", ""abcxyz"", StringUtils.appendIfMissingIgnoreCase(""abcxyz"",""xyz""));
        assertEquals(""appendIfMissingIgnoreCase(abcXYZ,xyz)"", ""abcXYZ"", StringUtils.appendIfMissingIgnoreCase(""abcXYZ"",""xyz""));

        assertEquals(""appendIfMissingIgnoreCase(null,null,null)"", null, StringUtils.appendIfMissingIgnoreCase(null,null,(CharSequence[]) null));
        assertEquals(""appendIfMissingIgnoreCase(abc,null,null)"", ""abc"", StringUtils.appendIfMissingIgnoreCase(""abc"",null,(CharSequence[]) null));
        assertEquals(""appendIfMissingIgnoreCase(\""\"",xyz,null)"", ""xyz"", StringUtils.appendIfMissingIgnoreCase("""",""xyz"",(CharSequence[]) null));
        assertEquals(""appendIfMissingIgnoreCase(abc,xyz,{null})"", ""abcxyz"", StringUtils.appendIfMissingIgnoreCase(""abc"",""xyz"",new CharSequence[]{null}));
        assertEquals(""appendIfMissingIgnoreCase(abc,xyz,\""\"")"", ""abc"", StringUtils.appendIfMissingIgnoreCase(""abc"",""xyz"",""""));
        assertEquals(""appendIfMissingIgnoreCase(abc,xyz,mno)"", ""abcxyz"", StringUtils.appendIfMissingIgnoreCase(""abc"",""xyz"",""mno""));
        assertEquals(""appendIfMissingIgnoreCase(abcxyz,xyz,mno)"", ""abcxyz"", StringUtils.appendIfMissingIgnoreCase(""abcxyz"",""xyz"",""mno""));       
        assertEquals(""appendIfMissingIgnoreCase(abcmno,xyz,mno)"", ""abcmno"", StringUtils.appendIfMissingIgnoreCase(""abcmno"",""xyz"",""mno""));       
        assertEquals(""appendIfMissingIgnoreCase(abcXYZ,xyz,mno)"", ""abcXYZ"", StringUtils.appendIfMissingIgnoreCase(""abcXYZ"",""xyz"",""mno""));
        assertEquals(""appendIfMissingIgnoreCase(abcMNO,xyz,mno)"", ""abcMNO"", StringUtils.appendIfMissingIgnoreCase(""abcMNO"",""xyz"",""mno""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5190]])
263,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testSet(),"    @Test
    public void testSet() {
        assertEquals(bf_multi.set(0), 0x3F80);
        assertEquals(bf_single.set(0), 0x4000);
        assertEquals(bf_zero.set(0), 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5189]])
920,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStrip_StringString(),"    @Test
    public void testStrip_StringString() {
        // null strip
        assertEquals(null, StringUtils.strip(null, null));
        assertEquals("""", StringUtils.strip("""", null));
        assertEquals("""", StringUtils.strip(""        "", null));
        assertEquals(""abc"", StringUtils.strip(""  abc  "", null));
        assertEquals(StringUtilsTest.NON_WHITESPACE, 
            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));

        // """" strip
        assertEquals(null, StringUtils.strip(null, """"));
        assertEquals("""", StringUtils.strip("""", """"));
        assertEquals(""        "", StringUtils.strip(""        "", """"));
        assertEquals(""  abc  "", StringUtils.strip(""  abc  "", """"));
        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, """"));
        
        // "" "" strip
        assertEquals(null, StringUtils.strip(null, "" ""));
        assertEquals("""", StringUtils.strip("""", "" ""));
        assertEquals("""", StringUtils.strip(""        "", "" ""));
        assertEquals(""abc"", StringUtils.strip(""  abc  "", "" ""));
        
        // ""ab"" strip
        assertEquals(null, StringUtils.strip(null, ""ab""));
        assertEquals("""", StringUtils.strip("""", ""ab""));
        assertEquals(""        "", StringUtils.strip(""        "", ""ab""));
        assertEquals(""  abc  "", StringUtils.strip(""  abc  "", ""ab""));
        assertEquals(""c"", StringUtils.strip(""abcabab"", ""ab""));
        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, """"));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5189]])
775,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfAny_StringStringArray(),"    @Test
    public void testLastIndexOfAny_StringStringArray() {
        assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ...
        assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation
        assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag
        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ...
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg
        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));
        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));
        assertEquals(-1, StringUtils.lastIndexOfAny("""", new String[0]));
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""llll""}));
        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""""}));
        assertEquals(0, StringUtils.lastIndexOfAny("""", new String[] {""""}));
        assertEquals(-1, StringUtils.lastIndexOfAny("""", new String[] {""a""}));
        assertEquals(-1, StringUtils.lastIndexOfAny("""", new String[] {null}));
        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));
        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5187]])
231,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short(),"    @Test
    public void testToPrimitive_short() {
        final Short[] b = null;
        assertEquals(null, ArrayUtils.toPrimitive(b));
        
        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));
        
        assertTrue(Arrays.equals(
            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},
            ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE), 
                Short.valueOf(Short.MAX_VALUE), Short.valueOf((short)9999999)}))
        );

        try {
            ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE), null});
            fail();
        } catch (final NullPointerException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5186]])
437,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testPrimitiveToWrapper(),"    @Test
    public void testPrimitiveToWrapper() {

        // test primitive classes
        assertEquals(""boolean -> Boolean.class"",
            Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));
        assertEquals(""byte -> Byte.class"",
            Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE));
        assertEquals(""char -> Character.class"",
            Character.class, ClassUtils.primitiveToWrapper(Character.TYPE));
        assertEquals(""short -> Short.class"",
            Short.class, ClassUtils.primitiveToWrapper(Short.TYPE));
        assertEquals(""int -> Integer.class"",
            Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE));
        assertEquals(""long -> Long.class"",
            Long.class, ClassUtils.primitiveToWrapper(Long.TYPE));
        assertEquals(""double -> Double.class"",
            Double.class, ClassUtils.primitiveToWrapper(Double.TYPE));
        assertEquals(""float -> Float.class"",
            Float.class, ClassUtils.primitiveToWrapper(Float.TYPE));

        // test a few other classes
        assertEquals(""String.class -> String.class"",
            String.class, ClassUtils.primitiveToWrapper(String.class));
        assertEquals(""ClassUtils.class -> ClassUtils.class"",
            org.apache.commons.lang3.ClassUtils.class,
            ClassUtils.primitiveToWrapper(org.apache.commons.lang3.ClassUtils.class));
        assertEquals(""Void.TYPE -> Void.TYPE"",
            Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE));

        // test null
        assertNull(""null -> null"",
            ClassUtils.primitiveToWrapper(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5182]])
2,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testSameInstance(),"    @Test
    public void testSameInstance() {
        assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5180]])
540,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,"org.apache.commons.lang3.EnumUtilsTest.assertArrayEquals(long[], long...)","    private void assertArrayEquals(final long[] actual, final long... expected) {
        Assert.assertArrayEquals(expected, actual);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5179]])
127,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLong(),"    @Test
    public void testNullToEmptyLong() {
        // Test null handling
        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.nullToEmpty((long[]) null));
        // Test valid array handling
        final long[] original = new long[] {1L, 2L};
        assertEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final long[] empty = new long[]{};
        final long[] result = ArrayUtils.nullToEmpty(empty);
        assertEquals(ArrayUtils.EMPTY_LONG_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5179]])
293,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BooleanUtilsTest.java,org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_boolean_Integer_Integer(),"    @Test
    public void test_toIntegerObject_boolean_Integer_Integer() {
        final Integer six = Integer.valueOf(6);
        final Integer seven = Integer.valueOf(7);
        assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));
        assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5171]])
406,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testIsAsciiControl_char(),"    @Test
    public void testIsAsciiControl_char() {
        assertFalse(CharUtils.isAsciiControl('a'));
        assertFalse(CharUtils.isAsciiControl('A'));
        assertFalse(CharUtils.isAsciiControl('3'));
        assertFalse(CharUtils.isAsciiControl('-'));
        assertTrue(CharUtils.isAsciiControl('\n'));
        assertFalse(CharUtils.isAsciiControl(CHAR_COPY));
       
        for (int i = 0; i < 196; i++) {
            if (i < 32 || i == 127) {
                assertTrue(CharUtils.isAsciiControl((char) i));
            } else {
                assertFalse(CharUtils.isAsciiControl((char) i));
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5170]])
865,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt(),"    @Test
    public void testCenter_StringInt() {
        assertEquals(null, StringUtils.center(null, -1));
        assertEquals(null, StringUtils.center(null, 4));
        assertEquals(""    "", StringUtils.center("""", 4));
        assertEquals(""ab"", StringUtils.center(""ab"", 0));
        assertEquals(""ab"", StringUtils.center(""ab"", -1));
        assertEquals(""ab"", StringUtils.center(""ab"", 1));
        assertEquals(""    "", StringUtils.center("""", 4));
        assertEquals("" ab "", StringUtils.center(""ab"", 4));
        assertEquals(""abcd"", StringUtils.center(""abcd"", 2));
        assertEquals("" a  "", StringUtils.center(""a"", 4));
        assertEquals(""  a  "", StringUtils.center(""a"", 5));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5170]])
35,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullBooleanArray(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllNullBooleanArray() {
        ArrayUtils.removeAll((boolean[]) null, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5168]])
788,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java,org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testStartsWith(),"    @Test
    public void testStartsWith() {
        assertTrue(""startsWith(null, null)"", StringUtils.startsWith(null, (String)null));
        assertFalse(""startsWith(FOOBAR, null)"", StringUtils.startsWith(FOOBAR, (String)null));
        assertFalse(""startsWith(null, FOO)"",    StringUtils.startsWith(null, FOO));
        assertTrue(""startsWith(FOOBAR, \""\"")"",  StringUtils.startsWith(FOOBAR, """"));

        assertTrue(""startsWith(foobar, foo)"",  StringUtils.startsWith(foobar, foo));
        assertTrue(""startsWith(FOOBAR, FOO)"",  StringUtils.startsWith(FOOBAR, FOO));
        assertFalse(""startsWith(foobar, FOO)"", StringUtils.startsWith(foobar, FOO));
        assertFalse(""startsWith(FOOBAR, foo)"", StringUtils.startsWith(FOOBAR, foo));

        assertFalse(""startsWith(foo, foobar)"", StringUtils.startsWith(foo, foobar));
        assertFalse(""startsWith(foo, foobar)"", StringUtils.startsWith(bar, foobar));

        assertFalse(""startsWith(foobar, bar)"", StringUtils.startsWith(foobar, bar));
        assertFalse(""startsWith(FOOBAR, BAR)"", StringUtils.startsWith(FOOBAR, BAR));
        assertFalse(""startsWith(foobar, BAR)"", StringUtils.startsWith(foobar, BAR));
        assertFalse(""startsWith(FOOBAR, bar)"", StringUtils.startsWith(FOOBAR, bar));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5168]])
611,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testCloneOfCloneable(),"    @Test
    public void testCloneOfCloneable() {
        final CloneableString string = new CloneableString(""apache"");
        final CloneableString stringClone = ObjectUtils.clone(string);
        assertEquals(""apache"", stringClone.getValue());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5167]])
118,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testCloneBoolean(),"    @Test
    public void testCloneBoolean() {
        assertEquals(null, ArrayUtils.clone((boolean[]) null));
        final boolean[] original = new boolean[] {true, false};
        final boolean[] cloned = ArrayUtils.clone(original);
        assertTrue(Arrays.equals(original, cloned));
        assertTrue(original != cloned);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5166]])
583,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testParseAllLocales(),"    @Test
    public void testParseAllLocales() {}
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5165]])
196,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContainsChar(),"    @Test
    public void testContainsChar() {
        char[] array = null;
        assertFalse(ArrayUtils.contains(array, 'b'));
        array = new char[] { 'a', 'b', 'c', 'd', 'a' };
        assertTrue(ArrayUtils.contains(array, 'a'));
        assertTrue(ArrayUtils.contains(array, 'b'));
        assertTrue(ArrayUtils.contains(array, 'c'));
        assertTrue(ArrayUtils.contains(array, 'd'));
        assertFalse(ArrayUtils.contains(array, 'e'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5163]])
646,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testEqualsObject(),"    @Test
    public void testEqualsObject() {
        assertEquals(byteRange, byteRange);
        assertEquals(byteRange, byteRange2);
        assertEquals(byteRange2, byteRange2);
        assertTrue(byteRange.equals(byteRange));
        assertTrue(byteRange2.equals(byteRange2));
        assertTrue(byteRange3.equals(byteRange3));
        assertFalse(byteRange2.equals(byteRange3));
        assertFalse(byteRange2.equals(null));
        assertFalse(byteRange2.equals(""Ni!""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5162]])
978,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testMatchesPattern(),"    @Test
    public void testMatchesPattern()
    {
        final CharSequence str = ""hi"";
        Validate.matchesPattern(str, ""[a-z]*"");
        try
        {
            Validate.matchesPattern(str, ""[0-9]*"");
            fail(""Expecting IllegalArgumentException"");
        }
        catch (final IllegalArgumentException e)
        {
            assertEquals(""The string hi does not match the pattern [0-9]*"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5156]])
776,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOfIgnoreCase_String(),"    @Test
    public void testLastIndexOfIgnoreCase_String() {
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", null));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, """"));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("""", ""a""));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase("""", """"));
        assertEquals(8, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", """"));
        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""a""));
        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""A""));
        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""b""));
        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""B""));
        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""ab""));
        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(""aabaabaa"", ""AB""));
        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(""ab"", ""AAB""));
        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(""aab"", ""AAB""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5151]])
977,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testValidIndex_charSequence(),"    @Test
    public void testValidIndex_charSequence() {
        final CharSequence str = ""Hi"";
        Validate.validIndex(str, 0);
        Validate.validIndex(str, 1);
        try {
            Validate.validIndex(str, -1);
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""The validated character sequence index is invalid: -1"", ex.getMessage());
        }
        try {
            Validate.validIndex(str, 2);
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""The validated character sequence index is invalid: 2"", ex.getMessage());
        }
        
        final String input = ""Hi"";
        final String test = Validate.validIndex(input, 0);
        assertSame(input, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5151]])
372,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations(),"    @Test
    public void testConstructor_String_oddCombinations() {
        CharSet set;
        CharRange[] array = null;
        
        set = CharSet.getInstance(""a-^c"");
        array = set.getCharRanges();
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '^'))); // ""a-^""
        assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); // ""c""
        assertFalse(set.contains('b'));
        assertTrue(set.contains('^'));  
        assertTrue(set.contains('_')); // between ^ and a
        assertTrue(set.contains('c'));  
        
        set = CharSet.getInstance(""^a-^c"");
        array = set.getCharRanges();
        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); // ""^a-^""
        assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); // ""c""
        assertTrue(set.contains('b'));
        assertFalse(set.contains('^'));  
        assertFalse(set.contains('_')); // between ^ and a
        
        set = CharSet.getInstance(""a- ^-- ""); //contains everything
        array = set.getCharRanges();
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', ' '))); // ""a- ""
        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); // ""^-- ""
        assertTrue(set.contains('#'));
        assertTrue(set.contains('^'));
        assertTrue(set.contains('a'));
        assertTrue(set.contains('*'));
        assertTrue(set.contains('A'));
        
        set = CharSet.getInstance(""^-b"");
        array = set.getCharRanges();
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('^','b'))); // ""^-b""
        assertTrue(set.contains('b'));
        assertTrue(set.contains('_')); // between ^ and a
        assertFalse(set.contains('A'));
        assertTrue(set.contains('^')); 
        
        set = CharSet.getInstance(""b-^"");
        array = set.getCharRanges();
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('^','b'))); // ""b-^""
        assertTrue(set.contains('b'));
        assertTrue(set.contains('^'));
        assertTrue(set.contains('a')); // between ^ and b
        assertFalse(set.contains('c')); 
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5146]])
695,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJava(),"    @Test
    public void testEscapeJava() throws IOException {
        assertEquals(null, StringEscapeUtils.escapeJava(null));
        try {
            StringEscapeUtils.ESCAPE_JAVA.translate(null, null);
            fail();
        } catch (final IOException ex) {
            fail();
        } catch (final IllegalArgumentException ex) {
        }
        try {
            StringEscapeUtils.ESCAPE_JAVA.translate("""", null);
            fail();
        } catch (final IOException ex) {
            fail();
        } catch (final IllegalArgumentException ex) {
        }
        
        assertEscapeJava(""empty string"", """", """");
        assertEscapeJava(FOO, FOO);
        assertEscapeJava(""tab"", ""\\t"", ""\t"");
        assertEscapeJava(""backslash"", ""\\\\"", ""\\"");
        assertEscapeJava(""single quote should not be escaped"", ""'"", ""'"");
        assertEscapeJava(""\\\\\\b\\t\\r"", ""\\\b\t\r"");
        assertEscapeJava(""\\u1234"", ""\u1234"");
        assertEscapeJava(""\\u0234"", ""\u0234"");
        assertEscapeJava(""\\u00EF"", ""\u00ef"");
        assertEscapeJava(""\\u0001"", ""\u0001"");
        assertEscapeJava(""Should use capitalized Unicode hex"", ""\\uABCD"", ""\uabcd"");

        assertEscapeJava(""He didn't say, \\\""stop!\\\"""",
                ""He didn't say, \""stop!\"""");
        assertEscapeJava(""non-breaking space"", ""This space is non-breaking:"" + ""\\u00A0"",
                ""This space is non-breaking:\u00a0"");
        assertEscapeJava(""\\uABCD\\u1234\\u012C"",
                ""\uABCD\u1234\u012C"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5145]])
637,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testLang100(),"    @Test
    public void testLang100() throws Exception {
        final int size = 5000;
        final String encoding = ""UTF-8"";
        final String orig = RandomStringUtils.random(size);
        final byte[] bytes = orig.getBytes(encoding);
        final String copy = new String(bytes, encoding);

        // for a verbose compare:
        for (int i=0; i < orig.length() && i < copy.length(); i++) {
            final char o = orig.charAt(i);
            final char c = copy.charAt(i);
            assertEquals(""differs at "" + i + ""("" + Integer.toHexString(new Character(o).hashCode()) + "","" +
            Integer.toHexString(new Character(c).hashCode()) + "")"", o, c);
        }
        // compare length also
        assertEquals(orig.length(), copy.length());
        // just to be complete
        assertEquals(orig, copy);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5145]])
367,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testConstructor_String_simple(),"    @Test
    public void testConstructor_String_simple() {
        CharSet set;
        CharRange[] array;
        
        set = CharSet.getInstance((String) null);
        array = set.getCharRanges();
        assertEquals(""[]"", set.toString());
        assertEquals(0, array.length);
        
        set = CharSet.getInstance("""");
        array = set.getCharRanges();
        assertEquals(""[]"", set.toString());
        assertEquals(0, array.length);
        
        set = CharSet.getInstance(""a"");
        array = set.getCharRanges();
        assertEquals(""[a]"", set.toString());
        assertEquals(1, array.length);
        assertEquals(""a"", array[0].toString());
        
        set = CharSet.getInstance(""^a"");
        array = set.getCharRanges();
        assertEquals(""[^a]"", set.toString());
        assertEquals(1, array.length);
        assertEquals(""^a"", array[0].toString());
        
        set = CharSet.getInstance(""a-e"");
        array = set.getCharRanges();
        assertEquals(""[a-e]"", set.toString());
        assertEquals(1, array.length);
        assertEquals(""a-e"", array[0].toString());
        
        set = CharSet.getInstance(""^a-e"");
        array = set.getCharRanges();
        assertEquals(""[^a-e]"", set.toString());
        assertEquals(1, array.length);
        assertEquals(""^a-e"", array[0].toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5145]])
689,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testClone(),"    @Test
    public void testClone() throws Exception {
        final Object test = SerializationUtils.clone(iMap);
        assertNotNull(test);
        assertTrue(test instanceof HashMap<?,?>);
        assertTrue(test != iMap);
        final HashMap<?, ?> testMap = (HashMap<?, ?>) test;
        assertEquals(iString, testMap.get(""FOO""));
        assertTrue(iString != testMap.get(""FOO""));
        assertEquals(iInteger, testMap.get(""BAR""));
        assertTrue(iInteger != testMap.get(""BAR""));
        assertEquals(iMap, testMap);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5144]])
547,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,org.apache.commons.lang3.HashSetvBitSetTest.testTimes(),"    @Test
    public void testTimes() {
        timeHashSet(10); // warmup
        timeBitSet(10); // warmup
        long timeDiff = printTimes(0);
        timeDiff += printTimes(5);
        timeDiff += printTimes(10);
        timeDiff += printTimes(200);
        timeDiff += printTimes(50);
        timeDiff += printTimes(100);
        timeDiff += printTimes(1000);
        timeDiff += printTimes(2000);
        Assert.assertTrue(timeDiff <= 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5144]])
449,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays(),"    @Test
    public void testGetClassByNormalNameArrays() throws ClassNotFoundException {
        assertEquals( int[].class, ClassUtils.getClass( ""int[]"" ) );
        assertEquals( long[].class, ClassUtils.getClass( ""long[]"" ) );
        assertEquals( short[].class, ClassUtils.getClass( ""short[]"" ) );
        assertEquals( byte[].class, ClassUtils.getClass( ""byte[]"" ) );
        assertEquals( char[].class, ClassUtils.getClass( ""char[]"" ) );
        assertEquals( float[].class, ClassUtils.getClass( ""float[]"" ) );
        assertEquals( double[].class, ClassUtils.getClass( ""double[]"" ) );
        assertEquals( boolean[].class, ClassUtils.getClass( ""boolean[]"" ) );
        assertEquals( String[].class, ClassUtils.getClass( ""java.lang.String[]"" ) );
        assertEquals( java.util.Map.Entry[].class, ClassUtils.getClass( ""java.util.Map.Entry[]"" ) );
        assertEquals( java.util.Map.Entry[].class, ClassUtils.getClass( ""java.util.Map$Entry[]"" ) );
        assertEquals( java.util.Map.Entry[].class, ClassUtils.getClass( ""[Ljava.util.Map.Entry;"" ) );
        assertEquals( java.util.Map.Entry[].class, ClassUtils.getClass( ""[Ljava.util.Map$Entry;"" ) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5143]])
223,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_boolean_boolean(),"    @Test
    public void testToPrimitive_boolean_boolean() {
        assertEquals(null, ArrayUtils.toPrimitive(null, false));
        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));
        assertTrue(Arrays.equals(
            new boolean[] {true, false, true},
            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false))
        );
        assertTrue(Arrays.equals(
            new boolean[] {true, false, false},
            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, false))
        );
        assertTrue(Arrays.equals(
            new boolean[] {true, true, false},
            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, true))
        );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5134]])
667,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testConstructor(),"    @Test
    public void testConstructor() {
        assertNotNull(new SerializationUtils());
        final Constructor<?>[] cons = SerializationUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertTrue(Modifier.isPublic(cons[0].getModifiers()));
        assertTrue(Modifier.isPublic(SerializationUtils.class.getModifiers()));
        assertFalse(Modifier.isFinal(SerializationUtils.class.getModifiers()));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5132]])
357,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testContains_Char(),"    @Test
    public void testContains_Char() {
        CharRange range = CharRange.is('c');
        assertFalse(range.contains('b'));
        assertTrue(range.contains('c'));
        assertFalse(range.contains('d'));
        assertFalse(range.contains('e'));

        range = CharRange.isIn('c', 'd');
        assertFalse(range.contains('b'));
        assertTrue(range.contains('c'));
        assertTrue(range.contains('d'));
        assertFalse(range.contains('e'));

        range = CharRange.isIn('d', 'c');
        assertFalse(range.contains('b'));
        assertTrue(range.contains('c'));
        assertTrue(range.contains('d'));
        assertFalse(range.contains('e'));

        range = CharRange.isNotIn('c', 'd');
        assertTrue(range.contains('b'));
        assertFalse(range.contains('c'));
        assertFalse(range.contains('d'));
        assertTrue(range.contains('e'));
        assertTrue(range.contains((char) 0));
        assertTrue(range.contains(Character.MAX_VALUE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5131]])
154,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameLengthBoolean(),"    @Test
    public void testSameLengthBoolean() {
        final boolean[] nullArray = null;
        final boolean[] emptyArray = new boolean[0];
        final boolean[] oneArray = new boolean[] {true};
        final boolean[] twoArray = new boolean[] {true, false};
        
        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
        
        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5128]])
581,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testLang328(),"    @Test
    public void testLang328() {
        assertValidToLocale(""fr__P"", ""fr"", """", ""P"");
        assertValidToLocale(""fr__POSIX"", ""fr"", """", ""POSIX"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5126]])
261,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testClear(),"    @Test
    public void testClear() {
        assertEquals(bf_multi.clear(-1), 0xFFFFC07F);
        assertEquals(bf_single.clear(-1), 0xFFFFBFFF);
        assertEquals(bf_zero.clear(-1), 0xFFFFFFFF);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5121]])
507,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testShortToBinary(),"    @Test
    public void testShortToBinary() {
        assertBinaryEquals(
            new boolean[]{}, Conversion.shortToBinary((short)0x0000, 0, new boolean[]{}, 0, 0));
        assertBinaryEquals(
            new boolean[]{},
            Conversion.shortToBinary((short)0x0000, 100, new boolean[]{}, 0, 0));
        assertBinaryEquals(
            new boolean[]{},
            Conversion.shortToBinary((short)0x0000, 0, new boolean[]{}, 100, 0));
        assertBinaryEquals(
            new boolean[69], Conversion.shortToBinary((short)0xCDEF, 0, new boolean[69], 0, 0));
        assertBinaryEquals(
            new boolean[]{
                true, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 1));
        assertBinaryEquals(
            new boolean[]{
                true, true, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 2));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 3));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, true, false, true, true, true, true, false, true, true,
                false, false, true, false, false, false, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 15));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, true, false, true, true, true, true, false, true, true,
                false, false, true, true, false, false, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 16));
        assertBinaryEquals(
            new boolean[]{
                false, false, true, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 2, 1));
        assertBinaryEquals(
            new boolean[]{
                false, false, true, true, true, true, false, true, true, true, true, false,
                true, true, false, false, true, true, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 2, 16));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, false, true, true, true, true, false, true, true, false,
                false, true, true, false, false, false, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 1, new boolean[21], 0, 15));
        assertBinaryEquals(
            new boolean[]{
                true, true, false, true, true, true, true, false, true, true, false, false,
                true, true, false, false, false, false, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 2, new boolean[21], 0, 14));
        // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,
        // true, true, false, true, true, false, false, true, false, false, false, false,
        // false},Conversion.shortToBinary((short)0xCDEF, 2,new boolean[21],
        // 3,15));//rejected by
        // assertion
        assertBinaryEquals(
            new boolean[]{
                false, false, false, true, true, false, true, true, true, true, false, true,
                true, false, false, true, true, false, false, false, false},
            Conversion.shortToBinary((short)0xCDEF, 2, new boolean[21], 3, 14));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5120]])
338,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharEncodingTest.java,org.apache.commons.lang3.CharEncodingTest.assertSupportedEncoding(java.lang.String),"    private void assertSupportedEncoding(final String name) {
        assertTrue(""Encoding should be supported: "" + name, CharEncoding.isSupported(name));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5116]])
970,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNoNullElementsCollection2(),"    @Test
    public void testNoNullElementsCollection2() {
        final List<String> coll = new ArrayList<String>();
        coll.add(""a"");
        coll.add(""b"");
        Validate.noNullElements(coll, ""MSG"");
        try {
            Validate.noNullElements((Collection<?>) null, ""MSG"");
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""The validated object is null"", ex.getMessage());
        }
        coll.set(1, null);
        try {
            Validate.noNullElements(coll, ""MSG"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        
        coll.set(1, ""b"");
        final List<String> test = Validate.noNullElements(coll, ""Message"");
        assertSame(coll, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5111]])
969,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNoNullElementsCollection1(),"    @Test
    public void testNoNullElementsCollection1() {
        final List<String> coll = new ArrayList<String>();
        coll.add(""a"");
        coll.add(""b"");
        Validate.noNullElements(coll);
        try {
            Validate.noNullElements((Collection<?>) null);
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""The validated object is null"", ex.getMessage());
        }
        coll.set(1, null);
        try {
            Validate.noNullElements(coll);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""The validated collection contains null element at index: 1"", ex.getMessage());
        }
        
        coll.set(1, ""b"");
        final List<String> test = Validate.noNullElements(coll);
        assertSame(coll, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5111]])
923,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripAll(),"    @Test
    public void testStripAll() {
        // test stripAll method, merely an array version of the above strip
        final String[] empty = new String[0];
        final String[] fooSpace = new String[] { ""  ""+FOO+""  "", ""  ""+FOO, FOO+""  "" };
        final String[] fooDots = new String[] { ""..""+FOO+"".."", ""..""+FOO, FOO+"".."" };
        final String[] foo = new String[] { FOO, FOO, FOO };

        assertNull(StringUtils.stripAll((String[]) null));
        // Additional varargs tests
        assertArrayEquals(empty, StringUtils.stripAll()); // empty array
        assertArrayEquals(new String[]{null}, StringUtils.stripAll((String) null)); // == new String[]{null}

        assertArrayEquals(empty, StringUtils.stripAll(empty));
        assertArrayEquals(foo, StringUtils.stripAll(fooSpace));
        
        assertNull(StringUtils.stripAll(null, null));
        assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null));
        assertArrayEquals(foo, StringUtils.stripAll(fooDots, "".""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5108]])
264,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testSetShort(),"    @Test
    public void testSetShort() {
        assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);
        assertEquals(bf_single.setShort((short) 0), (short) 0x4000);
        assertEquals(bf_zero.setShort((short) 0), (short) 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5105]])
834,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringChar(),"    @Test
    public void testSplitPreserveAllTokens_StringChar() {
        assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));
        assertEquals(0, StringUtils.splitPreserveAllTokens("""", '.').length);

        String str = ""a.b. c"";
        String[] res = StringUtils.splitPreserveAllTokens(str, '.');
        assertEquals(3, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"", res[1]);
        assertEquals("" c"", res[2]);
            
        str = ""a.b.. c"";
        res = StringUtils.splitPreserveAllTokens(str, '.');
        assertEquals(4, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"", res[1]);
        assertEquals("""", res[2]);
        assertEquals("" c"", res[3]);

        str = "".a."";
        res = StringUtils.splitPreserveAllTokens(str, '.');
        assertEquals(3, res.length);
        assertEquals("""", res[0]);
        assertEquals(""a"", res[1]);
        assertEquals("""", res[2]);
       
        str = "".a.."";
        res = StringUtils.splitPreserveAllTokens(str, '.');
        assertEquals(4, res.length);
        assertEquals("""", res[0]);
        assertEquals(""a"", res[1]);
        assertEquals("""", res[2]);
        assertEquals("""", res[3]);
        
        str = ""..a."";
        res = StringUtils.splitPreserveAllTokens(str, '.');
        assertEquals(4, res.length);
        assertEquals("""", res[0]);
        assertEquals("""", res[1]);
        assertEquals(""a"", res[2]);
        assertEquals("""", res[3]);
        
        str = ""..a"";
        res = StringUtils.splitPreserveAllTokens(str, '.');
        assertEquals(3, res.length);
        assertEquals("""", res[0]);
        assertEquals("""", res[1]);
        assertEquals(""a"", res[2]);
        
        str = ""a b c"";
        res = StringUtils.splitPreserveAllTokens(str,' ');
        assertEquals(3, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"", res[1]);
        assertEquals(""c"", res[2]);

        str = ""a  b  c"";
        res = StringUtils.splitPreserveAllTokens(str,' ');
        assertEquals(5, res.length);
        assertEquals(""a"", res[0]);
        assertEquals("""", res[1]);
        assertEquals(""b"", res[2]);
        assertEquals("""", res[3]);
        assertEquals(""c"", res[4]);
        
        str = "" a b c"";
        res = StringUtils.splitPreserveAllTokens(str,' ');
        assertEquals(4, res.length);
        assertEquals("""", res[0]);
        assertEquals(""a"", res[1]);
        assertEquals(""b"", res[2]);
        assertEquals(""c"", res[3]);

        str = ""  a b c"";
        res = StringUtils.splitPreserveAllTokens(str,' ');
        assertEquals(5, res.length);
        assertEquals("""", res[0]);
        assertEquals("""", res[1]);
        assertEquals(""a"", res[2]);
        assertEquals(""b"", res[3]);
        assertEquals(""c"", res[4]);

        str = ""a b c "";
        res = StringUtils.splitPreserveAllTokens(str,' ');
        assertEquals(4, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"", res[1]);
        assertEquals(""c"", res[2]);
        assertEquals("""", res[3]);

        str = ""a b c  "";
        res = StringUtils.splitPreserveAllTokens(str,' ');
        assertEquals(5, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"", res[1]);
        assertEquals(""c"", res[2]);
        assertEquals("""", res[3]);
        assertEquals("""", res[3]);

        // Match example in javadoc
        {
          String[] results;
          final String[] expectedResults = {""a"", """", ""b"", ""c""};
          results = StringUtils.splitPreserveAllTokens(""a..b.c"",'.');
          assertEquals(expectedResults.length, results.length);
          for (int i = 0; i < expectedResults.length; i++) {
              assertEquals(expectedResults[i], results[i]);
          }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5096]])
162,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameType(),"    @Test
    public void testSameType() {
        try {
            ArrayUtils.isSameType(null, null);
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            ArrayUtils.isSameType(null, new Object[0]);
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            ArrayUtils.isSameType(new Object[0], null);
            fail();
        } catch (final IllegalArgumentException ex) {}
        
        assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0]));
        assertFalse(ArrayUtils.isSameType(new String[0], new Object[0]));
        assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0]));
        assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0]));
        assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0]));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5092]])
932,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testJavaVersionMatches(),"    @Test
    public void testJavaVersionMatches() {
        String javaVersion = null;
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = """";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.0"";
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.1"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.2"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.3.0"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.3.1"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.4.0"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.4.1"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.4.2"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.5.0"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.6.0"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
        javaVersion = ""1.7.0"";
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.0""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.1""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.2""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.3""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.4""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.5""));
        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, ""1.6""));
        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, ""1.7""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5091]])
791,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java,org.apache.commons.lang3.StringUtilsStartsEndsWithTest.testEndsWith(),"    @Test
    public void testEndsWith() {
        assertTrue(""endsWith(null, null)"",    StringUtils.endsWith(null, (String)null));
        assertFalse(""endsWith(FOOBAR, null)"", StringUtils.endsWith(FOOBAR, (String)null));
        assertFalse(""endsWith(null, FOO)"",    StringUtils.endsWith(null, FOO));
        assertTrue(""endsWith(FOOBAR, \""\"")"",  StringUtils.endsWith(FOOBAR, """"));

        assertFalse(""endsWith(foobar, foo)"", StringUtils.endsWith(foobar, foo));
        assertFalse(""endsWith(FOOBAR, FOO)"", StringUtils.endsWith(FOOBAR, FOO));
        assertFalse(""endsWith(foobar, FOO)"", StringUtils.endsWith(foobar, FOO));
        assertFalse(""endsWith(FOOBAR, foo)"", StringUtils.endsWith(FOOBAR, foo));

        assertFalse(""endsWith(foo, foobar)"", StringUtils.endsWith(foo, foobar));
        assertFalse(""endsWith(foo, foobar)"", StringUtils.endsWith(bar, foobar));

        assertTrue(""endsWith(foobar, bar)"",  StringUtils.endsWith(foobar, bar));
        assertTrue(""endsWith(FOOBAR, BAR)"",  StringUtils.endsWith(FOOBAR, BAR));
        assertFalse(""endsWith(foobar, BAR)"", StringUtils.endsWith(foobar, BAR));
        assertFalse(""endsWith(FOOBAR, bar)"", StringUtils.endsWith(FOOBAR, bar));

        // ""alpha,beta,gamma,delta"".endsWith(""delta"")
        assertTrue(""endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B4)"",
                StringUtils.endsWith(""\u03B1\u03B2\u03B3\u03B4"", ""\u03B4""));
        // ""alpha,beta,gamma,delta"".endsWith(""gamma,DELTA"")
        assertFalse(""endsWith(\u03B1\u03B2\u03B3\u03B4, \u03B3\u0394)"",
                StringUtils.endsWith(""\u03B1\u03B2\u03B3\u03B4"", ""\u03B3\u0394""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5087]])
810,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSwapCase_String(),"    @Test
    public void testSwapCase_String() {
        assertEquals(null, StringUtils.swapCase(null));
        assertEquals("""", StringUtils.swapCase(""""));
        assertEquals(""  "", StringUtils.swapCase(""  ""));
        
        assertEquals(""i"", WordUtils.swapCase(""I"") );
        assertEquals(""I"", WordUtils.swapCase(""i"") );
        assertEquals(""I AM HERE 123"", StringUtils.swapCase(""i am here 123"") );
        assertEquals(""i aM hERE 123"", StringUtils.swapCase(""I Am Here 123"") );
        assertEquals(""I AM here 123"", StringUtils.swapCase(""i am HERE 123"") );
        assertEquals(""i am here 123"", StringUtils.swapCase(""I AM HERE 123"") );
        
        final String test = ""This String contains a TitleCase character: \u01C8"";
        final String expect = ""tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"";
        assertEquals(expect, WordUtils.swapCase(test));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5082]])
131,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByte(),"    @Test
    public void testNullToEmptyByte() {
        // Test null handling
        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.nullToEmpty((byte[]) null));
        // Test valid array handling
        final byte[] original = new byte[] {0x0F, 0x0E};
        assertEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final byte[] empty = new byte[]{};
        final byte[] result = ArrayUtils.nullToEmpty(empty);
        assertEquals(ArrayUtils.EMPTY_BYTE_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5081]])
630,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,org.apache.commons.lang3.RandomStringUtilsTest.testExceptions(),"    @Test
    public void testExceptions() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, """");
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            fail();
        } catch (final IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            fail();
        } catch (final IllegalArgumentException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5081]])
933,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testOSMatchesName(),"    @Test
    public void testOSMatchesName() {
        String osName = null;
        assertFalse(SystemUtils.isOSNameMatch(osName, ""Windows""));
        osName = """";
        assertFalse(SystemUtils.isOSNameMatch(osName, ""Windows""));
        osName = ""Windows 95"";
        assertTrue(SystemUtils.isOSNameMatch(osName, ""Windows""));
        osName = ""Windows NT"";
        assertTrue(SystemUtils.isOSNameMatch(osName, ""Windows""));
        osName = ""OS/2"";
        assertFalse(SystemUtils.isOSNameMatch(osName, ""Windows""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5080]])
443,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testWrappersToPrimitivesNull(),"    @Test
    public void testWrappersToPrimitivesNull() {
//        assertNull(""Wrong result for null input"", ClassUtils.wrappersToPrimitives(null)); // generates warning
        assertNull(""Wrong result for null input"", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); // equivalent cast
        // Other possible casts for null
        assertTrue(""empty -> empty"", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives()));
        final Class<?>[] castNull = ClassUtils.wrappersToPrimitives((Class<?>)null); // == new Class<?>[]{null}
        assertTrue(""(Class<?>)null -> [null]"", Arrays.equals(new Class<?>[]{null}, castNull));
}
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5076]])
233,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToObject_short(),"    @Test
    public void testToObject_short() {
        final short[] b = null;
        assertArrayEquals(null, ArrayUtils.toObject(b));
        
        assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, 
        ArrayUtils.toObject(new short[0]));
        
        assertTrue(Arrays.equals(
            new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), 
                Short.valueOf((short)9999999)},
            ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE, 
                (short)9999999}))
        );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5072]])
753,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testEquals(),"    @Test
    public void testEquals() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        assertTrue(StringUtils.equals(null, null));
        assertTrue(StringUtils.equals(fooCs, fooCs));
        assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO)));
        assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' })));
        assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO)));
        assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs));
        assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' })));
        assertFalse(StringUtils.equals(fooCs, barCs));
        assertFalse(StringUtils.equals(fooCs, null));
        assertFalse(StringUtils.equals(null, fooCs));
        assertFalse(StringUtils.equals(fooCs, foobarCs));
        assertFalse(StringUtils.equals(foobarCs, fooCs));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5069]])
139,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyShortObject(),"    @Test
    public void testNullToEmptyShortObject() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null));
        // Test valid array handling
        @SuppressWarnings(""boxing"")
        final
        Short[] original = new Short[] {1, 2};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final Short[] empty = new Short[]{};
        final Short[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5069]])
899,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testNormalizeSpace(),"    @Test
    public void testNormalizeSpace() {
        assertEquals(null, StringUtils.normalizeSpace(null));
        assertEquals("""", StringUtils.normalizeSpace(""""));
        assertEquals("""", StringUtils.normalizeSpace("" ""));
        assertEquals("""", StringUtils.normalizeSpace(""\t""));
        assertEquals("""", StringUtils.normalizeSpace(""\n""));        
        assertEquals("""", StringUtils.normalizeSpace(""\u0009""));
        assertEquals("""", StringUtils.normalizeSpace(""\u000B""));
        assertEquals("""", StringUtils.normalizeSpace(""\u000C""));
        assertEquals("""", StringUtils.normalizeSpace(""\u001C""));
        assertEquals("""", StringUtils.normalizeSpace(""\u001D""));
        assertEquals("""", StringUtils.normalizeSpace(""\u001E""));
        assertEquals("""", StringUtils.normalizeSpace(""\u001F""));
        assertEquals("""", StringUtils.normalizeSpace(""\f""));
        assertEquals("""", StringUtils.normalizeSpace(""\r""));
        assertEquals(""a"", StringUtils.normalizeSpace(""  a  ""));
        assertEquals(""a b c"", StringUtils.normalizeSpace(""  a  b   c  ""));
        assertEquals(""a b c"", StringUtils.normalizeSpace(""a\t\f\r  b\u000B   c\n""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5066]])
840,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testLang623(),"    @Test
    public void testLang623() {
        assertEquals(""t"", StringUtils.replaceChars(""\u00DE"", '\u00DE', 't'));
        assertEquals(""t"", StringUtils.replaceChars(""\u00FE"", '\u00FE', 't'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5066]])
475,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryBeMsb0ToHexDigit(),"    @Test
    public void testBinaryBeMsb0ToHexDigit() {
        assertEquals(
            '0', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, false}));
        assertEquals(
            '1', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, true}));
        assertEquals(
            '2', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, false}));
        assertEquals(
            '3', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, true}));
        assertEquals(
            '4', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, false}));
        assertEquals(
            '5', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, true}));
        assertEquals(
            '6', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, false}));
        assertEquals(
            '7', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, true}));
        assertEquals(
            '8', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, false}));
        assertEquals(
            '9', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, true}));
        assertEquals(
            'a', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, false}));
        assertEquals(
            'b', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, true}));
        assertEquals(
            'c', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, false}));
        assertEquals(
            'd', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, true}));
        assertEquals(
            'e', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, false}));
        assertEquals(
            'f', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, true}));
        assertEquals(
            '4',
            Conversion.binaryBeMsb0ToHexDigit(new boolean[]{
                true, false, false, false, false, false, false, false, false, false, false,
                false, false, true, false, false}));
        try {
            Conversion.binaryBeMsb0ToHexDigit(new boolean[]{});
            fail(""Thrown "" + IllegalArgumentException.class.getName() + "" expected"");
        } catch (final IllegalArgumentException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5064]])
425,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isInnerClass_Class(),"    @Test
    public void test_isInnerClass_Class() {
        assertTrue(ClassUtils.isInnerClass(Inner.class));
        assertTrue(ClassUtils.isInnerClass(Map.Entry.class));
        assertTrue(ClassUtils.isInnerClass(new Cloneable() {
        }.getClass()));
        assertFalse(ClassUtils.isInnerClass(this.getClass()));
        assertFalse(ClassUtils.isInnerClass(String.class));
        assertFalse(ClassUtils.isInnerClass(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5059]])
232,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_short_short(),"    @Test
    public void testToPrimitive_short_short() {
        final Short[] s = null;
        assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE));
        
        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], 
        Short.MIN_VALUE));
        
        assertTrue(Arrays.equals(
            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},
            ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE), 
                Short.valueOf(Short.MAX_VALUE), Short.valueOf((short)9999999)}, Short.MIN_VALUE))
        );
        
        assertTrue(Arrays.equals(
            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},
            ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE), null, 
                Short.valueOf((short)9999999)}, Short.MAX_VALUE))
        );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5058]])
866,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar(),"    @Test
    public void testCenter_StringIntChar() {
        assertEquals(null, StringUtils.center(null, -1, ' '));
        assertEquals(null, StringUtils.center(null, 4, ' '));
        assertEquals(""    "", StringUtils.center("""", 4, ' '));
        assertEquals(""ab"", StringUtils.center(""ab"", 0, ' '));
        assertEquals(""ab"", StringUtils.center(""ab"", -1, ' '));
        assertEquals(""ab"", StringUtils.center(""ab"", 1, ' '));
        assertEquals(""    "", StringUtils.center("""", 4, ' '));
        assertEquals("" ab "", StringUtils.center(""ab"", 4, ' '));
        assertEquals(""abcd"", StringUtils.center(""abcd"", 2, ' '));
        assertEquals("" a  "", StringUtils.center(""a"", 4, ' '));
        assertEquals(""  a  "", StringUtils.center(""a"", 5, ' '));
        assertEquals(""xxaxx"", StringUtils.center(""a"", 5, 'x'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5058]])
837,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType(),"    @Test
    public void testSplitByCharacterType() {
        assertNull(StringUtils.splitByCharacterType(null));
        assertEquals(0, StringUtils.splitByCharacterType("""").length);
        
        assertTrue(ArrayUtils.isEquals(new String[] { ""ab"", "" "", ""de"", "" "",
        ""fg"" }, StringUtils.splitByCharacterType(""ab de fg"")));
        
        assertTrue(ArrayUtils.isEquals(new String[] { ""ab"", ""   "", ""de"", "" "",
        ""fg"" }, StringUtils.splitByCharacterType(""ab   de fg"")));
        
        assertTrue(ArrayUtils.isEquals(new String[] { ""ab"", "":"", ""cd"", "":"",
        ""ef"" }, StringUtils.splitByCharacterType(""ab:cd:ef"")));
        
        assertTrue(ArrayUtils.isEquals(new String[] { ""number"", ""5"" },
                StringUtils.splitByCharacterType(""number5"")));
        
        assertTrue(ArrayUtils.isEquals(new String[] { ""foo"", ""B"", ""ar"" },
                StringUtils.splitByCharacterType(""fooBar"")));
        
        assertTrue(ArrayUtils.isEquals(new String[] { ""foo"", ""200"", ""B"", ""ar"" },
                StringUtils.splitByCharacterType(""foo200Bar"")));
        
        assertTrue(ArrayUtils.isEquals(new String[] { ""ASFR"", ""ules"" },
                StringUtils.splitByCharacterType(""ASFRules"")));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5049]])
849,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringStringString(),"    @Test
    public void testReplaceChars_StringStringString() {
        assertEquals(null, StringUtils.replaceChars(null, null, null));
        assertEquals(null, StringUtils.replaceChars(null, """", null));
        assertEquals(null, StringUtils.replaceChars(null, ""a"", null));
        assertEquals(null, StringUtils.replaceChars(null, null, """"));
        assertEquals(null, StringUtils.replaceChars(null, null, ""x""));
        
        assertEquals("""", StringUtils.replaceChars("""", null, null));
        assertEquals("""", StringUtils.replaceChars("""", """", null));
        assertEquals("""", StringUtils.replaceChars("""", ""a"", null));
        assertEquals("""", StringUtils.replaceChars("""", null, """"));
        assertEquals("""", StringUtils.replaceChars("""", null, ""x""));

        assertEquals(""abc"", StringUtils.replaceChars(""abc"", null, null));
        assertEquals(""abc"", StringUtils.replaceChars(""abc"", null, """"));
        assertEquals(""abc"", StringUtils.replaceChars(""abc"", null, ""x""));
        
        assertEquals(""abc"", StringUtils.replaceChars(""abc"", """", null));
        assertEquals(""abc"", StringUtils.replaceChars(""abc"", """", """"));
        assertEquals(""abc"", StringUtils.replaceChars(""abc"", """", ""x""));
        
        assertEquals(""ac"", StringUtils.replaceChars(""abc"", ""b"", null));
        assertEquals(""ac"", StringUtils.replaceChars(""abc"", ""b"", """"));
        assertEquals(""axc"", StringUtils.replaceChars(""abc"", ""b"", ""x""));
        
        assertEquals(""ayzya"", StringUtils.replaceChars(""abcba"", ""bc"", ""yz""));
        assertEquals(""ayya"", StringUtils.replaceChars(""abcba"", ""bc"", ""y""));
        assertEquals(""ayzya"", StringUtils.replaceChars(""abcba"", ""bc"", ""yzx""));
        
        assertEquals(""abcba"", StringUtils.replaceChars(""abcba"", ""z"", ""w""));
        assertSame(""abcba"", StringUtils.replaceChars(""abcba"", ""z"", ""w""));
        
        // Javadoc examples:
        assertEquals(""jelly"", StringUtils.replaceChars(""hello"", ""ho"", ""jy""));
        assertEquals(""ayzya"", StringUtils.replaceChars(""abcba"", ""bc"", ""yz""));
        assertEquals(""ayya"", StringUtils.replaceChars(""abcba"", ""bc"", ""y""));
        assertEquals(""ayzya"", StringUtils.replaceChars(""abcba"", ""bc"", ""yzx""));
        
        // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454
        assertEquals(""bcc"", StringUtils.replaceChars(""abc"", ""ab"", ""bc""));
        assertEquals(""q651.506bera"", StringUtils.replaceChars(""d216.102oren"",
            ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789"",
            ""nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5048]])
868,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReverse_String(),"    @Test
    public void testReverse_String() {
        assertEquals(null, StringUtils.reverse(null) );
        assertEquals("""", StringUtils.reverse("""") );
        assertEquals(""sdrawkcab"", StringUtils.reverse(""backwards"") );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5048]])
254,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testGetRawValue(),"    @Test
    public void testGetRawValue() {
        assertEquals(bf_multi.getRawValue(-1), 0x3F80);
        assertEquals(bf_multi.getRawValue(0), 0);
        assertEquals(bf_single.getRawValue(-1), 0x4000);
        assertEquals(bf_single.getRawValue(0), 0);
        assertEquals(bf_zero.getRawValue(-1), 0);
        assertEquals(bf_zero.getRawValue(0), 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5048]])
769,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfIgnoreCase_String(),"    @Test
    public void testIndexOfIgnoreCase_String() {
        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, """"));
        assertEquals(-1, StringUtils.indexOfIgnoreCase("""", null));
        assertEquals(0, StringUtils.indexOfIgnoreCase("""", """"));
        assertEquals(0, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""a""));
        assertEquals(0, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""A""));
        assertEquals(2, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""b""));
        assertEquals(2, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""B""));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""ab""));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB""));
        assertEquals(0, StringUtils.indexOfIgnoreCase(""aabaabaa"", """"));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5047]])
137,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyLongObject(),"    @Test
    public void testNullToEmptyLongObject() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null));
        // Test valid array handling
        @SuppressWarnings(""boxing"")
        final
        Long[] original = new Long[] {1L, 2L};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final Long[] empty = new Long[]{};
        final Long[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5038]])
900,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testLANG666(),"    @Test
    public void testLANG666() {
        assertEquals(""12"",StringUtils.stripEnd(""120.00"", "".0""));
        assertEquals(""121"",StringUtils.stripEnd(""121.00"", "".0""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5037]])
896,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testRemove_char(),"    @Test
    public void testRemove_char() {
        // StringUtils.remove(null, *)       = null
        assertEquals(null, StringUtils.remove(null, 'a'));
        assertEquals(null, StringUtils.remove(null, 'a'));
        assertEquals(null, StringUtils.remove(null, 'a'));
        
        // StringUtils.remove("""", *)          = """"
        assertEquals("""", StringUtils.remove("""", 'a'));
        assertEquals("""", StringUtils.remove("""", 'a'));
        assertEquals("""", StringUtils.remove("""", 'a'));
        
        // StringUtils.remove(""queued"", 'u') = ""qeed""
        assertEquals(""qeed"", StringUtils.remove(""queued"", 'u'));
        
        // StringUtils.remove(""queued"", 'z') = ""queued""
        assertEquals(""queued"", StringUtils.remove(""queued"", 'z'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5036]])
399,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character_int(),"    @Test
    public void testToIntValue_Character_int() {
        assertEquals(0, CharUtils.toIntValue(new Character('0'), -1));
        assertEquals(3, CharUtils.toIntValue(new Character('3'), -1));
        assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1));
        assertEquals(-1, CharUtils.toIntValue(null, -1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5033]])
579,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testCountriesByLanguage(),"    @Test
    public void testCountriesByLanguage() {
        assertCountriesByLanguage(null, new String[0]);
        assertCountriesByLanguage(""de"", new String[]{""DE"", ""CH"", ""AT"", ""LU""});
        assertCountriesByLanguage(""zz"", new String[0]);
        assertCountriesByLanguage(""it"", new String[]{""IT"", ""CH""});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5031]])
968,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNoNullElementsArray2(),"    @Test
    public void testNoNullElementsArray2() {
        String[] array = new String[] {""a"", ""b""};
        Validate.noNullElements(array, ""MSG"");
        try {
            Validate.noNullElements((Object[]) null, ""MSG"");
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""The validated object is null"", ex.getMessage());
        }
        array[1] = null;
        try {
            Validate.noNullElements(array, ""MSG"");
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""MSG"", ex.getMessage());
        }
        
        array = new String[] {""a"", ""b""};
        final String[] test = Validate.noNullElements(array, ""Message"");
        assertSame(array, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5030]])
134,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyObject(),"    @Test
    public void testNullToEmptyObject() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null));
        // Test valid array handling
        final Object[] original = new Object[] {Boolean.TRUE, Boolean.FALSE};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final Object[] empty = new Object[]{};
        final Object[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5030]])
452,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testGetClassWithArrayClasses(),"    @Test
    public void testGetClassWithArrayClasses() throws Exception {
        assertGetClassReturnsClass( String[].class );
        assertGetClassReturnsClass( int[].class );
        assertGetClassReturnsClass( long[].class );
        assertGetClassReturnsClass( short[].class );
        assertGetClassReturnsClass( byte[].class );
        assertGetClassReturnsClass( char[].class );
        assertGetClassReturnsClass( float[].class );
        assertGetClassReturnsClass( double[].class );
        assertGetClassReturnsClass( boolean[].class );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5026]])
408,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaUpper_char(),"    @Test
    public void testIsAsciiAlphaUpper_char() {
        assertFalse(CharUtils.isAsciiAlphaUpper('a'));
        assertTrue(CharUtils.isAsciiAlphaUpper('A'));
        assertFalse(CharUtils.isAsciiAlphaUpper('3'));
        assertFalse(CharUtils.isAsciiAlphaUpper('-'));
        assertFalse(CharUtils.isAsciiAlphaUpper('\n'));
        assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY));
       
        for (int i = 0; i < 196; i++) {
            if (i >= 'A' && i <= 'Z') {
                assertTrue(CharUtils.isAsciiAlphaUpper((char) i));
            } else {
                assertFalse(CharUtils.isAsciiAlphaUpper((char) i));
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5024]])
352,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Same(),"    @Test
    public void testConstructorAccessors_isNotIn_Same() {
        final CharRange rangea = CharRange.isNotIn('a', 'a');
        assertEquals('a', rangea.getStart());
        assertEquals('a', rangea.getEnd());
        assertTrue(rangea.isNegated());
        assertEquals(""^a"", rangea.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5021]])
226,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_char_char(),"    @Test
    public void testToPrimitive_char_char() {
        final Character[] b = null;
        assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE));
        
        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, 
            ArrayUtils.toPrimitive(new Character[0], (char)0));
        
        assertTrue(Arrays.equals(
            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},
            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), 
                new Character(Character.MAX_VALUE), new Character('0')}, 
                Character.MIN_VALUE))
        );
        
        assertTrue(Arrays.equals(
            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},
            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, 
                new Character('0')}, Character.MAX_VALUE))
        );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5018]])
349,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Same(),"    @Test
    public void testConstructorAccessors_isIn_Same() {
        final CharRange rangea = CharRange.isIn('a', 'a');
        assertEquals('a', rangea.getStart());
        assertEquals('a', rangea.getEnd());
        assertFalse(rangea.isNegated());
        assertEquals(""a"", rangea.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5015]])
240,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToObject_long(),"    @Test
    public void testToObject_long() {
        final long[] b = null;
        assertArrayEquals(null, ArrayUtils.toObject(b));
    
        assertSame(
            ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,
            ArrayUtils.toObject(new long[0]));
    
        assertTrue(
            Arrays.equals(
                new Long[] {
                    Long.valueOf(Long.MIN_VALUE),
                    Long.valueOf(Long.MAX_VALUE),
                    Long.valueOf(9999999)},
            ArrayUtils.toObject(
                new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 })));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5013]])
698,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,"org.apache.commons.lang3.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String, java.lang.String)","    private void assertEscapeJava(String message, final String expected, final String original) throws IOException {
        final String converted = StringEscapeUtils.escapeJava(original);
        message = ""escapeJava(String) failed"" + (message == null ? """" : ("": "" + message));
        assertEquals(message, expected, converted);

        final StringWriter writer = new StringWriter();
        StringEscapeUtils.ESCAPE_JAVA.translate(original, writer);
        assertEquals(expected, writer.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5012]])
229,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_byte_byte(),"    @Test
    public void testToPrimitive_byte_byte() {
        final Byte[] b = null;
        assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));
        
        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, 
            ArrayUtils.toPrimitive(new Byte[0], (byte)1));
        
        assertTrue(Arrays.equals(
            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},
            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), 
                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}, 
                Byte.MIN_VALUE))
        );
        
        assertTrue(Arrays.equals(
            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},
            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null, 
                Byte.valueOf((byte)9999999)}, Byte.MAX_VALUE))
        );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5012]])
779,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testOrdinalIndexOf(),"    @Test
    public void testOrdinalIndexOf() {
        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", """", Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", Integer.MIN_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", """", Integer.MIN_VALUE));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, -1));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", """", -1));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", -1));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", -1));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", -1));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", """", -1));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, 0));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", """", 0));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", 0));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", 0));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", 0));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", """", 0));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, 1));
        assertEquals(0, StringUtils.ordinalIndexOf("""", """", 1));
        assertEquals(0, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", 1));
        assertEquals(2, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", 1));
        assertEquals(1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", 1));
        assertEquals(0, StringUtils.ordinalIndexOf(""aabaabaa"", """", 1));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, 2));
        assertEquals(0, StringUtils.ordinalIndexOf("""", """", 2));
        assertEquals(1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", 2));
        assertEquals(5, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", 2));
        assertEquals(4, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", 2));
        assertEquals(0, StringUtils.ordinalIndexOf(""aabaabaa"", """", 2));

        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf("""", null, Integer.MAX_VALUE));
        assertEquals(0, StringUtils.ordinalIndexOf("""", """", Integer.MAX_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""a"", Integer.MAX_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""b"", Integer.MAX_VALUE));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aabaabaa"", ""ab"", Integer.MAX_VALUE));
        assertEquals(0, StringUtils.ordinalIndexOf(""aabaabaa"", """", Integer.MAX_VALUE));

        assertEquals(-1, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 0));
        assertEquals(0, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 1));
        assertEquals(1, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 2));
        assertEquals(2, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 3));
        assertEquals(3, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 4));
        assertEquals(4, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 5));
        assertEquals(5, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 6));
        assertEquals(6, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 7));
        assertEquals(7, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 8));
        assertEquals(8, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 9));
        assertEquals(-1, StringUtils.ordinalIndexOf(""aaaaaaaaa"", ""a"", 10));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5011]])
409,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaLower_char(),"    @Test
    public void testIsAsciiAlphaLower_char() {
        assertTrue(CharUtils.isAsciiAlphaLower('a'));
        assertFalse(CharUtils.isAsciiAlphaLower('A'));
        assertFalse(CharUtils.isAsciiAlphaLower('3'));
        assertFalse(CharUtils.isAsciiAlphaLower('-'));
        assertFalse(CharUtils.isAsciiAlphaLower('\n'));
        assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY));
       
        for (int i = 0; i < 196; i++) {
            if (i >= 'a' && i <= 'z') {
                assertTrue(CharUtils.isAsciiAlphaLower((char) i));
            } else {
                assertFalse(CharUtils.isAsciiAlphaLower((char) i));
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5010]])
596,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testIdentityToStringAppendable(),"    @Test
    public void testIdentityToStringAppendable() {
        final Integer i = Integer.valueOf(121);
        final String expected = ""java.lang.Integer@"" + Integer.toHexString(System.identityHashCode(i));

        try {
            final Appendable appendable = new StringBuilder();
            ObjectUtils.identityToString(appendable, i);
            assertEquals(expected, appendable.toString());
        } catch(IOException ex) {
            fail(""IOException unexpected"");
        }
        
        try {
            ObjectUtils.identityToString((Appendable)null, ""tmp"");
            fail(""NullPointerException expected"");
        } catch(final NullPointerException npe) {
        } catch (IOException ex) {
        }
        
        try {
            ObjectUtils.identityToString((Appendable)(new StringBuilder()), null);
            fail(""NullPointerException expected"");
        } catch(final NullPointerException npe) {
        } catch (IOException ex) {
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5010]])
767,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringString(),"    @Test
    public void testIndexOfAnyBut_StringString() {
        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));
        assertEquals(-1, StringUtils.indexOfAnyBut(null, """"));
        assertEquals(-1, StringUtils.indexOfAnyBut(null, ""ab""));

        assertEquals(-1, StringUtils.indexOfAnyBut("""", (String) null));
        assertEquals(-1, StringUtils.indexOfAnyBut("""", """"));
        assertEquals(-1, StringUtils.indexOfAnyBut("""", ""ab""));

        assertEquals(-1, StringUtils.indexOfAnyBut(""zzabyycdxx"", (String) null));
        assertEquals(-1, StringUtils.indexOfAnyBut(""zzabyycdxx"", """"));
        assertEquals(3, StringUtils.indexOfAnyBut(""zzabyycdxx"", ""za""));
        assertEquals(0, StringUtils.indexOfAnyBut(""zzabyycdxx"", ""by""));
        assertEquals(0, StringUtils.indexOfAnyBut(""ab"", ""z""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5009]])
603,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testMedian(),"    @Test
    public void testMedian() {
        assertEquals(""foo"", ObjectUtils.median(""foo""));
        assertEquals(""bar"", ObjectUtils.median(""foo"", ""bar""));
        assertEquals(""baz"", ObjectUtils.median(""foo"", ""bar"", ""baz""));
        assertEquals(""baz"", ObjectUtils.median(""foo"", ""bar"", ""baz"", ""blah""));
        assertEquals(""blah"", ObjectUtils.median(""foo"", ""bar"", ""baz"", ""blah"", ""wah""));
        assertEquals(Integer.valueOf(5),
            ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10)));
        assertEquals(
            Integer.valueOf(7),
            ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8),
                Integer.valueOf(9)));
        assertEquals(Integer.valueOf(6),
            ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5008]])
967,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testNoNullElementsArray1(),"    @Test
    public void testNoNullElementsArray1() {
        String[] array = new String[] {""a"", ""b""};
        Validate.noNullElements(array);
        try {
            Validate.noNullElements((Object[]) null);
            fail(""Expecting NullPointerException"");
        } catch (final NullPointerException ex) {
            assertEquals(""The validated object is null"", ex.getMessage());
        }
        array[1] = null;
        try {
            Validate.noNullElements(array);
            fail(""Expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            assertEquals(""The validated array contains null element at index: 1"", ex.getMessage());
        }
        
        array = new String[] {""a"", ""b""};
        final String[] test = Validate.noNullElements(array);
        assertSame(array, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.5001]])
45,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullCharArray(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllNullCharArray() {
        ArrayUtils.removeAll((char[]) null, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4998]])
432,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Widening(),"    @Test
    public void test_isAssignable_Widening() throws Exception {
        // test byte conversions
        assertFalse(""byte -> char"", ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));
        assertTrue(""byte -> byte"", ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE));
        assertTrue(""byte -> short"", ClassUtils.isAssignable(Byte.TYPE, Short.TYPE));
        assertTrue(""byte -> int"", ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE));
        assertTrue(""byte -> long"", ClassUtils.isAssignable(Byte.TYPE, Long.TYPE));
        assertTrue(""byte -> float"", ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));
        assertTrue(""byte -> double"", ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));
        assertFalse(""byte -> boolean"", ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));

        // test short conversions
        assertFalse(""short -> char"", ClassUtils.isAssignable(Short.TYPE, Character.TYPE));
        assertFalse(""short -> byte"", ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));
        assertTrue(""short -> short"", ClassUtils.isAssignable(Short.TYPE, Short.TYPE));
        assertTrue(""short -> int"", ClassUtils.isAssignable(Short.TYPE, Integer.TYPE));
        assertTrue(""short -> long"", ClassUtils.isAssignable(Short.TYPE, Long.TYPE));
        assertTrue(""short -> float"", ClassUtils.isAssignable(Short.TYPE, Float.TYPE));
        assertTrue(""short -> double"", ClassUtils.isAssignable(Short.TYPE, Double.TYPE));
        assertFalse(""short -> boolean"", ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));

        // test char conversions
        assertTrue(""char -> char"", ClassUtils.isAssignable(Character.TYPE, Character.TYPE));
        assertFalse(""char -> byte"", ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));
        assertFalse(""char -> short"", ClassUtils.isAssignable(Character.TYPE, Short.TYPE));
        assertTrue(""char -> int"", ClassUtils.isAssignable(Character.TYPE, Integer.TYPE));
        assertTrue(""char -> long"", ClassUtils.isAssignable(Character.TYPE, Long.TYPE));
        assertTrue(""char -> float"", ClassUtils.isAssignable(Character.TYPE, Float.TYPE));
        assertTrue(""char -> double"", ClassUtils.isAssignable(Character.TYPE, Double.TYPE));
        assertFalse(""char -> boolean"", ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));

        // test int conversions
        assertFalse(""int -> char"", ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));
        assertFalse(""int -> byte"", ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));
        assertFalse(""int -> short"", ClassUtils.isAssignable(Integer.TYPE, Short.TYPE));
        assertTrue(""int -> int"", ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));
        assertTrue(""int -> long"", ClassUtils.isAssignable(Integer.TYPE, Long.TYPE));
        assertTrue(""int -> float"", ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));
        assertTrue(""int -> double"", ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));
        assertFalse(""int -> boolean"", ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));

        // test long conversions
        assertFalse(""long -> char"", ClassUtils.isAssignable(Long.TYPE, Character.TYPE));
        assertFalse(""long -> byte"", ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));
        assertFalse(""long -> short"", ClassUtils.isAssignable(Long.TYPE, Short.TYPE));
        assertFalse(""long -> int"", ClassUtils.isAssignable(Long.TYPE, Integer.TYPE));
        assertTrue(""long -> long"", ClassUtils.isAssignable(Long.TYPE, Long.TYPE));
        assertTrue(""long -> float"", ClassUtils.isAssignable(Long.TYPE, Float.TYPE));
        assertTrue(""long -> double"", ClassUtils.isAssignable(Long.TYPE, Double.TYPE));
        assertFalse(""long -> boolean"", ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));

        // test float conversions
        assertFalse(""float -> char"", ClassUtils.isAssignable(Float.TYPE, Character.TYPE));
        assertFalse(""float -> byte"", ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));
        assertFalse(""float -> short"", ClassUtils.isAssignable(Float.TYPE, Short.TYPE));
        assertFalse(""float -> int"", ClassUtils.isAssignable(Float.TYPE, Integer.TYPE));
        assertFalse(""float -> long"", ClassUtils.isAssignable(Float.TYPE, Long.TYPE));
        assertTrue(""float -> float"", ClassUtils.isAssignable(Float.TYPE, Float.TYPE));
        assertTrue(""float -> double"", ClassUtils.isAssignable(Float.TYPE, Double.TYPE));
        assertFalse(""float -> boolean"", ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));

        // test double conversions
        assertFalse(""double -> char"", ClassUtils.isAssignable(Double.TYPE, Character.TYPE));
        assertFalse(""double -> byte"", ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));
        assertFalse(""double -> short"", ClassUtils.isAssignable(Double.TYPE, Short.TYPE));
        assertFalse(""double -> int"", ClassUtils.isAssignable(Double.TYPE, Integer.TYPE));
        assertFalse(""double -> long"", ClassUtils.isAssignable(Double.TYPE, Long.TYPE));
        assertFalse(""double -> float"", ClassUtils.isAssignable(Double.TYPE, Float.TYPE));
        assertTrue(""double -> double"", ClassUtils.isAssignable(Double.TYPE, Double.TYPE));
        assertFalse(""double -> boolean"", ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));

        // test boolean conversions
        assertFalse(""boolean -> char"", ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));
        assertFalse(""boolean -> byte"", ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));
        assertFalse(""boolean -> short"", ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE));
        assertFalse(""boolean -> int"", ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE));
        assertFalse(""boolean -> long"", ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE));
        assertFalse(""boolean -> float"", ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));
        assertFalse(""boolean -> double"", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));
        assertTrue(""boolean -> boolean"", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4998]])
724,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJson(),"    @Test
    public void testEscapeJson() {
        assertEquals(null, StringEscapeUtils.escapeJson(null));
        try {
            StringEscapeUtils.ESCAPE_JSON.translate(null, null);
            fail();
        } catch (final IOException ex) {
            fail();
        } catch (final IllegalArgumentException ex) {
        }
        try {
            StringEscapeUtils.ESCAPE_JSON.translate("""", null);
            fail();
        } catch (final IOException ex) {
            fail();
        } catch (final IllegalArgumentException ex) {
        }

        assertEquals(""He didn't say, \\\""stop!\\\"""", StringEscapeUtils.escapeJson(""He didn't say, \""stop!\""""));

        String expected = ""\\\""foo\\\"" isn't \\\""bar\\\"". specials: \\b\\r\\n\\f\\t\\\\\\/"";
        String input =""\""foo\"" isn't \""bar\"". specials: \b\r\n\f\t\\/"";

        assertEquals(expected, StringEscapeUtils.escapeJson(input));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4992]])
844,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringStringInt(),"    @Test
    public void testReplace_StringStringStringInt() {
        assertEquals(null, StringUtils.replace(null, null, null, 2));
        assertEquals(null, StringUtils.replace(null, null, ""any"", 2));
        assertEquals(null, StringUtils.replace(null, ""any"", null, 2));
        assertEquals(null, StringUtils.replace(null, ""any"", ""any"", 2));

        assertEquals("""", StringUtils.replace("""", null, null, 2));
        assertEquals("""", StringUtils.replace("""", null, ""any"", 2));
        assertEquals("""", StringUtils.replace("""", ""any"", null, 2));
        assertEquals("""", StringUtils.replace("""", ""any"", ""any"", 2));
        
        final String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'});
        assertSame(str, StringUtils.replace(str, ""x"", """", -1));
        
        assertEquals(""f"", StringUtils.replace(""oofoo"", ""o"", """", -1));
        assertEquals(""oofoo"", StringUtils.replace(""oofoo"", ""o"", """", 0));
        assertEquals(""ofoo"", StringUtils.replace(""oofoo"", ""o"", """", 1));
        assertEquals(""foo"", StringUtils.replace(""oofoo"", ""o"", """", 2));
        assertEquals(""fo"", StringUtils.replace(""oofoo"", ""o"", """", 3));
        assertEquals(""f"", StringUtils.replace(""oofoo"", ""o"", """", 4));
        
        assertEquals(""f"", StringUtils.replace(""oofoo"", ""o"", """", -5));
        assertEquals(""f"", StringUtils.replace(""oofoo"", ""o"", """", 1000));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4990]])
370,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash(),"    @Test
    public void testConstructor_String_oddDash() {
        CharSet set;
        CharRange[] array;
        
        set = CharSet.getInstance(""-"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
        
        set = CharSet.getInstance(""--"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
        
        set = CharSet.getInstance(""---"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
        
        set = CharSet.getInstance(""----"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
        
        set = CharSet.getInstance(""-a"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
        
        set = CharSet.getInstance(""a-"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));
        
        set = CharSet.getInstance(""a--"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-')));
        
        set = CharSet.getInstance(""--a"");
        array = set.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a')));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4988]])
369,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated(),"    @Test
    public void testConstructor_String_comboNegated() {
        CharSet set;
        CharRange[] array;
        
        set = CharSet.getInstance(""^abc"");
        array = set.getCharRanges();
        assertEquals(3, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
        
        set = CharSet.getInstance(""b^ac"");
        array = set.getCharRanges();
        assertEquals(3, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
        
        set = CharSet.getInstance(""db^ac"");
        array = set.getCharRanges();
        assertEquals(4, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('d')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
        
        set = CharSet.getInstance(""^b^a"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('b')));
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));
        
        set = CharSet.getInstance(""b^a-c^z"");
        array = set.getCharRanges();
        assertEquals(3, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c')));
        assertTrue(ArrayUtils.contains(array, CharRange.isNot('z')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4988]])
252,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testGetValue(),"    @Test
    public void testGetValue() {
        assertEquals(bf_multi.getValue(-1), 127);
        assertEquals(bf_multi.getValue(0), 0);
        assertEquals(bf_single.getValue(-1), 1);
        assertEquals(bf_single.getValue(0), 0);
        assertEquals(bf_zero.getValue(-1), 0);
        assertEquals(bf_zero.getValue(0), 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4987]])
663,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIntersectionWithNull(),"    @Test(expected = IllegalArgumentException.class)
    public void testIntersectionWithNull() {
        intRange.intersectionWith(null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4979]])
574,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testAvailableLocaleSet(),"    @Test
    public void testAvailableLocaleSet() {
        final Set<Locale> set = LocaleUtils.availableLocaleSet();
        final Set<Locale> set2 = LocaleUtils.availableLocaleSet();
        assertNotNull(set);
        assertSame(set, set2);
        assertUnmodifiableCollection(set);
        
        final Locale[] jdkLocaleArray = Locale.getAvailableLocales();
        final List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);
        final Set<Locale> jdkLocaleSet = new HashSet<Locale>(jdkLocaleList);
        assertEquals(jdkLocaleSet, set);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4978]])
772,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_charInt(),"    @Test
    public void testLastIndexOf_charInt() {
        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));
        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));
        assertEquals(-1, StringUtils.lastIndexOf("""", ' ', 0));
        assertEquals(-1, StringUtils.lastIndexOf("""", ' ', -1));
        assertEquals(7, StringUtils.lastIndexOf(""aabaabaa"", 'a', 8));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", 'b', 8));
        assertEquals(2, StringUtils.lastIndexOf(""aabaabaa"", 'b', 3));
        assertEquals(5, StringUtils.lastIndexOf(""aabaabaa"", 'b', 9));
        assertEquals(-1, StringUtils.lastIndexOf(""aabaabaa"", 'b', -1));
        assertEquals(0, StringUtils.lastIndexOf(""aabaabaa"", 'a', 0));

        assertEquals(2, StringUtils.lastIndexOf(new StringBuilder(""aabaabaa""), 'b', 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4974]])
360,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testIterator(),"    @Test
    public void testIterator() {
        final CharRange a = CharRange.is('a');
        final CharRange ad = CharRange.isIn('a', 'd');
        final CharRange nota = CharRange.isNot('a');
        final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE);
        final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE);
        final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1));

        final Iterator<Character> aIt = a.iterator();
        assertNotNull(aIt);
        assertTrue(aIt.hasNext());
        assertEquals(Character.valueOf('a'), aIt.next());
        assertFalse(aIt.hasNext());

        final Iterator<Character> adIt = ad.iterator();
        assertNotNull(adIt);
        assertTrue(adIt.hasNext());
        assertEquals(Character.valueOf('a'), adIt.next());
        assertEquals(Character.valueOf('b'), adIt.next());
        assertEquals(Character.valueOf('c'), adIt.next());
        assertEquals(Character.valueOf('d'), adIt.next());
        assertFalse(adIt.hasNext());

        final Iterator<Character> notaIt = nota.iterator();
        assertNotNull(notaIt);
        assertTrue(notaIt.hasNext());
        while (notaIt.hasNext()) {
            final Character c = notaIt.next();
            assertFalse('a' == c.charValue());
        }

        final Iterator<Character> emptySetIt = emptySet.iterator();
        assertNotNull(emptySetIt);
        assertFalse(emptySetIt.hasNext());
        try {
            emptySetIt.next();
            fail(""Should throw NoSuchElementException"");
        } catch (final NoSuchElementException e) {
            assertTrue(true);
        }

        final Iterator<Character> notFirstIt = notFirst.iterator();
        assertNotNull(notFirstIt);
        assertTrue(notFirstIt.hasNext());
        assertEquals(Character.valueOf((char) 0), notFirstIt.next());
        assertFalse(notFirstIt.hasNext());
        try {
            notFirstIt.next();
            fail(""Should throw NoSuchElementException"");
        } catch (final NoSuchElementException e) {
            assertTrue(true);
        }

        final Iterator<Character> notLastIt = notLast.iterator();
        assertNotNull(notLastIt);
        assertTrue(notLastIt.hasNext());
        assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next());
        assertFalse(notLastIt.hasNext());
        try {
            notLastIt.next();
            fail(""Should throw NoSuchElementException"");
        } catch (final NoSuchElementException e) {
            assertTrue(true);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4973]])
824,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_IterableChar(),"    @Test
    public void testJoin_IterableChar() {
        assertEquals(null, StringUtils.join((Iterable<?>) null, ','));
        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));
        assertEquals("""", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));
        assertEquals("""", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));
        assertEquals(""foo"", StringUtils.join(Collections.singleton(""foo""), 'x'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4969]])
668,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testException(),"    @Test
    public void testException() {
        SerializationException serEx;
        final Exception ex = new Exception();
        
        serEx = new SerializationException();
        assertSame(null, serEx.getMessage());
        assertSame(null, serEx.getCause());
        
        serEx = new SerializationException(""Message"");
        assertSame(""Message"", serEx.getMessage());
        assertSame(null, serEx.getCause());
        
        serEx = new SerializationException(ex);
        assertEquals(""java.lang.Exception"", serEx.getMessage());
        assertSame(ex, serEx.getCause());
        
        serEx = new SerializationException(""Message"", ex);
        assertSame(""Message"", serEx.getMessage());
        assertSame(ex, serEx.getCause());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4967]])
91,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementBooleanArray(),"    @Test
    public void testRemoveElementBooleanArray() {
        boolean[] array;
        array = ArrayUtils.removeElement((boolean[]) null, true);
        assertNull(array);
        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new boolean[] {true}, true);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new boolean[] {true, false}, true);
        assertTrue(Arrays.equals(new boolean[] {false}, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new boolean[] {true, false, true}, true);
        assertTrue(Arrays.equals(new boolean[] {false, true}, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4966]])
568,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testToLocale_2Part(),"    @Test
    public void testToLocale_2Part() {
        assertValidToLocale(""us_EN"", ""us"", ""EN"");
        //valid though doesnt exist
        assertValidToLocale(""us_ZH"", ""us"", ""ZH"");
        
        try {
            LocaleUtils.toLocale(""us-EN"");
            fail(""Should fail as not underscore"");
        } catch (final IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""us_En"");
            fail(""Should fail second part not uppercase"");
        } catch (final IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""us_en"");
            fail(""Should fail second part not uppercase"");
        } catch (final IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""us_eN"");
            fail(""Should fail second part not uppercase"");
        } catch (final IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""uS_EN"");
            fail(""Should fail first part not lowercase"");
        } catch (final IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""us_E3"");
            fail(""Should fail second part not uppercase"");
        } catch (final IllegalArgumentException iae) {}
    }        
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4963]])
838,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase(),"    @Test
    public void testSplitByCharacterTypeCamelCase() {
        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));
        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("""").length);

        assertTrue(ArrayUtils.isEquals(new String[] { ""ab"", "" "", ""de"", "" "",
                ""fg"" }, StringUtils.splitByCharacterTypeCamelCase(""ab de fg"")));

        assertTrue(ArrayUtils.isEquals(new String[] { ""ab"", ""   "", ""de"", "" "",
                ""fg"" }, StringUtils.splitByCharacterTypeCamelCase(""ab   de fg"")));

        assertTrue(ArrayUtils.isEquals(new String[] { ""ab"", "":"", ""cd"", "":"",
                ""ef"" }, StringUtils.splitByCharacterTypeCamelCase(""ab:cd:ef"")));
        
        assertTrue(ArrayUtils.isEquals(new String[] { ""number"", ""5"" },
                StringUtils.splitByCharacterTypeCamelCase(""number5"")));

        assertTrue(ArrayUtils.isEquals(new String[] { ""foo"", ""Bar"" },
                StringUtils.splitByCharacterTypeCamelCase(""fooBar"")));

        assertTrue(ArrayUtils.isEquals(new String[] { ""foo"", ""200"", ""Bar"" },
                StringUtils.splitByCharacterTypeCamelCase(""foo200Bar"")));

        assertTrue(ArrayUtils.isEquals(new String[] { ""ASF"", ""Rules"" },
                StringUtils.splitByCharacterTypeCamelCase(""ASFRules"")));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4961]])
825,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_IterableString(),"    @Test
    public void testJoin_IterableString() {
        assertEquals(null, StringUtils.join((Iterable<?>) null, null));
        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));
        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), """"));
        assertEquals(""foo"", StringUtils.join(Collections.singleton(""foo""), ""x""));
        assertEquals(""foo"", StringUtils.join(Collections.singleton(""foo""), null));

        assertEquals("""", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));

        assertEquals("""", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));
        assertEquals("""", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), """"));
        assertEquals("""", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));

        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4960]])
239,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_long_long(),"     @Test
     public void testToPrimitive_long_long() {
         final Long[] l = null;
         assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE));
         
         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, 
         ArrayUtils.toPrimitive(new Long[0], 1));
         
         assertTrue(Arrays.equals(
             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE), 
                 Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)},1)));
         
         assertTrue(Arrays.equals(
             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE), 
                 null, Long.valueOf(9999999)}, Long.MAX_VALUE))
         );
     }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4957]])
827,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplit_StringChar(),"    @Test
    public void testSplit_StringChar() {
        assertArrayEquals(null, StringUtils.split(null, '.'));
        assertEquals(0, StringUtils.split("""", '.').length);

        String str = ""a.b.. c"";
        String[] res = StringUtils.split(str, '.');
        assertEquals(3, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"", res[1]);
        assertEquals("" c"", res[2]);
            
        str = "".a."";
        res = StringUtils.split(str, '.');
        assertEquals(1, res.length);
        assertEquals(""a"", res[0]);
        
        str = ""a b c"";
        res = StringUtils.split(str,' ');
        assertEquals(3, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"", res[1]);
        assertEquals(""c"", res[2]);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4954]])
455,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,"org.apache.commons.lang3.ClassUtilsTest.assertGetClassThrowsException(java.lang.String, java.lang.Class<?>)","    private void assertGetClassThrowsException( final String className, final Class<?> exceptionType ) throws Exception {
        try {
            ClassUtils.getClass( className );
            fail( ""ClassUtils.getClass() should fail with an exception of type "" + exceptionType.getName() + "" when given class name \"""" + className + ""\""."" );
        }
        catch( final Exception e ) {
            assertTrue( exceptionType.isAssignableFrom( e.getClass() ) );
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4953]])
228,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_byte(),"    @Test
    public void testToPrimitive_byte() {
        final Byte[] b = null;
        assertEquals(null, ArrayUtils.toPrimitive(b));
        
        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));
        
        assertTrue(Arrays.equals(
            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},
            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), 
                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}))
        );

        try {
            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null});
            fail();
        } catch (final NullPointerException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4952]])
9,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,"org.apache.commons.lang3.AnnotationUtilsTest.Anonymous-b88988cd-489c-4116-b254-df168778293f.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])","            @Override
            public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
                if (""equals"".equals(method.getName()) && method.getParameterTypes().length == 1) {
                    return Boolean.valueOf(proxy == args[0]);
                }
                if (""hashCode"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return Integer.valueOf(System.identityHashCode(proxy));
                }
                if (""toString"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return ""Test proxy"";
                }
                return method.invoke(real, args);
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4942]])
822,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorChar(),"    @Test
    public void testJoin_IteratorChar() {
        assertEquals(null, StringUtils.join((Iterator<?>) null, ','));
        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));
        assertEquals("""", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));
        assertEquals("""", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));
        assertEquals(""foo"", StringUtils.join(Collections.singleton(""foo"").iterator(), 'x'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4941]])
230,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToObject_byte(),"    @Test
    public void testToObject_byte() {
        final byte[] b = null;
        assertArrayEquals(null, ArrayUtils.toObject(b));
        
        assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, 
            ArrayUtils.toObject(new byte[0]));
        
        assertTrue(Arrays.equals(
            new Byte[] {Byte.valueOf(Byte.MIN_VALUE), 
                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},
                ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, 
                (byte)9999999}))
        );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4938]])
762,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringString(),"    @Test
    public void testIndexOfAny_StringString() {
        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));
        assertEquals(-1, StringUtils.indexOfAny(null, """"));
        assertEquals(-1, StringUtils.indexOfAny(null, ""ab""));

        assertEquals(-1, StringUtils.indexOfAny("""", (String) null));
        assertEquals(-1, StringUtils.indexOfAny("""", """"));
        assertEquals(-1, StringUtils.indexOfAny("""", ""ab""));

        assertEquals(-1, StringUtils.indexOfAny(""zzabyycdxx"", (String) null));
        assertEquals(-1, StringUtils.indexOfAny(""zzabyycdxx"", """"));
        assertEquals(0, StringUtils.indexOfAny(""zzabyycdxx"", ""za""));
        assertEquals(3, StringUtils.indexOfAny(""zzabyycdxx"", ""by""));
        assertEquals(-1, StringUtils.indexOfAny(""ab"", ""z""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4937]])
836,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,"org.apache.commons.lang3.StringUtilsTest.innerTestSplitPreserveAllTokens(char, java.lang.String, char)","    private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) {
        final String msg = ""Failed on separator hex("" + Integer.toHexString(separator) +
            ""), noMatch hex("" + Integer.toHexString(noMatch) + ""), sepStr("" + sepStr + "")"";
        
        final String str = ""a"" + separator + ""b"" + separator + separator + noMatch + ""c"";
        String[] res;
        // (str, sepStr)
        res = StringUtils.splitPreserveAllTokens(str, sepStr);
        assertEquals(msg, 4, res.length);
        assertEquals(msg, ""a"", res[0]);
        assertEquals(msg, ""b"", res[1]);
        assertEquals(msg, """", res[2]);
        assertEquals(msg, noMatch + ""c"", res[3]);
        
        final String str2 = separator + ""a"" + separator;
        res = StringUtils.splitPreserveAllTokens(str2, sepStr);
        assertEquals(msg, 3, res.length);
        assertEquals(msg, """", res[0]);
        assertEquals(msg, ""a"", res[1]);
        assertEquals(msg, """", res[2]);

        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);
        assertEquals(msg, 4, res.length);
        assertEquals(msg, ""a"", res[0]);
        assertEquals(msg, ""b"", res[1]);
        assertEquals(msg, """", res[2]);
        assertEquals(msg, noMatch + ""c"", res[3]);
        
        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);
        assertEquals(msg, 4, res.length);
        assertEquals(msg, ""a"", res[0]);
        assertEquals(msg, ""b"", res[1]);
        assertEquals(msg, """", res[2]);
        assertEquals(msg, noMatch + ""c"", res[3]);
        
        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);
        assertEquals(msg, 1, res.length);
        assertEquals(msg, str, res[0]);
        
        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);
        assertEquals(msg, 2, res.length);
        assertEquals(msg, ""a"", res[0]);
        assertEquals(msg, str.substring(2), res[1]);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4934]])
72,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementBooleanArray(),"    @Test
    public void testRemoveElementBooleanArray() {
        boolean[] array;
        array = ArrayUtils.removeElements((boolean[]) null, true);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new boolean[] { true }, true);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new boolean[] { true, false }, true);
        assertTrue(Arrays.equals(new boolean[] { false }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true);
        assertTrue(Arrays.equals(new boolean[] { false, true }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeElements((boolean[]) null, true, false);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true, false);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new boolean[] { true }, true, false);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new boolean[] { true, false }, true, false);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new boolean[] { true, false }, true, true);
        assertTrue(Arrays.equals(new boolean[] { false }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, false);
        assertTrue(Arrays.equals(new boolean[] { true }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true);
        assertTrue(Arrays.equals(new boolean[] { false }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true, true, true);
        assertTrue(Arrays.equals(new boolean[] { false }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4933]])
848,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringCharChar(),"    @Test
    public void testReplaceChars_StringCharChar() {
        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));
        assertEquals("""", StringUtils.replaceChars("""", 'b', 'z'));
        assertEquals(""azcza"", StringUtils.replaceChars(""abcba"", 'b', 'z'));
        assertEquals(""abcba"", StringUtils.replaceChars(""abcba"", 'x', 'z'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4925]])
577,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testLanguagesByCountry(),"    @Test
    public void testLanguagesByCountry() {
        assertLanguageByCountry(null, new String[0]);
        assertLanguageByCountry(""GB"", new String[]{""en""});
        assertLanguageByCountry(""ZZ"", new String[0]);
        assertLanguageByCountry(""CH"", new String[]{""fr"", ""de"", ""it""});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4924]])
924,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTrimEmptyTest.java,org.apache.commons.lang3.StringUtilsTrimEmptyTest.testStripAccents(),"    @Test
    public void testStripAccents() {
        final String cue = ""\u00C7\u00FA\u00EA"";
        assertEquals( ""Failed to strip accents from "" + cue, ""Cue"", StringUtils.stripAccents(cue));

        final String lots = ""\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C7\u00C8\u00C9"" + 
                      ""\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D1\u00D2\u00D3"" + 
                      ""\u00D4\u00D5\u00D6\u00D9\u00DA\u00DB\u00DC\u00DD"";
        assertEquals( ""Failed to strip accents from "" + lots, 
                      ""AAAAAACEEEEIIIINOOOOOUUUUY"", 
                      StringUtils.stripAccents(lots));

        assertNull( ""Failed null safety"", StringUtils.stripAccents(null) );
        assertEquals( ""Failed empty String"", """", StringUtils.stripAccents("""") );
        assertEquals( ""Failed to handle non-accented text"", ""control"", StringUtils.stripAccents(""control"") );
        assertEquals( ""Failed to handle easy example"", ""eclair"", StringUtils.stripAccents(""\u00E9clair"") );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4919]])
33,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArrayNegativeIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllBooleanArrayNegativeIndex() {
        ArrayUtils.removeAll(new boolean[] { true, false }, -1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4914]])
712,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testStandaloneAmphersand(),"    @Test
    public void testStandaloneAmphersand() {
        assertEquals(""<P&O>"", StringEscapeUtils.unescapeHtml4(""&lt;P&O&gt;""));
        assertEquals(""test & <"", StringEscapeUtils.unescapeHtml4(""test & &lt;""));
        assertEquals(""<P&O>"", StringEscapeUtils.unescapeXml(""&lt;P&O&gt;""));
        assertEquals(""test & <"", StringEscapeUtils.unescapeXml(""test & &lt;""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4905]])
450,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testGetClassByNormalNameArrays2D(),"    @Test
    public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException {
        assertEquals( int[][].class, ClassUtils.getClass( ""int[][]"" ) );
        assertEquals( long[][].class, ClassUtils.getClass( ""long[][]"" ) );
        assertEquals( short[][].class, ClassUtils.getClass( ""short[][]"" ) );
        assertEquals( byte[][].class, ClassUtils.getClass( ""byte[][]"" ) );
        assertEquals( char[][].class, ClassUtils.getClass( ""char[][]"" ) );
        assertEquals( float[][].class, ClassUtils.getClass( ""float[][]"" ) );
        assertEquals( double[][].class, ClassUtils.getClass( ""double[][]"" ) );
        assertEquals( boolean[][].class, ClassUtils.getClass( ""boolean[][]"" ) );
        assertEquals( String[][].class, ClassUtils.getClass( ""java.lang.String[][]"" ) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4904]])
673,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullNull(),"    @Test
    public void testSerializeStreamNullNull() throws Exception {
        try {
            SerializationUtils.serialize(null, null);
        } catch (final IllegalArgumentException ex) {
            return;
        }
        fail();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4904]])
690,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testCloneNull(),"    @Test
    public void testCloneNull() throws Exception {
        final Object test = SerializationUtils.clone(null);
        assertNull(test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4893]])
410,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testIsAsciiNumeric_char(),"    @Test
    public void testIsAsciiNumeric_char() {
        assertFalse(CharUtils.isAsciiNumeric('a'));
        assertFalse(CharUtils.isAsciiNumeric('A'));
        assertTrue(CharUtils.isAsciiNumeric('3'));
        assertFalse(CharUtils.isAsciiNumeric('-'));
        assertFalse(CharUtils.isAsciiNumeric('\n'));
        assertFalse(CharUtils.isAsciiNumeric(CHAR_COPY));
       
        for (int i = 0; i < 196; i++) {
            if (i >= '0' && i <= '9') {
                assertTrue(CharUtils.isAsciiNumeric((char) i));
            } else {
                assertFalse(CharUtils.isAsciiNumeric((char) i));
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4892]])
446,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testGetClassInvalidArguments(),"    @Test
    public void testGetClassInvalidArguments() throws Exception {
        assertGetClassThrowsNullPointerException( null );
        assertGetClassThrowsClassNotFound( ""[][][]"" );
        assertGetClassThrowsClassNotFound( ""[[]"" );
        assertGetClassThrowsClassNotFound( ""["" );
        assertGetClassThrowsClassNotFound( ""java.lang.String]["" );
        assertGetClassThrowsClassNotFound( "".hello.world"" );
        assertGetClassThrowsClassNotFound( ""hello..world"" );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4890]])
660,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIsOverlappedBy(),"    @Test
    public void testIsOverlappedBy() {

        // null handling
        assertFalse(intRange.isOverlappedBy(null));

        // easy inside range
        assertTrue(intRange.isOverlappedBy(Range.between(12, 18)));

        // outside range on each side
        assertFalse(intRange.isOverlappedBy(Range.between(32, 45)));
        assertFalse(intRange.isOverlappedBy(Range.between(2, 8)));

        // equals range
        assertTrue(intRange.isOverlappedBy(Range.between(10, 20)));

        // overlaps
        assertTrue(intRange.isOverlappedBy(Range.between(9, 14)));
        assertTrue(intRange.isOverlappedBy(Range.between(16, 21)));

        // touches lower boundary
        assertTrue(intRange.isOverlappedBy(Range.between(10, 19)));
        assertTrue(intRange.isOverlappedBy(Range.between(10, 21)));

        // touches upper boundary
        assertTrue(intRange.isOverlappedBy(Range.between(11, 20)));
        assertTrue(intRange.isOverlappedBy(Range.between(9, 20)));
        
        // negative
        assertFalse(intRange.isOverlappedBy(Range.between(-11, -18)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4886]])
505,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testLongToBinary(),"    @Test
    public void testLongToBinary() {
        assertBinaryEquals(
            new boolean[]{},
            Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0));
        assertBinaryEquals(
            new boolean[]{},
            Conversion.longToBinary(0x0000000000000000L, 100, new boolean[]{}, 0, 0));
        assertBinaryEquals(
            new boolean[]{},
            Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 100, 0));
        assertBinaryEquals(
            new boolean[69],
            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0));

        assertBinaryEquals(
            new boolean[]{
                true, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1));
        assertBinaryEquals(
            new boolean[]{
                true, true, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, true, false, true, true, true, true, false, true, true,
                false, false, true, true, true, true, false, true, false, true, false, true,
                false, false, false, false, true, false, false, true, false, false, false,
                true, true, true, true, false, false, true, true, false, true, false, true,
                false, false, false, true, false, true, true, false, false, false, true, false,
                false, true, false, false, false, false, false, false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, true, false, true, true, true, true, false, true, true,
                false, false, true, true, true, true, false, true, false, true, false, true,
                false, false, false, false, true, false, false, true, false, false, false,
                true, true, true, true, false, false, true, true, false, true, false, true,
                false, false, false, true, false, true, true, false, false, false, true, false,
                false, true, false, false, false, false, false, false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64));
        assertBinaryEquals(
            new boolean[]{
                false, false, true, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false, false, false, false, false, false,
                false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1));
        assertBinaryEquals(
            new boolean[]{
                false, false, true, true, true, true, false, true, true, true, true, false,
                true, true, false, false, true, true, true, true, false, true, false, true,
                false, true, false, false, false, false, true, false, false, true, false,
                false, false, true, true, true, true, false, false, true, true, false, true,
                false, true, false, false, false, true, false, true, true, false, false, false,
                true, false, false, true, false, false, false, false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, false, true, true, true, true, false, true, true, false,
                false, true, true, true, true, false, true, false, true, false, true, false,
                false, false, false, true, false, false, true, false, false, false, true, true,
                true, true, false, false, true, true, false, true, false, true, false, false,
                false, true, false, true, true, false, false, false, true, false, false, true,
                false, false, false, false, false, false, false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63));
        assertBinaryEquals(
            new boolean[]{
                true, true, false, true, true, true, true, false, true, true, false, false,
                true, true, true, true, false, true, false, true, false, true, false, false,
                false, false, true, false, false, true, false, false, false, true, true, true,
                true, false, false, true, true, false, true, false, true, false, false, false,
                true, false, true, true, false, false, false, true, false, false, true, false,
                false, false, false, false, false, false, false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62));

        // assertBinaryEquals(new boolean[]{false,false,false, true, true, false, true, true,
        // true, true, false, true, true, false, false, true, true, true, true, false, true,
        // false, true, false, true, false, false, false, false, true, false, false, true,
        // false, false, false, true, true, true, true, false, false, true, true, false, true,
        // false, true, false, false, false, true, false, true, true, false, false, false, true,
        // false, false, true, false, false, false
        // ,false,false,false,false},Conversion.longToBinary(0x1234567890ABCDEFL, 2,new
        // boolean[69], 3, 63));//rejected by assertion
        assertBinaryEquals(
            new boolean[]{
                false, false, false, true, true, false, true, true, true, true, false, true,
                true, false, false, true, true, true, true, false, true, false, true, false,
                true, false, false, false, false, true, false, false, true, false, false,
                false, true, true, true, true, false, false, true, true, false, true, false,
                true, false, false, false, true, false, true, true, false, false, false, true,
                false, false, true, false, false, false, false, false, false, false},
            Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4884]])
419,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Class(),"    @Test
    public void test_getPackageName_Class() {
        assertEquals(""java.lang"", ClassUtils.getPackageName(String.class));
        assertEquals(""java.util"", ClassUtils.getPackageName(Map.Entry.class));
        assertEquals("""", ClassUtils.getPackageName((Class<?>)null));

        // LANG-535
        assertEquals(""java.lang"", ClassUtils.getPackageName(String[].class));

        // Primitive Arrays
        assertEquals("""", ClassUtils.getPackageName(boolean[].class));
        assertEquals("""", ClassUtils.getPackageName(byte[].class));
        assertEquals("""", ClassUtils.getPackageName(char[].class));
        assertEquals("""", ClassUtils.getPackageName(short[].class));
        assertEquals("""", ClassUtils.getPackageName(int[].class));
        assertEquals("""", ClassUtils.getPackageName(long[].class));
        assertEquals("""", ClassUtils.getPackageName(float[].class));
        assertEquals("""", ClassUtils.getPackageName(double[].class));

        // Arrays of arrays of ...
        assertEquals(""java.lang"", ClassUtils.getPackageName(String[][].class));
        assertEquals(""java.lang"", ClassUtils.getPackageName(String[][][].class));
        assertEquals(""java.lang"", ClassUtils.getPackageName(String[][][][].class));
        
        // On-the-fly types
        class Named extends Object {}
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageName(new Object(){}.getClass()));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageName(Named.class));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4881]])
606,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian(),"    @Test
    public void testComparatorMedian() {
        final CharSequenceComparator cmp = new CharSequenceComparator();
        final NonComparableCharSequence foo = new NonComparableCharSequence(""foo"");
        final NonComparableCharSequence bar = new NonComparableCharSequence(""bar"");
        final NonComparableCharSequence baz = new NonComparableCharSequence(""baz"");
        final NonComparableCharSequence blah = new NonComparableCharSequence(""blah"");
        final NonComparableCharSequence wah = new NonComparableCharSequence(""wah"");
        assertSame(foo, ObjectUtils.median(cmp, foo));
        assertSame(bar, ObjectUtils.median(cmp, foo, bar));
        assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz));
        assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz, blah));
        assertSame(blah, ObjectUtils.median(cmp, foo, bar, baz, blah, wah));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4878]])
580,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.assertUnmodifiableCollection(java.util.Collection<?>),"    private static void assertUnmodifiableCollection(final Collection<?> coll) {
        try {
            coll.add(null);
            fail();
        } catch (final UnsupportedOperationException ex) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4877]])
1,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testEquivalence(),"    @Test
    public void testEquivalence() {
        assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class)));
        assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4872]])
260,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testByte(),"    @Test
    public void testByte() {
        assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));
        assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));
        assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));
        assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));
        assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));
        assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));
        assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));
        assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));
        assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));
        assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false));
        assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));
        assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));
        assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));
        assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));
        assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));
        assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));
        assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));
        assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));
        assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));
        final byte clearedBit = new BitField(0x40).setByteBoolean((byte) - 63, false);

        assertFalse(new BitField(0x40).isSet(clearedBit));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4872]])
783,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsIsTest.java,org.apache.commons.lang3.StringUtilsIsTest.testIsAlphaspace(),"    @Test
    public void testIsAlphaspace() {
        assertFalse(StringUtils.isAlphaSpace(null));
        assertTrue(StringUtils.isAlphaSpace(""""));
        assertTrue(StringUtils.isAlphaSpace("" ""));
        assertTrue(StringUtils.isAlphaSpace(""a""));
        assertTrue(StringUtils.isAlphaSpace(""A""));
        assertTrue(StringUtils.isAlphaSpace(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));
        assertTrue(StringUtils.isAlphaSpace(""ham kso""));
        assertFalse(StringUtils.isAlphaSpace(""1""));
        assertFalse(StringUtils.isAlphaSpace(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));
        assertFalse(StringUtils.isAlphaSpace(""_""));
        assertFalse(StringUtils.isAlphaSpace(""hkHKHik*khbkuh""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4868]])
931,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testIS_OS(),"    @Test
    public void testIS_OS() {
        final String osName = System.getProperty(""os.name"");
        if (osName == null) {
            assertFalse(SystemUtils.IS_OS_WINDOWS);
            assertFalse(SystemUtils.IS_OS_UNIX);
            assertFalse(SystemUtils.IS_OS_SOLARIS);
            assertFalse(SystemUtils.IS_OS_LINUX);
            assertFalse(SystemUtils.IS_OS_MAC_OSX);
        } else if (osName.startsWith(""Windows"")) {
            assertFalse(SystemUtils.IS_OS_UNIX);
            assertTrue(SystemUtils.IS_OS_WINDOWS);
        } else if (osName.startsWith(""Solaris"")) {
            assertTrue(SystemUtils.IS_OS_SOLARIS);
            assertTrue(SystemUtils.IS_OS_UNIX);
            assertFalse(SystemUtils.IS_OS_WINDOWS);
        } else if (osName.toLowerCase(Locale.ENGLISH).startsWith(""linux"")) {
            assertTrue(SystemUtils.IS_OS_LINUX);
            assertTrue(SystemUtils.IS_OS_UNIX);
            assertFalse(SystemUtils.IS_OS_WINDOWS);
        } else if (osName.startsWith(""Mac OS X"")) {
            assertTrue(SystemUtils.IS_OS_MAC_OSX);
            assertTrue(SystemUtils.IS_OS_UNIX);
            assertFalse(SystemUtils.IS_OS_WINDOWS);
        } else if (osName.startsWith(""OS/2"")) {
            assertTrue(SystemUtils.IS_OS_OS2);
            assertFalse(SystemUtils.IS_OS_UNIX);
            assertFalse(SystemUtils.IS_OS_WINDOWS);
        } else if (osName.startsWith(""SunOS"")) {
            assertTrue(SystemUtils.IS_OS_SUN_OS);
            assertTrue(SystemUtils.IS_OS_UNIX);
            assertFalse(SystemUtils.IS_OS_WINDOWS);
        } else if (osName.startsWith(""FreeBSD"")) {
            assertTrue(SystemUtils.IS_OS_FREE_BSD);
            assertTrue(SystemUtils.IS_OS_UNIX);
            assertFalse(SystemUtils.IS_OS_WINDOWS);
        } else {
            System.out.println(""Can't test IS_OS value: ""+osName);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4863]])
514,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_isEnum(),"    @Test
    public void test_isEnum() {
        assertTrue(EnumUtils.isValidEnum(Traffic.class, ""RED""));
        assertTrue(EnumUtils.isValidEnum(Traffic.class, ""AMBER""));
        assertTrue(EnumUtils.isValidEnum(Traffic.class, ""GREEN""));
        assertFalse(EnumUtils.isValidEnum(Traffic.class, ""PURPLE""));
        assertFalse(EnumUtils.isValidEnum(Traffic.class, null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4863]])
397,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToIntValue_char_int(),"    @Test
    public void testToIntValue_char_int() {
        assertEquals(0, CharUtils.toIntValue('0', -1));
        assertEquals(3, CharUtils.toIntValue('3', -1));
        assertEquals(-1, CharUtils.toIntValue('a', -1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4862]])
972,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testValidIndex_withMessage_array(),"    @Test
    public void testValidIndex_withMessage_array() {
        final Object[] array = new Object[2];
        Validate.validIndex(array, 0, ""Broken: "");
        Validate.validIndex(array, 1, ""Broken: "");
        try {
            Validate.validIndex(array, -1, ""Broken: "");
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""Broken: "", ex.getMessage());
        }
        try {
            Validate.validIndex(array, 2, ""Broken: "");
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""Broken: "", ex.getMessage());
        }
        
        final String[] strArray = new String[] {""Hi""};
        final String[] test = Validate.noNullElements(strArray, ""Message"");
        assertSame(strArray, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4853]])
339,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharEncodingTest.java,org.apache.commons.lang3.CharEncodingTest.testConstructor(),"    @Test
    public void testConstructor() {
        new CharEncoding();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4845]])
368,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testConstructor_String_combo(),"    @Test
    public void testConstructor_String_combo() {
        CharSet set;
        CharRange[] array;
        
        set = CharSet.getInstance(""abc"");
        array = set.getCharRanges();
        assertEquals(3, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('c')));
        
        set = CharSet.getInstance(""a-ce-f"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'c')));
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
        
        set = CharSet.getInstance(""ae-f"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
        
        set = CharSet.getInstance(""e-fa"");
        array = set.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
        
        set = CharSet.getInstance(""ae-fm-pz"");
        array = set.getCharRanges();
        assertEquals(4, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('m', 'p')));
        assertTrue(ArrayUtils.contains(array, CharRange.is('z')));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4844]])
687,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesNull(),"    @Test
    public void testDeserializeBytesNull() throws Exception {
        try {
            SerializationUtils.deserialize((byte[]) null);
        } catch (final IllegalArgumentException ex) {
            return;
        }
        fail();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4844]])
823,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorString(),"    @Test
    public void testJoin_IteratorString() {
        assertEquals(null, StringUtils.join((Iterator<?>) null, null));
        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));
        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), """"));
        assertEquals(""foo"", StringUtils.join(Collections.singleton(""foo"").iterator(), ""x""));
        assertEquals(""foo"", StringUtils.join(Collections.singleton(""foo"").iterator(), null));

        assertEquals("""", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));
        
        assertEquals("""", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));
        assertEquals("""", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), """"));
        assertEquals("""", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));
        
        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4838]])
366,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testGetInstance_Stringarray(),"    @Test
    public void testGetInstance_Stringarray() {
        assertEquals(null, CharSet.getInstance((String[]) null));
        assertEquals(""[]"", CharSet.getInstance(new String[0]).toString());
        assertEquals(""[]"", CharSet.getInstance(new String[] {null}).toString());
        assertEquals(""[a-e]"", CharSet.getInstance(new String[] {""a-e""}).toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4836]])
420,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_String(),"    @Test
    public void test_getPackageName_String() {
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageName(ClassUtils.class.getName()));
        assertEquals(""java.util"", ClassUtils.getPackageName(Map.Entry.class.getName()));
        assertEquals("""", ClassUtils.getPackageName((String)null));
        assertEquals("""", ClassUtils.getPackageName(""""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4835]])
974,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testValidIndex_withMessage_collection(),"    @Test
    public void testValidIndex_withMessage_collection() {
        final Collection<String> coll = new ArrayList<String>();
        coll.add(null);
        coll.add(null);
        Validate.validIndex(coll, 0, ""Broken: "");
        Validate.validIndex(coll, 1, ""Broken: "");
        try {
            Validate.validIndex(coll, -1, ""Broken: "");
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""Broken: "", ex.getMessage());
        }
        try {
            Validate.validIndex(coll, 2, ""Broken: "");
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""Broken: "", ex.getMessage());
        }
        
        final List<String> strColl = Arrays.asList(new String[] {""Hi""});
        final List<String> test = Validate.validIndex(strColl, 0, ""Message"");
        assertSame(strColl, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4834]])
158,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameLengthChar(),"    @Test
    public void testSameLengthChar() {
        final char[] nullArray = null;
        final char[] emptyArray = new char[0];
        final char[] oneArray = new char[] {'f'};
        final char[] twoArray = new char[] {'d', 't'};
        
        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
        
        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4833]])
491,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryToLong(),"    @Test
    public void testBinaryToLong() {
        final boolean[] src = new boolean[]{
            false, false, true, true, true, false, true, true, true, true, true, true, true,
            false, false, false, true, true, true, true, false, false, false, false, false,
            false, true, true, true, false, false, false, false, false, false, false, true,
            true, true, true, true, false, false, false, false, true, false, false, true, true,
            false, false, false, false, true, false, true, false, true, false, false, true,
            true, false, true, true, true, false, false, false, false, true};
        // conversion of ""CDF1F0C10F12345678"" by HexToBinary
        assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0));
        assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4));
        assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4));
        assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4));
        assertEquals(
            0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));
        assertEquals(
            0x1234567876BCDEF0L,
            Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4830]])
608,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian_nullItems(),"    @Test(expected = NullPointerException.class)
    public void testComparatorMedian_nullItems() {
        ObjectUtils.median(new CharSequenceComparator(), (CharSequence[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4829]])
684,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesNull(),"    @Test
    public void testSerializeBytesNull() throws Exception {
        final byte[] testBytes = SerializationUtils.serialize(null);

        final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
        final ObjectOutputStream oos = new ObjectOutputStream(streamReal);
        oos.writeObject(null);
        oos.flush();
        oos.close();

        final byte[] realBytes = streamReal.toByteArray();
        assertEquals(testBytes.length, realBytes.length);
        for (int i = 0; i < realBytes.length; i++) {
            assertEquals(realBytes[i], testBytes[i]);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4827]])
886,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringString(),"    @Test
    public void testGetLevenshteinDistance_StringString() {
        assertEquals(0, StringUtils.getLevenshteinDistance("""", """") );
        assertEquals(1, StringUtils.getLevenshteinDistance("""", ""a"") );
        assertEquals(7, StringUtils.getLevenshteinDistance(""aaapppp"", """") );
        assertEquals(1, StringUtils.getLevenshteinDistance(""frog"", ""fog"") );
        assertEquals(3, StringUtils.getLevenshteinDistance(""fly"", ""ant"") );
        assertEquals(7, StringUtils.getLevenshteinDistance(""elephant"", ""hippo"") );
        assertEquals(7, StringUtils.getLevenshteinDistance(""hippo"", ""elephant"") );
        assertEquals(8, StringUtils.getLevenshteinDistance(""hippo"", ""zzzzzzzz"") );
        assertEquals(8, StringUtils.getLevenshteinDistance(""zzzzzzzz"", ""hippo"") );
        assertEquals(1, StringUtils.getLevenshteinDistance(""hello"", ""hallo"") );
        try {
            @SuppressWarnings(""unused"")
            final
            int d = StringUtils.getLevenshteinDistance(""a"", null);
            fail(""expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            // empty
        }
        try {
            @SuppressWarnings(""unused"")
            final
            int d = StringUtils.getLevenshteinDistance(null, ""a"");
            fail(""expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            // empty
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4820]])
817,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfLongs(),"    @Test
    public void testJoin_ArrayOfLongs() {
        assertEquals(null, StringUtils.join((long[]) null, ','));
        assertEquals(""1;2"", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR));
        assertEquals(""2"", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4819]])
757,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOf_charInt(),"    @Test
    public void testIndexOf_charInt() {
        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));
        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));
        assertEquals(-1, StringUtils.indexOf("""", ' ', 0));
        assertEquals(-1, StringUtils.indexOf("""", ' ', -1));
        assertEquals(0, StringUtils.indexOf(""aabaabaa"", 'a', 0));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", 'b', 0));
        assertEquals(5, StringUtils.indexOf(""aabaabaa"", 'b', 3));
        assertEquals(-1, StringUtils.indexOf(""aabaabaa"", 'b', 9));
        assertEquals(2, StringUtils.indexOf(""aabaabaa"", 'b', -1));

        assertEquals(5, StringUtils.indexOf(new StringBuilder(""aabaabaa""), 'b', 3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4818]])
559,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/JavaVersionTest.java,org.apache.commons.lang3.JavaVersionTest.testGetJavaVersion(),"    @Test
    public void testGetJavaVersion() {
        assertEquals(""0.9 failed"", JAVA_0_9, get(""0.9""));
        assertEquals(""1.1 failed"", JAVA_1_1, get(""1.1""));
        assertEquals(""1.2 failed"", JAVA_1_2, get(""1.2""));
        assertEquals(""1.3 failed"", JAVA_1_3, get(""1.3""));
        assertEquals(""1.4 failed"", JAVA_1_4, get(""1.4""));
        assertEquals(""1.5 failed"", JAVA_1_5, get(""1.5""));
        assertEquals(""1.6 failed"", JAVA_1_6, get(""1.6""));
        assertEquals(""1.7 failed"", JAVA_1_7, get(""1.7""));
        assertEquals(""1.8 failed"", JAVA_1_8, get(""1.8""));
        assertNull(""1.9 unexpectedly worked"", get(""1.9""));
        assertEquals(""Wrapper method failed"", get(""1.5""), getJavaVersion(""1.5""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4818]])
374,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testHashCode(),"    @Test
    public void testHashCode() {
        final CharSet abc = CharSet.getInstance(""abc"");
        final CharSet abc2 = CharSet.getInstance(""abc"");
        final CharSet atoc = CharSet.getInstance(""a-c"");
        final CharSet atoc2 = CharSet.getInstance(""a-c"");
        final CharSet notatoc = CharSet.getInstance(""^a-c"");
        final CharSet notatoc2 = CharSet.getInstance(""^a-c"");
        
        assertEquals(abc.hashCode(), abc.hashCode());
        assertEquals(abc.hashCode(), abc2.hashCode());
        assertEquals(atoc.hashCode(), atoc.hashCode());
        assertEquals(atoc.hashCode(), atoc2.hashCode());
        assertEquals(notatoc.hashCode(), notatoc.hashCode());
        assertEquals(notatoc.hashCode(), notatoc2.hashCode());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4818]])
657,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testElementCompareTo(),"    @Test
    public void testElementCompareTo() {
        try {
            intRange.elementCompareTo(null);
            fail(""NullPointerException should have been thrown"");
        } catch(final NullPointerException npe) {
            // expected
        }
        
        assertEquals(-1, intRange.elementCompareTo(5));
        assertEquals(0, intRange.elementCompareTo(10));
        assertEquals(0, intRange.elementCompareTo(15));
        assertEquals(0, intRange.elementCompareTo(20));
        assertEquals(1, intRange.elementCompareTo(25));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4817]])
677,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeClassCastException(),"    @Test(expected=ClassCastException.class)
    public void testDeserializeClassCastException() {
        final String value = ""Hello"";
        final byte[] serialized = SerializationUtils.serialize(value);
        Assert.assertEquals(value, SerializationUtils.deserialize(serialized));
        // Causes ClassCastException in call site, not in SerializationUtils.deserialize
        @SuppressWarnings(""unused"") // needed to cause Exception
        final Integer i = SerializationUtils.deserialize(serialized);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4817]])
23,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayToObjectArray(),"    @Test
    public void testAddObjectArrayToObjectArray() {
        assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));
        Object[] newArray;
        final String[] stringArray1 = new String[]{""a"", ""b"", ""c""};
        final String[] stringArray2 = new String[]{""1"", ""2"", ""3""};
        newArray = ArrayUtils.addAll(stringArray1, (String[]) null);
        assertNotSame(stringArray1, newArray);
        assertTrue(Arrays.equals(stringArray1, newArray));
        assertTrue(Arrays.equals(new String[]{""a"", ""b"", ""c""}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        newArray = ArrayUtils.addAll(null, stringArray2);
        assertNotSame(stringArray2, newArray);
        assertTrue(Arrays.equals(stringArray2, newArray));
        assertTrue(Arrays.equals(new String[]{""1"", ""2"", ""3""}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        newArray = ArrayUtils.addAll(stringArray1, stringArray2);
        assertTrue(Arrays.equals(new String[]{""a"", ""b"", ""c"", ""1"", ""2"", ""3""}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));
        assertTrue(Arrays.equals(new String[]{}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));
        assertTrue(Arrays.equals(new String[]{}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));
        assertTrue(Arrays.equals(new String[]{}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        final String[] stringArrayNull = new String []{null};
        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);
        assertTrue(Arrays.equals(new String[]{null, null}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());

        // boolean
        assertTrue( Arrays.equals( new boolean[] { true, false, false, true },
            ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );

        assertTrue( Arrays.equals( new boolean[] { false, true },
            ArrayUtils.addAll( null, new boolean[] { false, true } ) ) );

        assertTrue( Arrays.equals( new boolean[] { true, false },
            ArrayUtils.addAll( new boolean[] { true, false }, null ) ) );

        // char
        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' },
            ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );

        assertTrue( Arrays.equals( new char[] { 'c', 'd' },
            ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) );

        assertTrue( Arrays.equals( new char[] { 'a', 'b' },
            ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) );

        // byte
        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 },
            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );

        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 },
            ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) );

        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 },
            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) );

        // short
        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 },
            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );

        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 },
            ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) );

        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 },
            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) );

        // int
        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 },
            ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );

        assertTrue( Arrays.equals( new int[] { -1000, -1 },
            ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) );

        assertTrue( Arrays.equals( new int[] { 1, 1000 },
            ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) );

        // long
        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L },
            ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );

        assertTrue( Arrays.equals( new long[] { 1000L, -1000L },
            ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) );

        assertTrue( Arrays.equals( new long[] { 1L, -1L },
            ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) );

        // float
        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f },
            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );

        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f },
            ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) );

        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f },
            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) );

        // double
        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 },
            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );

        assertTrue( Arrays.equals( new double[] { 0, 9.99 },
            ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) );

        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI },
            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) );

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4814]])
832,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt(),"    @Test
    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {
        assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ""."", -1 ) ) ;

        assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( """", ""."", -1 ).length ) ;

        // test whitespace
        String input = ""ab   de fg"" ;
        String[] expected = new String[] { ""ab"", """", """", ""de"", ""fg"" } ;

        String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ;
        assertEquals( expected.length, actual.length ) ;
        for ( int i = 0 ; i < actual.length ; i+= 1 ) {
            assertEquals( expected[i], actual[i] );
        }

        // test delimiter singlechar
        input = ""1::2:::3::::4"";
        expected = new String[] { ""1"", """", ""2"", """", """", ""3"", """", """", """", ""4"" };

        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "":"", -1 ) ;
        assertEquals( expected.length, actual.length ) ;
        for ( int i = 0 ; i < actual.length ; i+= 1 ) {
            assertEquals( expected[i], actual[i] );
        }

        // test delimiter multichar
        input = ""1::2:::3::::4"";
        expected = new String[] { ""1"", ""2"", "":3"", """", ""4"" };

        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ""::"", -1 ) ;
        assertEquals( expected.length, actual.length ) ;
        for ( int i = 0 ; i < actual.length ; i+= 1 ) {
            assertEquals( expected[i], actual[i] );
        }

        // test delimiter char with max
        input = ""1::2::3:4"";
        expected = new String[] { ""1"", """", ""2"", "":3:4"" };

        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "":"", 4 ) ;
        assertEquals( expected.length, actual.length ) ;
        for ( int i = 0 ; i < actual.length ; i+= 1 ) {
            assertEquals( expected[i], actual[i] );
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4811]])
174,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOf(),"    @Test
    public void testLastIndexOf() {
        final Object[] array = new Object[] { ""0"", ""1"", ""2"", ""3"", null, ""0"" };
        assertEquals(-1, ArrayUtils.lastIndexOf(null, null));
        assertEquals(-1, ArrayUtils.lastIndexOf(null, ""0""));
        assertEquals(5, ArrayUtils.lastIndexOf(array, ""0""));
        assertEquals(1, ArrayUtils.lastIndexOf(array, ""1""));
        assertEquals(2, ArrayUtils.lastIndexOf(array, ""2""));
        assertEquals(3, ArrayUtils.lastIndexOf(array, ""3""));
        assertEquals(4, ArrayUtils.lastIndexOf(array, null));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, ""notInArray""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4810]])
679,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamNull(),"    @Test
    public void testDeserializeStreamNull() throws Exception {
        try {
            SerializationUtils.deserialize((InputStream) null);
        } catch (final IllegalArgumentException ex) {
            return;
        }
        fail();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4809]])
782,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsIsTest.java,org.apache.commons.lang3.StringUtilsIsTest.testIsWhitespace(),"    @Test
    public void testIsWhitespace() {
        assertFalse(StringUtils.isWhitespace(null));
        assertTrue(StringUtils.isWhitespace(""""));
        assertTrue(StringUtils.isWhitespace("" ""));
        assertTrue(StringUtils.isWhitespace(""\t \n \t""));
        assertFalse(StringUtils.isWhitespace(""\t aa\n \t""));
        assertTrue(StringUtils.isWhitespace("" ""));
        assertFalse(StringUtils.isWhitespace("" a ""));
        assertFalse(StringUtils.isWhitespace(""a  ""));
        assertFalse(StringUtils.isWhitespace(""  a""));
        assertFalse(StringUtils.isWhitespace(""aba""));
        assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));
        assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4808]])
376,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testSerialization(),"    @Test
    public void testSerialization() {
        CharSet set = CharSet.getInstance(""a"");
        assertEquals(set, SerializationUtils.clone(set)); 
        set = CharSet.getInstance(""a-e"");
        assertEquals(set, SerializationUtils.clone(set)); 
        set = CharSet.getInstance(""be-f^a-z"");
        assertEquals(set, SerializationUtils.clone(set)); 
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4808]])
191,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContainsShort(),"    @Test
    public void testContainsShort() {
        short[] array = null;
        assertFalse(ArrayUtils.contains(array, (short) 1));
        array = new short[] { 0, 1, 2, 3, 0 };
        assertTrue(ArrayUtils.contains(array, (short) 0));
        assertTrue(ArrayUtils.contains(array, (short) 1));
        assertTrue(ArrayUtils.contains(array, (short) 2));
        assertTrue(ArrayUtils.contains(array, (short) 3));
        assertFalse(ArrayUtils.contains(array, (short) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4805]])
826,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testSplit_String(),"    @Test
    public void testSplit_String() {
        assertArrayEquals(null, StringUtils.split(null));
        assertEquals(0, StringUtils.split("""").length);
        
        String str = ""a b  .c"";
        String[] res = StringUtils.split(str);
        assertEquals(3, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"", res[1]);
        assertEquals("".c"", res[2]);
        
        str = "" a "";
        res = StringUtils.split(str);
        assertEquals(1, res.length);
        assertEquals(""a"", res[0]);
        
        str = ""a"" + WHITESPACE + ""b"" + NON_WHITESPACE + ""c"";
        res = StringUtils.split(str);
        assertEquals(2, res.length);
        assertEquals(""a"", res[0]);
        assertEquals(""b"" + NON_WHITESPACE + ""c"", res[1]);                       
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4804]])
141,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyByteObject(),"    @Test
    public void testNullToEmptyByteObject() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null));
        // Test valid array handling
        final Byte[] original = new Byte[] {0x0F, 0x0E};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final Byte[] empty = new Byte[]{};
        final Byte[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4802]])
928,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testGetUserDir(),"    @Test
    public void testGetUserDir() {
        final File dir = SystemUtils.getUserDir();
        Assert.assertNotNull(dir);
        Assert.assertTrue(dir.exists());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4800]])
973,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testValidIndex_array(),"    @Test
    public void testValidIndex_array() {
        final Object[] array = new Object[2];
        Validate.validIndex(array, 0);
        Validate.validIndex(array, 1);
        try {
            Validate.validIndex(array, -1);
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""The validated array index is invalid: -1"", ex.getMessage());
        }
        try {
            Validate.validIndex(array, 2);
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""The validated array index is invalid: 2"", ex.getMessage());
        }
        
        final String[] strArray = new String[] {""Hi""};
        final String[] test = Validate.noNullElements(strArray);
        assertSame(strArray, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4800]])
829,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,"org.apache.commons.lang3.StringUtilsTest.innerTestSplit(char, java.lang.String, char)","    private void innerTestSplit(final char separator, final String sepStr, final char noMatch) {
        final String msg = ""Failed on separator hex("" + Integer.toHexString(separator) +
            ""), noMatch hex("" + Integer.toHexString(noMatch) + ""), sepStr("" + sepStr + "")"";
        
        final String str = ""a"" + separator + ""b"" + separator + separator + noMatch + ""c"";
        String[] res;
        // (str, sepStr)
        res = StringUtils.split(str, sepStr);
        assertEquals(msg, 3, res.length);
        assertEquals(msg, ""a"", res[0]);
        assertEquals(msg, ""b"", res[1]);
        assertEquals(msg, noMatch + ""c"", res[2]);
        
        final String str2 = separator + ""a"" + separator;
        res = StringUtils.split(str2, sepStr);
        assertEquals(msg, 1, res.length);
        assertEquals(msg, ""a"", res[0]);

        res = StringUtils.split(str, sepStr, -1);
        assertEquals(msg, 3, res.length);
        assertEquals(msg, ""a"", res[0]);
        assertEquals(msg, ""b"", res[1]);
        assertEquals(msg, noMatch + ""c"", res[2]);
        
        res = StringUtils.split(str, sepStr, 0);
        assertEquals(msg, 3, res.length);
        assertEquals(msg, ""a"", res[0]);
        assertEquals(msg, ""b"", res[1]);
        assertEquals(msg, noMatch + ""c"", res[2]);
        
        res = StringUtils.split(str, sepStr, 1);
        assertEquals(msg, 1, res.length);
        assertEquals(msg, str, res[0]);
        
        res = StringUtils.split(str, sepStr, 2);
        assertEquals(msg, 2, res.length);
        assertEquals(msg, ""a"", res[0]);
        assertEquals(msg, str.substring(2), res[1]);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4800]])
44,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArrayOutOfBoundsIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllCharArrayOutOfBoundsIndex() {
        ArrayUtils.removeAll(new char[] { 'a', 'b' }, 2);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4799]])
717,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvString(),"    @Test
    public void testUnescapeCsvString() throws Exception {
        assertEquals(""foo.bar"",          StringEscapeUtils.unescapeCsv(""foo.bar""));
        assertEquals(""foo,bar"",      StringEscapeUtils.unescapeCsv(""\""foo,bar\""""));
        assertEquals(""foo\nbar"",     StringEscapeUtils.unescapeCsv(""\""foo\nbar\""""));
        assertEquals(""foo\rbar"",     StringEscapeUtils.unescapeCsv(""\""foo\rbar\""""));
        assertEquals(""foo\""bar"",   StringEscapeUtils.unescapeCsv(""\""foo\""\""bar\""""));
        assertEquals("""",   StringEscapeUtils.unescapeCsv(""""));
        assertEquals(null, StringEscapeUtils.unescapeCsv(null));

        assertEquals(""\""foo.bar\"""",          StringEscapeUtils.unescapeCsv(""\""foo.bar\""""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4799]])
469,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testHexDigitToBinary(),"    @Test
    public void testHexDigitToBinary() {
        assertBinaryEquals(
            new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0'));
        assertBinaryEquals(
            new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1'));
        assertBinaryEquals(
            new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2'));
        assertBinaryEquals(
            new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3'));
        assertBinaryEquals(
            new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4'));
        assertBinaryEquals(
            new boolean[]{true, false, true, false}, Conversion.hexDigitToBinary('5'));
        assertBinaryEquals(
            new boolean[]{false, true, true, false}, Conversion.hexDigitToBinary('6'));
        assertBinaryEquals(
            new boolean[]{true, true, true, false}, Conversion.hexDigitToBinary('7'));
        assertBinaryEquals(
            new boolean[]{false, false, false, true}, Conversion.hexDigitToBinary('8'));
        assertBinaryEquals(
            new boolean[]{true, false, false, true}, Conversion.hexDigitToBinary('9'));
        assertBinaryEquals(
            new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('A'));
        assertBinaryEquals(
            new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('a'));
        assertBinaryEquals(
            new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('B'));
        assertBinaryEquals(
            new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('b'));
        assertBinaryEquals(
            new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('C'));
        assertBinaryEquals(
            new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('c'));
        assertBinaryEquals(
            new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('D'));
        assertBinaryEquals(
            new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('d'));
        assertBinaryEquals(
            new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('E'));
        assertBinaryEquals(
            new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('e'));
        assertBinaryEquals(
            new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('F'));
        assertBinaryEquals(
            new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('f'));
        try {
            Conversion.hexDigitToBinary('G');
            fail(""Thrown "" + IllegalArgumentException.class.getName() + "" expected"");
        } catch (final IllegalArgumentException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4798]])
671,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullObj(),"    @Test
    public void testSerializeStreamNullObj() throws Exception {
        final ByteArrayOutputStream streamTest = new ByteArrayOutputStream();
        SerializationUtils.serialize(null, streamTest);

        final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
        final ObjectOutputStream oos = new ObjectOutputStream(streamReal);
        oos.writeObject(null);
        oos.flush();
        oos.close();

        final byte[] testBytes = streamTest.toByteArray();
        final byte[] realBytes = streamReal.toByteArray();
        assertEquals(testBytes.length, realBytes.length);
        for (int i = 0; i < realBytes.length; i++) {
            assertEquals(realBytes[i], testBytes[i]);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4797]])
119,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testCloneLong(),"    @Test
    public void testCloneLong() {
        assertEquals(null, ArrayUtils.clone((long[]) null));
        final long[] original = new long[] {0L, 1L};
        final long[] cloned = ArrayUtils.clone(original);
        assertTrue(Arrays.equals(original, cloned));
        assertTrue(original != cloned);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4796]])
609,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testComparatorMedian_emptyItems(),"    @Test(expected = IllegalArgumentException.class)
    public void testComparatorMedian_emptyItems() {
        ObjectUtils.median(new CharSequenceComparator());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4796]])
128,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyInt(),"    @Test
    public void testNullToEmptyInt() {
        // Test null handling
        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null));
        // Test valid array handling
        final int[] original = new int[] {1, 2};
        assertEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final int[] empty = new int[]{};
        final int[] result = ArrayUtils.nullToEmpty(empty);
        assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4796]])
573,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testAvailableLocaleList(),"    @Test
    public void testAvailableLocaleList() {
        final List<Locale> list = LocaleUtils.availableLocaleList();
        final List<Locale> list2 = LocaleUtils.availableLocaleList();
        assertNotNull(list);
        assertSame(list, list2);
        assertUnmodifiableCollection(list);
        
        final Locale[] jdkLocaleArray = Locale.getAvailableLocales();
        final List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);
        assertEquals(jdkLocaleList, list);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4792]])
122,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testCloneChar(),"    @Test
    public void testCloneChar() {
        assertEquals(null, ArrayUtils.clone((char[]) null));
        final char[] original = new char[] {'a', '4'};
        final char[] cloned = ArrayUtils.clone(original);
        assertTrue(Arrays.equals(original, cloned));
        assertTrue(original != cloned);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4791]])
460,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testToClass_object(),"    @Test
    public void testToClass_object() {
//        assertNull(ClassUtils.toClass(null)); // generates warning
        assertNull(ClassUtils.toClass((Object[]) null)); // equivalent explicit cast
        
        // Additional varargs tests
        assertTrue(""empty -> empty"", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass()));
        final Class<?>[] castNull = ClassUtils.toClass((Object) null); // == new Object[]{null}
        assertTrue(""(Object)null -> [null]"", Arrays.equals(new Object[]{null}, castNull));

        assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));

        assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class },
                ClassUtils.toClass(new Object[] { ""Test"", Integer.valueOf(1), Double.valueOf(99d) })));

        assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class },
                ClassUtils.toClass(new Object[] { ""Test"", null, Double.valueOf(99d) })));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4790]])
248,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIsEmptyPrimitives(),"    @Test
    public void testIsEmptyPrimitives() {
        final long[] emptyLongArray = new long[] {};
        final long[] notEmptyLongArray = new long[] { 1L };
        assertTrue(ArrayUtils.isEmpty((long[])null));
        assertTrue(ArrayUtils.isEmpty(emptyLongArray));
        assertFalse(ArrayUtils.isEmpty(notEmptyLongArray));

        final int[] emptyIntArray = new int[] {};
        final int[] notEmptyIntArray = new int[] { 1 };
        assertTrue(ArrayUtils.isEmpty((int[])null));
        assertTrue(ArrayUtils.isEmpty(emptyIntArray));
        assertFalse(ArrayUtils.isEmpty(notEmptyIntArray));

        final short[] emptyShortArray = new short[] {};
        final short[] notEmptyShortArray = new short[] { 1 };
        assertTrue(ArrayUtils.isEmpty((short[])null));
        assertTrue(ArrayUtils.isEmpty(emptyShortArray));
        assertFalse(ArrayUtils.isEmpty(notEmptyShortArray));

        final char[] emptyCharArray = new char[] {};
        final char[] notEmptyCharArray = new char[] { 1 };
        assertTrue(ArrayUtils.isEmpty((char[])null));
        assertTrue(ArrayUtils.isEmpty(emptyCharArray));
        assertFalse(ArrayUtils.isEmpty(notEmptyCharArray));

        final byte[] emptyByteArray = new byte[] {};
        final byte[] notEmptyByteArray = new byte[] { 1 };
        assertTrue(ArrayUtils.isEmpty((byte[])null));
        assertTrue(ArrayUtils.isEmpty(emptyByteArray));
        assertFalse(ArrayUtils.isEmpty(notEmptyByteArray));

        final double[] emptyDoubleArray = new double[] {};
        final double[] notEmptyDoubleArray = new double[] { 1.0 };
        assertTrue(ArrayUtils.isEmpty((double[])null));
        assertTrue(ArrayUtils.isEmpty(emptyDoubleArray));
        assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray));

        final float[] emptyFloatArray = new float[] {};
        final float[] notEmptyFloatArray = new float[] { 1.0F };
        assertTrue(ArrayUtils.isEmpty((float[])null));
        assertTrue(ArrayUtils.isEmpty(emptyFloatArray));
        assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray));

        final boolean[] emptyBooleanArray = new boolean[] {};
        final boolean[] notEmptyBooleanArray = new boolean[] { true };
        assertTrue(ArrayUtils.isEmpty((boolean[])null));
        assertTrue(ArrayUtils.isEmpty(emptyBooleanArray));
        assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4787]])
111,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToMap(),"    @Test
    public void testToMap() {
        Map<?, ?> map = ArrayUtils.toMap(new String[][] {{""foo"", ""bar""}, {""hello"", ""world""}});
        
        assertEquals(""bar"", map.get(""foo""));
        assertEquals(""world"", map.get(""hello""));
        
        assertEquals(null, ArrayUtils.toMap(null));
        try {
            ArrayUtils.toMap(new String[][] {{""foo"", ""bar""}, {""short""}});
            fail(""exception expected"");
        } catch (final IllegalArgumentException ex) {}
        try {
            ArrayUtils.toMap(new Object[] {new Object[] {""foo"", ""bar""}, ""illegal type""});
            fail(""exception expected"");
        } catch (final IllegalArgumentException ex) {}
        try {
            ArrayUtils.toMap(new Object[] {new Object[] {""foo"", ""bar""}, null});
            fail(""exception expected"");
        } catch (final IllegalArgumentException ex) {}
        
        map = ArrayUtils.toMap(new Object[] {new Map.Entry<Object, Object>() {
            @Override
            public Object getKey() {
                return ""foo"";
            }
            @Override
            public Object getValue() {
                return ""bar"";
            }
            @Override
            public Object setValue(final Object value) {
                throw new UnsupportedOperationException();
            }
            @Override
            public boolean equals(final Object o) {
                throw new UnsupportedOperationException();
            }
            @Override
            public int hashCode() {
                throw new UnsupportedOperationException();
            }
        }});
        assertEquals(""bar"", map.get(""foo""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4784]])
13,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayBoolean(),"    @Test
    public void testAddObjectArrayBoolean() {
        boolean[] newArray;
        newArray = ArrayUtils.add((boolean[])null, false);
        assertTrue(Arrays.equals(new boolean[]{false}, newArray));
        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add((boolean[])null, true);
        assertTrue(Arrays.equals(new boolean[]{true}, newArray));
        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
        final boolean[] array1 = new boolean[]{true, false, true};
        newArray = ArrayUtils.add(array1, false);
        assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));
        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4781]])
70,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullShortArray(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllNullShortArray() {
        ArrayUtils.removeAll((short[]) null, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4780]])
407,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlpha_char(),"    @Test
    public void testIsAsciiAlpha_char() {
        assertTrue(CharUtils.isAsciiAlpha('a'));
        assertTrue(CharUtils.isAsciiAlpha('A'));
        assertFalse(CharUtils.isAsciiAlpha('3'));
        assertFalse(CharUtils.isAsciiAlpha('-'));
        assertFalse(CharUtils.isAsciiAlpha('\n'));
        assertFalse(CharUtils.isAsciiAlpha(CHAR_COPY));
       
        for (int i = 0; i < 196; i++) {
            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) {
                assertTrue(CharUtils.isAsciiAlpha((char) i));
            } else {
                assertFalse(CharUtils.isAsciiAlpha((char) i));
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4779]])
702,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeEcmaScript(),"    @Test
    public void testEscapeEcmaScript() {
        assertEquals(null, StringEscapeUtils.escapeEcmaScript(null));
        try {
            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null);
            fail();
        } catch (final IOException ex) {
            fail();
        } catch (final IllegalArgumentException ex) {
        }
        try {
            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate("""", null);
            fail();
        } catch (final IOException ex) {
            fail();
        } catch (final IllegalArgumentException ex) {
        }
        
        assertEquals(""He didn\\'t say, \\\""stop!\\\"""", StringEscapeUtils.escapeEcmaScript(""He didn't say, \""stop!\""""));
        assertEquals(""document.getElementById(\\\""test\\\"").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';"", 
                StringEscapeUtils.escapeEcmaScript(""document.getElementById(\""test\"").value = '<script>alert('aaa');</script>';""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4778]])
403,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_Character(),"    @Test
    public void testToUnicodeEscaped_Character() {
        assertEquals(null, CharUtils.unicodeEscaped(null));
        assertEquals(""\\u0041"", CharUtils.unicodeEscaped(CHARACTER_A));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4778]])
473,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_bits(),"    @Test
    public void testBinaryToHexDigitMsb0_bits() {
        assertEquals(
            '0',
            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false}));
        assertEquals(
            '1',
            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true}));
        assertEquals(
            '2',
            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false}));
        assertEquals(
            '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true}));
        assertEquals(
            '4',
            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false}));
        assertEquals(
            '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true}));
        assertEquals(
            '6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, false}));
        assertEquals(
            '7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, true}));
        assertEquals(
            '8',
            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, false}));
        assertEquals(
            '9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, true}));
        assertEquals(
            'a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, false}));
        assertEquals(
            'b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, true}));
        assertEquals(
            'c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, false}));
        assertEquals(
            'd', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, true}));
        assertEquals(
            'e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, false}));
        assertEquals(
            'f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, true}));
        try {
            Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{});
            fail(""Thrown "" + IllegalArgumentException.class.getName() + "" expected"");
        } catch (final IllegalArgumentException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4777]])
434,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_Unboxing_Widening(),"    @Test
    public void test_isAssignable_Unboxing_Widening() throws Exception {
        // test byte conversions
        assertFalse(""byte -> char"", ClassUtils.isAssignable(Byte.class, Character.TYPE, true));
        assertTrue(""byte -> byte"", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true));
        assertTrue(""byte -> short"", ClassUtils.isAssignable(Byte.class, Short.TYPE, true));
        assertTrue(""byte -> int"", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true));
        assertTrue(""byte -> long"", ClassUtils.isAssignable(Byte.class, Long.TYPE, true));
        assertTrue(""byte -> float"", ClassUtils.isAssignable(Byte.class, Float.TYPE, true));
        assertTrue(""byte -> double"", ClassUtils.isAssignable(Byte.class, Double.TYPE, true));
        assertFalse(""byte -> boolean"", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true));

        // test short conversions
        assertFalse(""short -> char"", ClassUtils.isAssignable(Short.class, Character.TYPE, true));
        assertFalse(""short -> byte"", ClassUtils.isAssignable(Short.class, Byte.TYPE, true));
        assertTrue(""short -> short"", ClassUtils.isAssignable(Short.class, Short.TYPE, true));
        assertTrue(""short -> int"", ClassUtils.isAssignable(Short.class, Integer.TYPE, true));
        assertTrue(""short -> long"", ClassUtils.isAssignable(Short.class, Long.TYPE, true));
        assertTrue(""short -> float"", ClassUtils.isAssignable(Short.class, Float.TYPE, true));
        assertTrue(""short -> double"", ClassUtils.isAssignable(Short.class, Double.TYPE, true));
        assertFalse(""short -> boolean"", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true));

        // test char conversions
        assertTrue(""char -> char"", ClassUtils.isAssignable(Character.class, Character.TYPE, true));
        assertFalse(""char -> byte"", ClassUtils.isAssignable(Character.class, Byte.TYPE, true));
        assertFalse(""char -> short"", ClassUtils.isAssignable(Character.class, Short.TYPE, true));
        assertTrue(""char -> int"", ClassUtils.isAssignable(Character.class, Integer.TYPE, true));
        assertTrue(""char -> long"", ClassUtils.isAssignable(Character.class, Long.TYPE, true));
        assertTrue(""char -> float"", ClassUtils.isAssignable(Character.class, Float.TYPE, true));
        assertTrue(""char -> double"", ClassUtils.isAssignable(Character.class, Double.TYPE, true));
        assertFalse(""char -> boolean"", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true));

        // test int conversions
        assertFalse(""int -> char"", ClassUtils.isAssignable(Integer.class, Character.TYPE, true));
        assertFalse(""int -> byte"", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true));
        assertFalse(""int -> short"", ClassUtils.isAssignable(Integer.class, Short.TYPE, true));
        assertTrue(""int -> int"", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));
        assertTrue(""int -> long"", ClassUtils.isAssignable(Integer.class, Long.TYPE, true));
        assertTrue(""int -> float"", ClassUtils.isAssignable(Integer.class, Float.TYPE, true));
        assertTrue(""int -> double"", ClassUtils.isAssignable(Integer.class, Double.TYPE, true));
        assertFalse(""int -> boolean"", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true));

        // test long conversions
        assertFalse(""long -> char"", ClassUtils.isAssignable(Long.class, Character.TYPE, true));
        assertFalse(""long -> byte"", ClassUtils.isAssignable(Long.class, Byte.TYPE, true));
        assertFalse(""long -> short"", ClassUtils.isAssignable(Long.class, Short.TYPE, true));
        assertFalse(""long -> int"", ClassUtils.isAssignable(Long.class, Integer.TYPE, true));
        assertTrue(""long -> long"", ClassUtils.isAssignable(Long.class, Long.TYPE, true));
        assertTrue(""long -> float"", ClassUtils.isAssignable(Long.class, Float.TYPE, true));
        assertTrue(""long -> double"", ClassUtils.isAssignable(Long.class, Double.TYPE, true));
        assertFalse(""long -> boolean"", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true));

        // test float conversions
        assertFalse(""float -> char"", ClassUtils.isAssignable(Float.class, Character.TYPE, true));
        assertFalse(""float -> byte"", ClassUtils.isAssignable(Float.class, Byte.TYPE, true));
        assertFalse(""float -> short"", ClassUtils.isAssignable(Float.class, Short.TYPE, true));
        assertFalse(""float -> int"", ClassUtils.isAssignable(Float.class, Integer.TYPE, true));
        assertFalse(""float -> long"", ClassUtils.isAssignable(Float.class, Long.TYPE, true));
        assertTrue(""float -> float"", ClassUtils.isAssignable(Float.class, Float.TYPE, true));
        assertTrue(""float -> double"", ClassUtils.isAssignable(Float.class, Double.TYPE, true));
        assertFalse(""float -> boolean"", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true));

        // test double conversions
        assertFalse(""double -> char"", ClassUtils.isAssignable(Double.class, Character.TYPE, true));
        assertFalse(""double -> byte"", ClassUtils.isAssignable(Double.class, Byte.TYPE, true));
        assertFalse(""double -> short"", ClassUtils.isAssignable(Double.class, Short.TYPE, true));
        assertFalse(""double -> int"", ClassUtils.isAssignable(Double.class, Integer.TYPE, true));
        assertFalse(""double -> long"", ClassUtils.isAssignable(Double.class, Long.TYPE, true));
        assertFalse(""double -> float"", ClassUtils.isAssignable(Double.class, Float.TYPE, true));
        assertTrue(""double -> double"", ClassUtils.isAssignable(Double.class, Double.TYPE, true));
        assertFalse(""double -> boolean"", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true));

        // test boolean conversions
        assertFalse(""boolean -> char"", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true));
        assertFalse(""boolean -> byte"", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true));
        assertFalse(""boolean -> short"", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true));
        assertFalse(""boolean -> int"", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true));
        assertFalse(""boolean -> long"", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true));
        assertFalse(""boolean -> float"", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true));
        assertFalse(""boolean -> double"", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true));
        assertTrue(""boolean -> boolean"", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4776]])
821,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString(),"    @Test
    public void testJoin_ArrayString() {
        assertEquals(null, StringUtils.join((Object[]) null, null));
        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));
        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, """"));
        
        assertEquals("""", StringUtils.join(NULL_ARRAY_LIST, null));
        
        assertEquals("""", StringUtils.join(EMPTY_ARRAY_LIST, null));
        assertEquals("""", StringUtils.join(EMPTY_ARRAY_LIST, """"));
        assertEquals("""", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));

        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));
        assertEquals("",,foo"", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));
        assertEquals(""foo,2"", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));

        assertEquals(""/"", StringUtils.join(MIXED_ARRAY_LIST, ""/"", 0, MIXED_ARRAY_LIST.length-1));
        assertEquals("""", StringUtils.join(MIXED_ARRAY_LIST, """", 0, MIXED_ARRAY_LIST.length-1));
        assertEquals(""foo"", StringUtils.join(MIXED_TYPE_LIST, ""/"", 0, 1));
        assertEquals(""foo/2"", StringUtils.join(MIXED_TYPE_LIST, ""/"", 0, 2));
        assertEquals(""2"", StringUtils.join(MIXED_TYPE_LIST, ""/"", 1, 2));
        assertEquals("""", StringUtils.join(MIXED_TYPE_LIST, ""/"", 2, 1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4771]])
503,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testShortToHex(),"    @Test
    public void testShortToHex() {
        assertEquals("""", Conversion.shortToHex((short)0x0000, 0, """", 0, 0));
        assertEquals("""", Conversion.shortToHex((short)0x0000, 100, """", 0, 0));
        assertEquals("""", Conversion.shortToHex((short)0x0000, 0, """", 100, 0));
        assertEquals(
            ""ffffffffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDEF, 0, ""ffffffffffffffffffffffff"", 0, 0));
        assertEquals(
            ""3fffffffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDE3, 0, ""ffffffffffffffffffffffff"", 0, 1));
        assertEquals(
            ""feffffffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDEF, 0, ""ffffffffffffffffffffffff"", 0, 2));
        assertEquals(
            ""fedfffffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDEF, 0, ""ffffffffffffffffffffffff"", 0, 3));
        assertEquals(
            ""fedcffffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDEF, 0, ""ffffffffffffffffffffffff"", 0, 4));
        assertEquals(
            ""fff3ffffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDE3, 0, ""ffffffffffffffffffffffff"", 3, 1));
        assertEquals(
            ""ffffefffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDEF, 0, ""ffffffffffffffffffffffff"", 3, 2));
        assertEquals(
            ""7fffffffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDEF, 1, ""ffffffffffffffffffffffff"", 0, 1));
        assertEquals(
            ""bfffffffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDEF, 2, ""ffffffffffffffffffffffff"", 0, 1));
        assertEquals(
            ""fffdb9ffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDEF, 3, ""ffffffffffffffffffffffff"", 3, 4));
        // assertEquals(""ffffffffffffffffffffffff"",Conversion.shortToHex((short)0xCDEF,
        // 4,""ffffffffffffffffffffffff"",3,4));//rejected by assertion
        assertEquals(
            ""fffedcffffffffffffffffff"",
            Conversion.shortToHex((short)0xCDEF, 4, ""ffffffffffffffffffffffff"", 3, 3));
        assertEquals(""fedc"", Conversion.shortToHex((short)0xCDEF, 0, """", 0, 4));
        try {
            Conversion.shortToHex((short)0xCDEF, 0, """", 1, 4);
            fail(""Thrown "" + StringIndexOutOfBoundsException.class.getName() + "" expected"");
        } catch (final StringIndexOutOfBoundsException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4770]])
250,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives(),"    @Test
    public void testIsNotEmptyPrimitives() {
        final long[] emptyLongArray = new long[] {};
        final long[] notEmptyLongArray = new long[] { 1L };
        assertFalse(ArrayUtils.isNotEmpty((long[])null));
        assertFalse(ArrayUtils.isNotEmpty(emptyLongArray));
        assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray));

        final int[] emptyIntArray = new int[] {};
        final int[] notEmptyIntArray = new int[] { 1 };
        assertFalse(ArrayUtils.isNotEmpty((int[])null));
        assertFalse(ArrayUtils.isNotEmpty(emptyIntArray));
        assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray));

        final short[] emptyShortArray = new short[] {};
        final short[] notEmptyShortArray = new short[] { 1 };
        assertFalse(ArrayUtils.isNotEmpty((short[])null));
        assertFalse(ArrayUtils.isNotEmpty(emptyShortArray));
        assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray));

        final char[] emptyCharArray = new char[] {};
        final char[] notEmptyCharArray = new char[] { 1 };
        assertFalse(ArrayUtils.isNotEmpty((char[])null));
        assertFalse(ArrayUtils.isNotEmpty(emptyCharArray));
        assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray));

        final byte[] emptyByteArray = new byte[] {};
        final byte[] notEmptyByteArray = new byte[] { 1 };
        assertFalse(ArrayUtils.isNotEmpty((byte[])null));
        assertFalse(ArrayUtils.isNotEmpty(emptyByteArray));
        assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray));

        final double[] emptyDoubleArray = new double[] {};
        final double[] notEmptyDoubleArray = new double[] { 1.0 };
        assertFalse(ArrayUtils.isNotEmpty((double[])null));
        assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray));
        assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray));

        final float[] emptyFloatArray = new float[] {};
        final float[] notEmptyFloatArray = new float[] { 1.0F };
        assertFalse(ArrayUtils.isNotEmpty((float[])null));
        assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray));
        assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray));

        final boolean[] emptyBooleanArray = new boolean[] {};
        final boolean[] notEmptyBooleanArray = new boolean[] { true };
        assertFalse(ArrayUtils.isNotEmpty((boolean[])null));
        assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray));
        assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4769]])
550,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,org.apache.commons.lang3.HashSetvBitSetTest.timeBitSet(int),"    private static long timeBitSet(final int count) {
        int [] result = new int[0];
        final long start = System.nanoTime();
        for (int i = 0; i < LOOPS; i++) {
            result = testBitSet(count);
        }
        final long elapsed = System.nanoTime() - start;
        Assert.assertEquals(count, result.length);
        return elapsed;
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4769]])
713,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testLang313(),"    @Test
    public void testLang313() {
        assertEquals(""& &"", StringEscapeUtils.unescapeHtml4(""& &amp;""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4768]])
159,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameLengthByte(),"    @Test
    public void testSameLengthByte() {
        final byte[] nullArray = null;
        final byte[] emptyArray = new byte[0];
        final byte[] oneArray = new byte[] {3};
        final byte[] twoArray = new byte[] {4, 6};
        
        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
        
        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4765]])
549,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,org.apache.commons.lang3.HashSetvBitSetTest.timeHashSet(int),"    private static long timeHashSet(final int count) {
        int [] result = new int[0];
        final long start = System.nanoTime();
        for (int i = 0; i < LOOPS; i++) {
            result = testHashSet(count);
        }
        final long elapsed = System.nanoTime() - start;
        Assert.assertEquals(count, result.length);
        return elapsed;
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4762]])
411,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphanumeric_char(),"    @Test
    public void testIsAsciiAlphanumeric_char() {
        assertTrue(CharUtils.isAsciiAlphanumeric('a'));
        assertTrue(CharUtils.isAsciiAlphanumeric('A'));
        assertTrue(CharUtils.isAsciiAlphanumeric('3'));
        assertFalse(CharUtils.isAsciiAlphanumeric('-'));
        assertFalse(CharUtils.isAsciiAlphanumeric('\n'));
        assertFalse(CharUtils.isAsciiAlphanumeric(CHAR_COPY));
       
        for (int i = 0; i < 196; i++) {
            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) {
                assertTrue(CharUtils.isAsciiAlphanumeric((char) i));
            } else {
                assertFalse(CharUtils.isAsciiAlphanumeric((char) i));
            }
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4761]])
591,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testHashCodeMulti_multiple_nullArray(),"    @Test
    public void testHashCodeMulti_multiple_nullArray() {
        final Object[] array = null;
        assertEquals(1, ObjectUtils.hashCodeMulti(array));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4760]])
115,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.Anonymous-b1f1b56a-ee34-4d79-ac7a-72cf3a9a45da.equals(java.lang.Object),"            @Override
            public boolean equals(final Object o) {
                throw new UnsupportedOperationException();
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4757]])
847,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean(),"    @Test
    public void testReplace_StringStringArrayStringArrayBoolean() {
        //JAVADOC TESTS START
        assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{""a""}, new String[]{""b""}));
        assertEquals(StringUtils.replaceEachRepeatedly("""", new String[]{""a""}, new String[]{""b""}),"""");
        assertEquals(StringUtils.replaceEachRepeatedly(""aba"", null, null),""aba"");
        assertEquals(StringUtils.replaceEachRepeatedly(""aba"", new String[0], null),""aba"");
        assertEquals(StringUtils.replaceEachRepeatedly(""aba"", null, new String[0]),""aba"");
        assertEquals(StringUtils.replaceEachRepeatedly(""aba"", new String[0], null),""aba"");

        assertEquals(StringUtils.replaceEachRepeatedly(""aba"", new String[]{""a""}, new String[]{""""}),""b"");
        assertEquals(StringUtils.replaceEachRepeatedly(""aba"", new String[]{null}, new String[]{""a""}),""aba"");
        assertEquals(StringUtils.replaceEachRepeatedly(""abcde"", new String[]{""ab"", ""d""}, new String[]{""w"", ""t""}),""wcte"");
        assertEquals(StringUtils.replaceEachRepeatedly(""abcde"", new String[]{""ab"", ""d""}, new String[]{""d"", ""t""}),""tcte"");

        try {
            StringUtils.replaceEachRepeatedly(""abcde"", new String[]{""ab"", ""d""}, new String[]{""d"", ""ab""});
            fail(""Should be a circular reference"");
        } catch (final IllegalStateException e) {}

        //JAVADOC TESTS END
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4755]])
181,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContainsLong(),"    @Test
    public void testContainsLong() {
        long[] array = null;
        assertFalse(ArrayUtils.contains(array, 1));
        array = new long[] { 0, 1, 2, 3, 0 };
        assertTrue(ArrayUtils.contains(array, 0));
        assertTrue(ArrayUtils.contains(array, 1));
        assertTrue(ArrayUtils.contains(array, 2));
        assertTrue(ArrayUtils.contains(array, 3));
        assertFalse(ArrayUtils.contains(array, 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4753]])
12,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testJira567(),"    @Test
    public void testJira567(){
        Number[] n;
        // Valid array construction
        n = ArrayUtils.addAll(new Number[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});
        assertEquals(2,n.length);
        assertEquals(Number.class,n.getClass().getComponentType());
        try {
            // Invalid - can't store Long in Integer array
               n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});
               fail(""Should have generated IllegalArgumentException"");
        } catch (final IllegalArgumentException expected) {
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4753]])
65,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullLongArray(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllNullLongArray() {
        ArrayUtils.removeAll((long[]) null, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4752]])
217,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBoolean(),"    @Test
    public void testIndexOfBoolean() {
        boolean[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, true));
        array = new boolean[0];
        assertEquals(-1, ArrayUtils.indexOf(array, true));
        array = new boolean[] { true, false, true };
        assertEquals(0, ArrayUtils.indexOf(array, true));
        assertEquals(1, ArrayUtils.indexOf(array, false));
        array = new boolean[] { true, true };
        assertEquals(-1, ArrayUtils.indexOf(array, false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4751]])
506,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testIntToBinary(),"    @Test
    public void testIntToBinary() {
        assertBinaryEquals(
            new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 0, 0));
        assertBinaryEquals(
            new boolean[]{}, Conversion.intToBinary(0x00000000, 100, new boolean[]{}, 0, 0));
        assertBinaryEquals(
            new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 100, 0));
        assertBinaryEquals(
            new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0));
        assertBinaryEquals(new boolean[]{
            true, false, false, false, false, false, false, false, false, false, false, false,
            false, false, false, false, false, false, false, false, false, false, false, false,
            false, false, false, false, false, false, false, false, false, false, false, false,
            false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1));
        assertBinaryEquals(new boolean[]{
            true, true, false, false, false, false, false, false, false, false, false, false,
            false, false, false, false, false, false, false, false, false, false, false, false,
            false, false, false, false, false, false, false, false, false, false, false, false,
            false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2));
        assertBinaryEquals(new boolean[]{
            true, true, true, false, false, false, false, false, false, false, false, false,
            false, false, false, false, false, false, false, false, false, false, false, false,
            false, false, false, false, false, false, false, false, false, false, false, false,
            false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, true, false, true, true, true, true, false, true, true,
                false, false, true, true, true, true, false, true, false, true, false, true,
                false, false, false, false, true, false, false, false, false, false, false,
                false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, true, false, true, true, true, true, false, true, true,
                false, false, true, true, true, true, false, true, false, true, false, true,
                false, false, false, false, true, false, false, true, false, false, false,
                false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32));
        assertBinaryEquals(new boolean[]{
            false, false, true, false, false, false, false, false, false, false, false, false,
            false, false, false, false, false, false, false, false, false, false, false, false,
            false, false, false, false, false, false, false, false, false, false, false, false,
            false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1));
        assertBinaryEquals(
            new boolean[]{
                false, false, true, true, true, true, false, true, true, true, true, false,
                true, true, false, false, true, true, true, true, false, true, false, true,
                false, true, false, false, false, false, true, false, false, true, false,
                false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32));
        assertBinaryEquals(
            new boolean[]{
                true, true, true, false, true, true, true, true, false, true, true, false,
                false, true, true, true, true, false, true, false, true, false, true, false,
                false, false, false, true, false, false, true, false, false, false, false,
                false, false}, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31));
        assertBinaryEquals(
            new boolean[]{
                true, true, false, true, true, true, true, false, true, true, false, false,
                true, true, true, true, false, true, false, true, false, true, false, false,
                false, false, true, false, false, true, false, false, false, false, false,
                false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30));
        // assertBinaryEquals(new boolean[]{false, false, false, true, true, false, true,
        // true,
        // true, true, false, true, true, false, false, true, true, true, true, false, true,
        // false, true, false, true, false, false, false, false, true, false, false, false,
        // false, false, false, false},Conversion.intToBinary(0x90ABCDEF, 2,new boolean[37],
        // 3,31));//rejected by assertion
        assertBinaryEquals(
            new boolean[]{
                false, false, false, true, true, false, true, true, true, true, false, true,
                true, false, false, true, true, true, true, false, true, false, true, false,
                true, false, false, false, false, true, false, false, true, false, false,
                false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4749]])
377,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharSetTest.java,org.apache.commons.lang3.CharSetTest.testStatics(),"    @Test
    public void testStatics() {
        CharRange[] array;
        
        array = CharSet.EMPTY.getCharRanges();
        assertEquals(0, array.length);
        
        array = CharSet.ASCII_ALPHA.getCharRanges();
        assertEquals(2, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));
        
        array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));
        
        array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));
        
        array = CharSet.ASCII_NUMERIC.getCharRanges();
        assertEquals(1, array.length);
        assertTrue(ArrayUtils.contains(array, CharRange.isIn('0', '9')));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4748]])
107,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndirectArrayCreation(),"    @Test
    public void testIndirectArrayCreation()
    {
        final String[] array = toArrayPropagatingType(""foo"", ""bar"");
        assertEquals(2, array.length);
        assertEquals(""foo"", array[0]);
        assertEquals(""bar"", array[1]);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4744]])
121,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testCloneShort(),"    @Test
    public void testCloneShort() {
        assertEquals(null, ArrayUtils.clone((short[]) null));
        final short[] original = new short[] {1, 4};
        final short[] cloned = ArrayUtils.clone(original);
        assertTrue(Arrays.equals(original, cloned));
        assertTrue(original != cloned);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4744]])
745,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsWhitespace(),"    @Test
    public void testContainsWhitespace() {
        assertFalse( StringUtils.containsWhitespace("""") );
        assertTrue( StringUtils.containsWhitespace("" "") );
        assertFalse( StringUtils.containsWhitespace(""a"") );
        assertTrue( StringUtils.containsWhitespace(""a "") );
        assertTrue( StringUtils.containsWhitespace("" a"") );
        assertTrue( StringUtils.containsWhitespace(""a\t"") );
        assertTrue( StringUtils.containsWhitespace(""\n"") );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4743]])
454,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.assertGetClassReturnsClass(java.lang.Class<?>),"    private void assertGetClassReturnsClass( final Class<?> c ) throws Exception {
        assertEquals( c, ClassUtils.getClass( c.getName() ) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4743]])
512,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_getEnumMap(),"    @Test
    public void test_getEnumMap() {
        final Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class);
        assertEquals( ""getEnumMap not created correctly"", ""{RED=RED, AMBER=AMBER, GREEN=GREEN}"", test.toString());
        assertEquals(3, test.size());
        assertTrue(test.containsKey(""RED""));
        assertEquals(Traffic.RED, test.get(""RED""));
        assertTrue(test.containsKey(""AMBER""));
        assertEquals(Traffic.AMBER, test.get(""AMBER""));
        assertTrue(test.containsKey(""GREEN""));
        assertEquals(Traffic.GREEN, test.get(""GREEN""));
        assertFalse(test.containsKey(""PURPLE""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4739]])
814,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfChars(),"    @Test
    public void testJoin_ArrayOfChars() {
        assertEquals(null, StringUtils.join((char[]) null, ','));
        assertEquals(""1;2"", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR));
        assertEquals(""2"", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4737]])
676,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStream(),"    @Test
    public void testDeserializeStream() throws Exception {
        final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
        final ObjectOutputStream oos = new ObjectOutputStream(streamReal);
        oos.writeObject(iMap);
        oos.flush();
        oos.close();

        final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());
        final Object test = SerializationUtils.deserialize(inTest);
        assertNotNull(test);
        assertTrue(test instanceof HashMap<?, ?>);
        assertTrue(test != iMap);
        final HashMap<?, ?> testMap = (HashMap<?, ?>) test;
        assertEquals(iString, testMap.get(""FOO""));
        assertTrue(iString != testMap.get(""FOO""));
        assertEquals(iInteger, testMap.get(""BAR""));
        assertTrue(iInteger != testMap.get(""BAR""));
        assertEquals(iMap, testMap);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4736]])
765,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringCharArray(),"    @Test
    public void testIndexOfAnyBut_StringCharArray() {
        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));
        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));
        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));

        assertEquals(-1, StringUtils.indexOfAnyBut("""", (char[]) null));
        assertEquals(-1, StringUtils.indexOfAnyBut("""", new char[0]));
        assertEquals(-1, StringUtils.indexOfAnyBut("""", new char[] {'a','b'}));

        assertEquals(-1, StringUtils.indexOfAnyBut(""zzabyycdxx"", (char[]) null));
        assertEquals(-1, StringUtils.indexOfAnyBut(""zzabyycdxx"", new char[0]));
        assertEquals(3, StringUtils.indexOfAnyBut(""zzabyycdxx"", new char[] {'z','a'}));
        assertEquals(0, StringUtils.indexOfAnyBut(""zzabyycdxx"", new char[] {'b','y'}));
        assertEquals(-1, StringUtils.indexOfAnyBut(""aba"", new char[] {'a', 'b'}));
        assertEquals(0, StringUtils.indexOfAnyBut(""aba"", new char[] {'z'}));

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4734]])
565,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,"org.apache.commons.lang3.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String)","    private void assertValidToLocale(final String localeString, final String language, final String country) {
        final Locale locale = LocaleUtils.toLocale(localeString);
        assertNotNull(""valid locale"", locale);
        assertEquals(language, locale.getLanguage());
        assertEquals(country, locale.getCountry());
        //variant is empty
        assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4734]])
82,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveBooleanArray(),"    @Test
    public void testRemoveBooleanArray() {
        boolean[] array;
        array = ArrayUtils.remove(new boolean[] {true}, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new boolean[] {true, false}, 0);
        assertTrue(Arrays.equals(new boolean[] {false}, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new boolean[] {true, false}, 1);
        assertTrue(Arrays.equals(new boolean[] {true}, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new boolean[] {true, false, true}, 1);
        assertTrue(Arrays.equals(new boolean[] {true, true}, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        try {
            ArrayUtils.remove(new boolean[] {true, false}, -1);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove(new boolean[] {true, false}, 2);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove((boolean[]) null, 0);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4732]])
605,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testMedian_emptyItems(),"    @Test(expected = IllegalArgumentException.class)
    public void testMedian_emptyItems() {
        ObjectUtils.<String> median();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4730]])
157,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameLengthShort(),"    @Test
    public void testSameLengthShort() {
        final short[] nullArray = null;
        final short[] emptyArray = new short[0];
        final short[] oneArray = new short[] {4};
        final short[] twoArray = new short[] {6, 8};
        
        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
        
        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4728]])
140,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyCharObject(),"    @Test
    public void testNullToEmptyCharObject() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null));
        // Test valid array handling
        final Character[] original = new Character[] {'a', 'b'};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final Character[] empty = new Character[]{};
        final Character[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4728]])
418,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getPackageName_Object(),"    @Test
    public void test_getPackageName_Object() {
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageName(new ClassUtils(), ""<null>""));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageName(new Inner(), ""<null>""));
        assertEquals(""<null>"", ClassUtils.getPackageName(null, ""<null>""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4719]])
471,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryToHexDigit(),"    @Test
    public void testBinaryToHexDigit() {
        assertEquals(
            '0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false}));
        assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false}));
        assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false}));
        assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false}));
        assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false}));
        assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false}));
        assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false}));
        assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false}));
        assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true}));
        assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true}));
        assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true}));
        assertEquals('b', Conversion.binaryToHexDigit(new boolean[]{true, true, false, true}));
        assertEquals('c', Conversion.binaryToHexDigit(new boolean[]{false, false, true, true}));
        assertEquals('d', Conversion.binaryToHexDigit(new boolean[]{true, false, true, true}));
        assertEquals('e', Conversion.binaryToHexDigit(new boolean[]{false, true, true, true}));
        assertEquals('f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true}));
        assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true}));
        assertEquals(
            'f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true, true}));
        try {
            Conversion.binaryToHexDigit(new boolean[]{});
            fail(""Thrown "" + IllegalArgumentException.class.getName() + "" expected"");
        } catch (final IllegalArgumentException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4717]])
32,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArrayRemoveNone(),"    @Test
    public void testRemoveAllBooleanArrayRemoveNone() {
        final boolean[] array1 = new boolean[] { true, false };
        final boolean[] array2 = ArrayUtils.removeAll(array1);
        assertNotSame(array1, array2);
        assertTrue(Arrays.equals(array1, array2));
        assertEquals(boolean.class, array2.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4715]])
714,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvString(),"    @Test
    public void testEscapeCsvString() throws Exception {
        assertEquals(""foo.bar"",          StringEscapeUtils.escapeCsv(""foo.bar""));
        assertEquals(""\""foo,bar\"""",      StringEscapeUtils.escapeCsv(""foo,bar""));
        assertEquals(""\""foo\nbar\"""",     StringEscapeUtils.escapeCsv(""foo\nbar""));
        assertEquals(""\""foo\rbar\"""",     StringEscapeUtils.escapeCsv(""foo\rbar""));
        assertEquals(""\""foo\""\""bar\"""",   StringEscapeUtils.escapeCsv(""foo\""bar""));
        assertEquals("""",   StringEscapeUtils.escapeCsv(""""));
        assertEquals(null, StringEscapeUtils.escapeCsv(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4715]])
438,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testPrimitivesToWrappers(),"    @Test
    public void testPrimitivesToWrappers() {
        // test null
//        assertNull(""null -> null"", ClassUtils.primitivesToWrappers(null)); // generates warning
        assertNull(""null -> null"", ClassUtils.primitivesToWrappers((Class<?>[]) null)); // equivalent cast to avoid warning
        // Other possible casts for null
        assertTrue(""empty -> empty"", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers()));
        final Class<?>[] castNull = ClassUtils.primitivesToWrappers((Class<?>)null); // == new Class<?>[]{null}
        assertTrue(""(Class<?>)null -> [null]"", Arrays.equals(new Class<?>[]{null}, castNull));
        // test empty array is returned unchanged
        // TODO this is not documented
        assertArrayEquals(""empty -> empty"",
                ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));

        // test an array of various classes
        final Class<?>[] primitives = new Class[] {
                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,
                Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,
                String.class, ClassUtils.class
        };
        final Class<?>[] wrappers= ClassUtils.primitivesToWrappers(primitives);

        for (int i=0; i < primitives.length; i++) {
            // test each returned wrapper
            final Class<?> primitive = primitives[i];
            final Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive);

            assertEquals(primitive + "" -> "" + expectedWrapper, expectedWrapper, wrappers[i]);
        }

        // test an array of no primitive classes
        final Class<?>[] noPrimitives = new Class[] {
                String.class, ClassUtils.class, Void.TYPE
        };
        // This used to return the exact same array, but no longer does.
        assertNotSame(""unmodified"", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4714]])
664,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIntersectionWithNonOverlapping(),"    @Test(expected = IllegalArgumentException.class)
    public void testIntersectionWithNonOverlapping() {
        intRange.intersectionWith(Range.between(0, 9));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4713]])
672,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamObjNull(),"    @Test
    public void testSerializeStreamObjNull() throws Exception {
        try {
            SerializationUtils.serialize(iMap, null);
        } catch (final IllegalArgumentException ex) {
            return;
        }
        fail();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4713]])
493,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryToShort(),"    @Test
    public void testBinaryToShort() {
        final boolean[] src = new boolean[]{
            false, false, true, true, true, false, true, true, true, true, true, true, true,
            false, false, false, true, true, true, true, false, false, false, false, false,
            false, true, true, true, false, false, false, false, false, false, false, true,
            true, true, true, true, false, false, false, false, true, false, false, true, true,
            false, false, false, false, true, false, true, false, true, false, false, true,
            true, false, true, true, true, false, false, false, false, true};
        // conversion of ""CDF1F0C10F12345678"" by HexToBinary
        assertEquals((short)0x0000, Conversion.binaryToShort(src, 0 * 4, (short)0, 0, 0 * 4));
        assertEquals((short)0x000C, Conversion.binaryToShort(src, 0 * 4, (short)0, 0, 1 * 4));
        assertEquals((short)0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short)0, 0, 4 * 4));
        assertEquals((short)0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short)0, 0, 4 * 4));
        assertEquals(
            (short)0x1234, Conversion.binaryToShort(src, 0 * 4, (short)0x1234, 0, 0 * 4));
        assertEquals(
            (short)0x8764, Conversion.binaryToShort(src, 15 * 4, (short)0x1234, 4, 3 * 4));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4711]])
186,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContainsInt(),"    @Test
    public void testContainsInt() {
        int[] array = null;
        assertFalse(ArrayUtils.contains(array, 1));
        array = new int[] { 0, 1, 2, 3, 0 };
        assertTrue(ArrayUtils.contains(array, 0));
        assertTrue(ArrayUtils.contains(array, 1));
        assertTrue(ArrayUtils.contains(array, 2));
        assertTrue(ArrayUtils.contains(array, 3));
        assertFalse(ArrayUtils.contains(array, 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4707]])
144,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSubarrayObject(),"    @Test
    public void testSubarrayObject() {
        final Object[] nullArray = null;
        final Object[] objectArray = { ""a"", ""b"", ""c"", ""d"", ""e"", ""f""};

        assertEquals(""0 start, mid end"", ""abcd"",
            StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)));
        assertEquals(""0 start, length end"", ""abcdef"",
            StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)));
        assertEquals(""mid start, mid end"", ""bcd"",
            StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)));
        assertEquals(""mid start, length end"", ""bcdef"",
            StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)));

        assertNull(""null input"", ArrayUtils.subarray(nullArray, 0, 3));
        assertEquals(""empty array"", """",
            StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)));
        assertEquals(""start > end"", """",
            StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)));
        assertEquals(""start == end"", """",
            StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)));
        assertEquals(""start undershoot, normal end"", ""abcd"",
            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)));
        assertEquals(""start overshoot, any end"", """",
            StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)));
        assertEquals(""normal start, end overshoot"", ""cdef"",
            StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)));
        assertEquals(""start undershoot, end overshoot"", ""abcdef"",
            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)));
            
        // array type tests
        final Date[] dateArray = { new java.sql.Date(new Date().getTime()),
            new Date(), new Date(), new Date(), new Date() };

        assertSame(""Object type"", Object.class,
            ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType());
        assertSame(""java.util.Date type"", java.util.Date.class,
            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());
        assertNotSame(""java.sql.Date type"", java.sql.Date.class,
            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());
        try {
            @SuppressWarnings(""unused"")
            final
            java.sql.Date[] dummy = (java.sql.Date[])ArrayUtils.subarray(dateArray, 1,3);
            fail(""Invalid downcast"");
        } catch (final ClassCastException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4705]])
701,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,"org.apache.commons.lang3.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String, java.lang.String)","    private void assertUnescapeJava(final String message, final String unescaped, final String original) throws IOException {
        final String expected = unescaped;
        final String actual = StringEscapeUtils.unescapeJava(original);

        assertEquals(""unescape(String) failed"" +
                (message == null ? """" : ("": "" + message)) +
                "": expected '"" + StringEscapeUtils.escapeJava(expected) +
                // we escape this so we can see it in the error message
                ""' actual '"" + StringEscapeUtils.escapeJava(actual) + ""'"",
                expected, actual);

        final StringWriter writer = new StringWriter();
        StringEscapeUtils.UNESCAPE_JAVA.translate(original, writer);
        assertEquals(unescaped, writer.toString());

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4698]])
138,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyIntObject(),"    @Test
    public void testNullToEmptyIntObject() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Integer[]) null));
        // Test valid array handling
        final Integer[] original = new Integer[] {1, 2};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final Integer[] empty = new Integer[]{};
        final Integer[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4694]])
555,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,org.apache.commons.lang3.HashSetvBitSetTest.testTimesExtractOrBitset(),"    @Test
    public void testTimesExtractOrBitset() {
        final BitSet toRemove = new BitSet();
        final int[] array = new int[100];
        toRemove.set(10, 20);
        timeBitSetRemoveAll(array, toRemove); // warmup
        timeExtractRemoveAll(array, toRemove); // warmup
        long timeDiff = printTimes(100,1);
        timeDiff += printTimes(100,10);
        timeDiff += printTimes(100,50);
        timeDiff += printTimes(100,100);
        timeDiff += printTimes(1000,10);
        timeDiff += printTimes(1000,100);
        timeDiff += printTimes(1000,500);
        timeDiff += printTimes(1000,1000);
        Assert.assertTrue(timeDiff <= 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4690]])
682,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytes(),"    @Test
    public void testSerializeBytes() throws Exception {
        final byte[] testBytes = SerializationUtils.serialize(iMap);

        final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
        final ObjectOutputStream oos = new ObjectOutputStream(streamReal);
        oos.writeObject(iMap);
        oos.flush();
        oos.close();

        final byte[] realBytes = streamReal.toByteArray();
        assertEquals(testBytes.length, realBytes.length);
        for (int i = 0; i < realBytes.length; i++) {
            assertEquals(realBytes[i], testBytes[i]);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4690]])
688,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesBadStream(),"    @Test
    public void testDeserializeBytesBadStream() throws Exception {
        try {
            SerializationUtils.deserialize(new byte[0]);
        } catch (final SerializationException ex) {
            return;
        }
        fail();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4689]])
711,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeXmlSupplementaryCharacters(),"    @Test
    public void testUnescapeXmlSupplementaryCharacters() {
        assertEquals(""Supplementary character must be represented using a single escape"", ""\uD84C\uDFB4"",
                StringEscapeUtils.unescapeXml(""&#144308;"") );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4688]])
3,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testNonEquivalentAnnotationsOfSameType(),"    @Test
    public void testNonEquivalentAnnotationsOfSameType() {
        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class)));
        assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4687]])
81,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveNumberArray(),"    @Test
    public void testRemoveNumberArray(){
        final Number[] inarray = {Integer.valueOf(1),Long.valueOf(2),Byte.valueOf((byte) 3)};
        assertEquals(3, inarray.length);
        Number[] outarray;
        outarray = ArrayUtils.remove(inarray, 1);
        assertEquals(2, outarray.length);
        assertEquals(Number.class, outarray.getClass().getComponentType());
        outarray = ArrayUtils.remove(outarray, 1);
        assertEquals(1, outarray.length);
        assertEquals(Number.class, outarray.getClass().getComponentType());
        outarray = ArrayUtils.remove(outarray, 0);
        assertEquals(0, outarray.length);
        assertEquals(Number.class, outarray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4686]])
812,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray(),"    @Test
    public void testJoin_Objectarray() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast
        // test additional varargs calls
        assertEquals("""", StringUtils.join()); // empty array
        assertEquals("""", StringUtils.join((Object) null)); // => new Object[]{null}

        assertEquals("""", StringUtils.join(EMPTY_ARRAY_LIST));
        assertEquals("""", StringUtils.join(NULL_ARRAY_LIST));
        assertEquals(""null"", StringUtils.join(NULL_TO_STRING_LIST));
        assertEquals(""abc"", StringUtils.join(new String[] {""a"", ""b"", ""c""}));
        assertEquals(""a"", StringUtils.join(new String[] {null, ""a"", """"}));
        assertEquals(""foo"", StringUtils.join(MIXED_ARRAY_LIST));
        assertEquals(""foo2"", StringUtils.join(MIXED_TYPE_LIST));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4686]])
662,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIntersectionWith(),"    @Test
    public void testIntersectionWith() {
        assertSame(intRange, intRange.intersectionWith(intRange));
        assertSame(byteRange, byteRange.intersectionWith(byteRange));
        assertSame(longRange, longRange.intersectionWith(longRange));
        assertSame(floatRange, floatRange.intersectionWith(floatRange));
        assertSame(doubleRange, doubleRange.intersectionWith(doubleRange));

        assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4685]])
201,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContainsByte(),"    @Test
    public void testContainsByte() {
        byte[] array = null;
        assertFalse(ArrayUtils.contains(array, (byte) 1));
        array = new byte[] { 0, 1, 2, 3, 0 };
        assertTrue(ArrayUtils.contains(array, (byte) 0));
        assertTrue(ArrayUtils.contains(array, (byte) 1));
        assertTrue(ArrayUtils.contains(array, (byte) 2));
        assertTrue(ArrayUtils.contains(array, (byte) 3));
        assertFalse(ArrayUtils.contains(array, (byte) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4683]])
674,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testSerializeIOException(),"    @Test
    public void testSerializeIOException() throws Exception {
        // forces an IOException when the ObjectOutputStream is created, to test not closing the stream
        // in the finally block
        final OutputStream streamTest = new OutputStream() {
            @Override
            public void write(final int arg0) throws IOException {
                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);
            }
        };
        try {
            SerializationUtils.serialize(iMap, streamTest);
        }
        catch(final SerializationException e) {
            assertEquals(""java.io.IOException: "" + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4683]])
123,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testCloneByte(),"    @Test
    public void testCloneByte() {
        assertEquals(null, ArrayUtils.clone((byte[]) null));
        final byte[] original = new byte[] {1, 6};
        final byte[] cloned = ArrayUtils.clone(original);
        assertTrue(Arrays.equals(original, cloned));
        assertTrue(original != cloned);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4682]])
433,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_DefaultUnboxing_Widening(),"    @Test
    public void test_isAssignable_DefaultUnboxing_Widening() throws Exception {
        final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5);

        // test byte conversions
        assertFalse(""byte -> char"", ClassUtils.isAssignable(Byte.class, Character.TYPE));
        assertEquals(""byte -> byte"", autoboxing, ClassUtils.isAssignable(Byte.class, Byte.TYPE));
        assertEquals(""byte -> short"", autoboxing, ClassUtils.isAssignable(Byte.class, Short.TYPE));
        assertEquals(""byte -> int"", autoboxing, ClassUtils.isAssignable(Byte.class, Integer.TYPE));
        assertEquals(""byte -> long"", autoboxing, ClassUtils.isAssignable(Byte.class, Long.TYPE));
        assertEquals(""byte -> float"", autoboxing, ClassUtils.isAssignable(Byte.class, Float.TYPE));
        assertEquals(""byte -> double"", autoboxing, ClassUtils.isAssignable(Byte.class, Double.TYPE));
        assertFalse(""byte -> boolean"", ClassUtils.isAssignable(Byte.class, Boolean.TYPE));

        // test short conversions
        assertFalse(""short -> char"", ClassUtils.isAssignable(Short.class, Character.TYPE));
        assertFalse(""short -> byte"", ClassUtils.isAssignable(Short.class, Byte.TYPE));
        assertEquals(""short -> short"", autoboxing, ClassUtils.isAssignable(Short.class, Short.TYPE));
        assertEquals(""short -> int"", autoboxing, ClassUtils.isAssignable(Short.class, Integer.TYPE));
        assertEquals(""short -> long"", autoboxing, ClassUtils.isAssignable(Short.class, Long.TYPE));
        assertEquals(""short -> float"", autoboxing, ClassUtils.isAssignable(Short.class, Float.TYPE));
        assertEquals(""short -> double"", autoboxing, ClassUtils.isAssignable(Short.class, Double.TYPE));
        assertFalse(""short -> boolean"", ClassUtils.isAssignable(Short.class, Boolean.TYPE));

        // test char conversions
        assertEquals(""char -> char"", autoboxing, ClassUtils.isAssignable(Character.class, Character.TYPE));
        assertFalse(""char -> byte"", ClassUtils.isAssignable(Character.class, Byte.TYPE));
        assertFalse(""char -> short"", ClassUtils.isAssignable(Character.class, Short.TYPE));
        assertEquals(""char -> int"", autoboxing, ClassUtils.isAssignable(Character.class, Integer.TYPE));
        assertEquals(""char -> long"", autoboxing, ClassUtils.isAssignable(Character.class, Long.TYPE));
        assertEquals(""char -> float"", autoboxing, ClassUtils.isAssignable(Character.class, Float.TYPE));
        assertEquals(""char -> double"", autoboxing, ClassUtils.isAssignable(Character.class, Double.TYPE));
        assertFalse(""char -> boolean"", ClassUtils.isAssignable(Character.class, Boolean.TYPE));

        // test int conversions
        assertFalse(""int -> char"", ClassUtils.isAssignable(Integer.class, Character.TYPE));
        assertFalse(""int -> byte"", ClassUtils.isAssignable(Integer.class, Byte.TYPE));
        assertFalse(""int -> short"", ClassUtils.isAssignable(Integer.class, Short.TYPE));
        assertEquals(""int -> int"", autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));
        assertEquals(""int -> long"", autoboxing, ClassUtils.isAssignable(Integer.class, Long.TYPE));
        assertEquals(""int -> float"", autoboxing, ClassUtils.isAssignable(Integer.class, Float.TYPE));
        assertEquals(""int -> double"", autoboxing, ClassUtils.isAssignable(Integer.class, Double.TYPE));
        assertFalse(""int -> boolean"", ClassUtils.isAssignable(Integer.class, Boolean.TYPE));

        // test long conversions
        assertFalse(""long -> char"", ClassUtils.isAssignable(Long.class, Character.TYPE));
        assertFalse(""long -> byte"", ClassUtils.isAssignable(Long.class, Byte.TYPE));
        assertFalse(""long -> short"", ClassUtils.isAssignable(Long.class, Short.TYPE));
        assertFalse(""long -> int"", ClassUtils.isAssignable(Long.class, Integer.TYPE));
        assertEquals(""long -> long"", autoboxing, ClassUtils.isAssignable(Long.class, Long.TYPE));
        assertEquals(""long -> float"", autoboxing, ClassUtils.isAssignable(Long.class, Float.TYPE));
        assertEquals(""long -> double"", autoboxing, ClassUtils.isAssignable(Long.class, Double.TYPE));
        assertFalse(""long -> boolean"", ClassUtils.isAssignable(Long.class, Boolean.TYPE));

        // test float conversions
        assertFalse(""float -> char"", ClassUtils.isAssignable(Float.class, Character.TYPE));
        assertFalse(""float -> byte"", ClassUtils.isAssignable(Float.class, Byte.TYPE));
        assertFalse(""float -> short"", ClassUtils.isAssignable(Float.class, Short.TYPE));
        assertFalse(""float -> int"", ClassUtils.isAssignable(Float.class, Integer.TYPE));
        assertFalse(""float -> long"", ClassUtils.isAssignable(Float.class, Long.TYPE));
        assertEquals(""float -> float"", autoboxing, ClassUtils.isAssignable(Float.class, Float.TYPE));
        assertEquals(""float -> double"", autoboxing, ClassUtils.isAssignable(Float.class, Double.TYPE));
        assertFalse(""float -> boolean"", ClassUtils.isAssignable(Float.class, Boolean.TYPE));

        // test double conversions
        assertFalse(""double -> char"", ClassUtils.isAssignable(Double.class, Character.TYPE));
        assertFalse(""double -> byte"", ClassUtils.isAssignable(Double.class, Byte.TYPE));
        assertFalse(""double -> short"", ClassUtils.isAssignable(Double.class, Short.TYPE));
        assertFalse(""double -> int"", ClassUtils.isAssignable(Double.class, Integer.TYPE));
        assertFalse(""double -> long"", ClassUtils.isAssignable(Double.class, Long.TYPE));
        assertFalse(""double -> float"", ClassUtils.isAssignable(Double.class, Float.TYPE));
        assertEquals(""double -> double"", autoboxing, ClassUtils.isAssignable(Double.class, Double.TYPE));
        assertFalse(""double -> boolean"", ClassUtils.isAssignable(Double.class, Boolean.TYPE));

        // test boolean conversions
        assertFalse(""boolean -> char"", ClassUtils.isAssignable(Boolean.class, Character.TYPE));
        assertFalse(""boolean -> byte"", ClassUtils.isAssignable(Boolean.class, Byte.TYPE));
        assertFalse(""boolean -> short"", ClassUtils.isAssignable(Boolean.class, Short.TYPE));
        assertFalse(""boolean -> int"", ClassUtils.isAssignable(Boolean.class, Integer.TYPE));
        assertFalse(""boolean -> long"", ClassUtils.isAssignable(Boolean.class, Long.TYPE));
        assertFalse(""boolean -> float"", ClassUtils.isAssignable(Boolean.class, Float.TYPE));
        assertFalse(""boolean -> double"", ClassUtils.isAssignable(Boolean.class, Double.TYPE));
        assertEquals(""boolean -> boolean"", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4682]])
361,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testSerialization(),"    @Test
    public void testSerialization() {
        CharRange range = CharRange.is('a');
        assertEquals(range, SerializationUtils.clone(range)); 
        range = CharRange.isIn('a', 'e');
        assertEquals(range, SerializationUtils.clone(range)); 
        range = CharRange.isNotIn('a', 'e');
        assertEquals(range, SerializationUtils.clone(range)); 
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4676]])
685,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytes(),"    @Test
    public void testDeserializeBytes() throws Exception {
        final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
        final ObjectOutputStream oos = new ObjectOutputStream(streamReal);
        oos.writeObject(iMap);
        oos.flush();
        oos.close();

        final Object test = SerializationUtils.deserialize(streamReal.toByteArray());
        assertNotNull(test);
        assertTrue(test instanceof HashMap<?, ?>);
        assertTrue(test != iMap);
        final HashMap<?, ?> testMap = (HashMap<?, ?>) test;
        assertEquals(iString, testMap.get(""FOO""));
        assertTrue(iString != testMap.get(""FOO""));
        assertEquals(iInteger, testMap.get(""BAR""));
        assertTrue(iInteger != testMap.get(""BAR""));
        assertEquals(iMap, testMap);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4673]])
253,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testGetShortValue(),"    @Test
    public void testGetShortValue() {
        assertEquals(bf_multi.getShortValue((short) - 1), (short) 127);
        assertEquals(bf_multi.getShortValue((short) 0), (short) 0);
        assertEquals(bf_single.getShortValue((short) - 1), (short) 1);
        assertEquals(bf_single.getShortValue((short) 0), (short) 0);
        assertEquals(bf_zero.getShortValue((short) -1), (short) 0);
        assertEquals(bf_zero.getShortValue((short) 0), (short) 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4668]])
40,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullByteArray(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllNullByteArray() {
        ArrayUtils.removeAll((byte[]) null, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4667]])
31,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllBooleanArray(),"    @Test
    public void testRemoveAllBooleanArray() {
        boolean[] array;
        array = ArrayUtils.removeAll(new boolean[] { true }, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false }, 0);
        assertTrue(Arrays.equals(new boolean[] { false }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false }, 1);
        assertTrue(Arrays.equals(new boolean[] { true }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, true }, 1);
        assertTrue(Arrays.equals(new boolean[] { true, true }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeAll(new boolean[] { true, false }, 0, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, false }, 0, 1);
        assertTrue(Arrays.equals(new boolean[] { false }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, false }, 0, 2);
        assertTrue(Arrays.equals(new boolean[] { false }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, false }, 1, 2);
        assertTrue(Arrays.equals(new boolean[] { true }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true }, 0, 2, 4);
        assertTrue(Arrays.equals(new boolean[] { false, false }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true }, 1, 3);
        assertTrue(Arrays.equals(new boolean[] { true, true, true }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true }, 1, 3, 4);
        assertTrue(Arrays.equals(new boolean[] { true, true }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true, false, true }, 0, 2, 4, 6);
        assertTrue(Arrays.equals(new boolean[] { false, false, false }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true, false, true }, 1, 3, 5);
        assertTrue(Arrays.equals(new boolean[] { true, true, true, true }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new boolean[] { true, false, true, false, true, false, true }, 0, 1, 2);
        assertTrue(Arrays.equals(new boolean[] { false, true, false, true }, array));
        assertEquals(Boolean.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4666]])
219,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBoolean(),"    @Test
    public void testLastIndexOfBoolean() {
        boolean[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));
        array = new boolean[0];
        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));
        array = new boolean[] { true, false, true };
        assertEquals(2, ArrayUtils.lastIndexOf(array, true));
        assertEquals(1, ArrayUtils.lastIndexOf(array, false));
        array = new boolean[] { true, true };
        assertEquals(-1, ArrayUtils.lastIndexOf(array, false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4663]])
461,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Object(),"    @Test
    public void test_getShortCanonicalName_Object() {
        assertEquals(""<null>"", ClassUtils.getShortCanonicalName(null, ""<null>""));
        assertEquals(""ClassUtils"", ClassUtils.getShortCanonicalName(new ClassUtils(), ""<null>""));
        assertEquals(""ClassUtils[]"", ClassUtils.getShortCanonicalName(new ClassUtils[0], ""<null>""));
        assertEquals(""ClassUtils[][]"", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], ""<null>""));
        assertEquals(""int[]"", ClassUtils.getShortCanonicalName(new int[0], ""<null>""));
        assertEquals(""int[][]"", ClassUtils.getShortCanonicalName(new int[0][0], ""<null>""));

        // Inner types
        class Named extends Object {}
        assertEquals(""ClassUtilsTest.6"", ClassUtils.getShortCanonicalName(new Object(){}, ""<null>""));
        assertEquals(""ClassUtilsTest.5Named"", ClassUtils.getShortCanonicalName(new Named(), ""<null>""));
        assertEquals(""ClassUtilsTest.Inner"", ClassUtils.getShortCanonicalName(new Inner(), ""<null>""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4655]])
686,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesOfNull(),"    @Test
    public void testDeserializeBytesOfNull() throws Exception {
        final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
        final ObjectOutputStream oos = new ObjectOutputStream(streamReal);
        oos.writeObject(null);
        oos.flush();
        oos.close();

        final Object test = SerializationUtils.deserialize(streamReal.toByteArray());
        assertNull(test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4654]])
564,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.assertValidToLocale(java.lang.String),"    private void assertValidToLocale(final String language) {
        final Locale locale = LocaleUtils.toLocale(language);
        assertNotNull(""valid locale"", locale);
        assertEquals(language, locale.getLanguage());
        //country and variant are empty
        assertTrue(locale.getCountry() == null || locale.getCountry().isEmpty());
        assertTrue(locale.getVariant() == null || locale.getVariant().isEmpty());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4649]])
770,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfIgnoreCase_StringInt(),"    @Test
    public void testIndexOfIgnoreCase_StringInt() {
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", -1));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 0));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 1));
        assertEquals(4, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 2));
        assertEquals(4, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 3));
        assertEquals(4, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 4));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 5));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 6));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 7));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aabaabaa"", ""AB"", 8));
        assertEquals(1, StringUtils.indexOfIgnoreCase(""aab"", ""AB"", 1));
        assertEquals(5, StringUtils.indexOfIgnoreCase(""aabaabaa"", """", 5));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""ab"", ""AAB"", 0));
        assertEquals(-1, StringUtils.indexOfIgnoreCase(""aab"", ""AAB"", 1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4648]])
42,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArrayRemoveNone(),"    @Test
    public void testRemoveAllCharArrayRemoveNone() {
        final char[] array1 = new char[] { 'a', 'b' };
        final char[] array2 = ArrayUtils.removeAll(array1);
        assertNotSame(array1, array2);
        assertArrayEquals(array1, array2);
        assertEquals(char.class, array2.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4646]])
815,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfBytes(),"    @Test
    public void testJoin_ArrayOfBytes() {
        assertEquals(null, StringUtils.join((byte[]) null, ','));
        assertEquals(""1;2"", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR));
        assertEquals(""2"", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4644]])
266,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testSetShortBoolean(),"    @Test
    public void testSetShortBoolean() {
        assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));
        assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));
        assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true));
        assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));
        assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));
        assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4641]])
470,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testHexDigitMsb0ToBinary(),"    @Test
    public void testHexDigitMsb0ToBinary() {
        assertBinaryEquals(
            new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0'));
        assertBinaryEquals(
            new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1'));
        assertBinaryEquals(
            new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2'));
        assertBinaryEquals(
            new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3'));
        assertBinaryEquals(
            new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4'));
        assertBinaryEquals(
            new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5'));
        assertBinaryEquals(
            new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6'));
        assertBinaryEquals(
            new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBinary('7'));
        assertBinaryEquals(
            new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBinary('8'));
        assertBinaryEquals(
            new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBinary('9'));
        assertBinaryEquals(
            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('A'));
        assertBinaryEquals(
            new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('a'));
        assertBinaryEquals(
            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('B'));
        assertBinaryEquals(
            new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('b'));
        assertBinaryEquals(
            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('C'));
        assertBinaryEquals(
            new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('c'));
        assertBinaryEquals(
            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('D'));
        assertBinaryEquals(
            new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('d'));
        assertBinaryEquals(
            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('E'));
        assertBinaryEquals(
            new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('e'));
        assertBinaryEquals(
            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('F'));
        assertBinaryEquals(
            new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('f'));
        try {
            Conversion.hexDigitMsb0ToBinary('G');
            fail(""Thrown "" + IllegalArgumentException.class.getName() + "" expected"");
        } catch (final IllegalArgumentException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4641]])
463,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_String(),"    @Test
    public void test_getShortCanonicalName_String() {
        assertEquals(""ClassUtils"", ClassUtils.getShortCanonicalName(""org.apache.commons.lang3.ClassUtils""));
        assertEquals(""ClassUtils[]"", ClassUtils.getShortCanonicalName(""[Lorg.apache.commons.lang3.ClassUtils;""));
        assertEquals(""ClassUtils[][]"", ClassUtils.getShortCanonicalName(""[[Lorg.apache.commons.lang3.ClassUtils;""));
        assertEquals(""ClassUtils[]"", ClassUtils.getShortCanonicalName(""org.apache.commons.lang3.ClassUtils[]""));
        assertEquals(""ClassUtils[][]"", ClassUtils.getShortCanonicalName(""org.apache.commons.lang3.ClassUtils[][]""));
        assertEquals(""int[]"", ClassUtils.getShortCanonicalName(""[I""));
        assertEquals(""int[][]"", ClassUtils.getShortCanonicalName(""[[I""));
        assertEquals(""int[]"", ClassUtils.getShortCanonicalName(""int[]""));
        assertEquals(""int[][]"", ClassUtils.getShortCanonicalName(""int[][]""));
        
        // Inner types
        assertEquals(""ClassUtilsTest.6"", ClassUtils.getShortCanonicalName(""org.apache.commons.lang3.ClassUtilsTest$6""));
        assertEquals(""ClassUtilsTest.5Named"", ClassUtils.getShortCanonicalName(""org.apache.commons.lang3.ClassUtilsTest$5Named""));
        assertEquals(""ClassUtilsTest.Inner"", ClassUtils.getShortCanonicalName(""org.apache.commons.lang3.ClassUtilsTest$Inner""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4625]])
50,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullDoubleArray(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllNullDoubleArray() {
        ArrayUtils.removeAll((double[]) null, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4625]])
508,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testByteToBinary(),"    @Test
    public void testByteToBinary() {
        assertBinaryEquals(
            new boolean[]{}, Conversion.byteToBinary((byte)0x00, 0, new boolean[]{}, 0, 0));
        assertBinaryEquals(
            new boolean[]{}, Conversion.byteToBinary((byte)0x00, 100, new boolean[]{}, 0, 0));
        assertBinaryEquals(
            new boolean[]{}, Conversion.byteToBinary((byte)0x00, 0, new boolean[]{}, 100, 0));
        assertBinaryEquals(
            new boolean[69], Conversion.byteToBinary((byte)0xEF, 0, new boolean[69], 0, 0));
        assertBinaryEquals(new boolean[]{
            true, false, false, false, false, false, false, false, false, false, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 1));
        assertBinaryEquals(new boolean[]{
            true, false, false, false, false, false, false, false, false, false, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 2));
        assertBinaryEquals(new boolean[]{
            true, false, true, false, false, false, false, false, false, false, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 3));
        assertBinaryEquals(new boolean[]{
            true, false, true, false, true, false, false, false, false, false, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 7));
        assertBinaryEquals(new boolean[]{
            true, false, true, false, true, false, false, true, false, false, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 0, 8));
        assertBinaryEquals(new boolean[]{
            false, false, true, false, false, false, false, false, false, false, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 2, 1));
        assertBinaryEquals(new boolean[]{
            false, false, true, false, true, false, true, false, false, true, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 0, new boolean[13], 2, 8));
        assertBinaryEquals(new boolean[]{
            false, true, false, true, false, false, true, false, false, false, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 1, new boolean[13], 0, 7));
        assertBinaryEquals(new boolean[]{
            true, false, true, false, false, true, false, false, false, false, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 2, new boolean[13], 0, 6));
        // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,
        // false, false, false, false, false},Conversion.byteToBinary((byte)0x95, 2,new
        // boolean[13], 3, 7));//rejected by assertion
        assertBinaryEquals(new boolean[]{
            false, false, false, true, false, true, false, false, true, false, false, false,
            false}, Conversion.byteToBinary((byte)0x95, 2, new boolean[13], 3, 6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4622]])
614,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testCloneOfStringArray(),"    @Test
    public void testCloneOfStringArray() {
        assertTrue(Arrays.deepEquals(
            new String[]{""string""}, ObjectUtils.clone(new String[]{""string""})));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4621]])
604,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testMedian_nullItems(),"    @Test(expected = NullPointerException.class)
    public void testMedian_nullItems() {
        ObjectUtils.median((String[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4618]])
476,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryBeMsb0ToHexDigit_2args(),"    @Test
    public void testBinaryBeMsb0ToHexDigit_2args() {
        assertEquals(
            '5',
            Conversion.binaryBeMsb0ToHexDigit(new boolean[]{
                true, false, false, false, false, false, false, false, false, false, false,
                true, false, true, false, false}, 2));

        final boolean[] shortArray = new boolean[]{true, true, false};
        assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0));
        assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1));
        assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2));
        final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true};
        assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0));
        assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1));
        assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2));
        assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3));
        assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4));
        assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5));
        assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6));
        assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7));
        final boolean[] multiBytesArray = new boolean[]{
            true, true, false, false, true, false, true, false, true, true, true, false, false,
            true, false, true};
        assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0));
        assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1));
        assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2));
        assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3));
        assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4));
        assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5));
        assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6));
        assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7));

        assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8));
        assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9));
        assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10));
        assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11));
        assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12));
        assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13));
        assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14));
        assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15));

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4617]])
819,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfDoubles(),"    @Test
    public void testJoin_ArrayOfDoubles() {
        assertEquals(null, StringUtils.join((double[]) null, ','));
        assertEquals(""1.0;2.0"", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR));
        assertEquals(""2.0"", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4616]])
60,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullIntArray(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllNullIntArray() {
        ArrayUtils.removeAll((int[]) null, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4613]])
413,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getShortClassName_Object(),"    @Test
    public void test_getShortClassName_Object() {
        assertEquals(""ClassUtils"", ClassUtils.getShortClassName(new ClassUtils(), ""<null>""));
        assertEquals(""ClassUtilsTest.Inner"", ClassUtils.getShortClassName(new Inner(), ""<null>""));
        assertEquals(""String"", ClassUtils.getShortClassName(""hello"", ""<null>""));
        assertEquals(""<null>"", ClassUtils.getShortClassName(null, ""<null>""));

        // Inner types
        class Named extends Object {}
        assertEquals(""ClassUtilsTest.1"", ClassUtils.getShortClassName(new Object(){}, ""<null>""));
        assertEquals(""ClassUtilsTest.1Named"", ClassUtils.getShortClassName(new Named(), ""<null>""));
        assertEquals(""ClassUtilsTest.Inner"", ClassUtils.getShortClassName(new Inner(), ""<null>""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4604]])
255,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testGetShortRawValue(),"    @Test
    public void testGetShortRawValue() {
        assertEquals(bf_multi.getShortRawValue((short) - 1), (short) 0x3F80);
        assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);
        assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);
        assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);
        assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0);
        assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4600]])
904,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairsLang858(),"    @Test
    public void testEscapeSurrogatePairsLang858() throws Exception {
        assertEquals(""\\uDBFF\\uDFFD"", StringEscapeUtils.escapeJava(""\uDBFF\uDFFD""));       //fail LANG-858
        assertEquals(""\\uDBFF\\uDFFD"", StringEscapeUtils.escapeEcmaScript(""\uDBFF\uDFFD"")); //fail LANG-858
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4599]])
155,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameLengthLong(),"    @Test
    public void testSameLengthLong() {
        final long[] nullArray = null;
        final long[] emptyArray = new long[0];
        final long[] oneArray = new long[] {0L};
        final long[] twoArray = new long[] {0L, 76L};
        
        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
        
        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4587]])
4,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testAnnotationsOfDifferingTypes(),"    @Test
    public void testAnnotationsOfDifferingTypes() {
        assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field4.getAnnotation(NestAnnotation.class)));
        assertFalse(AnnotationUtils.equals(field4.getAnnotation(NestAnnotation.class), field1.getAnnotation(TestAnnotation.class)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4585]])
447,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testWithInterleavingWhitespace(),"    @Test
    public void testWithInterleavingWhitespace() throws ClassNotFoundException {
        assertEquals( int[].class, ClassUtils.getClass( "" int [ ] "" ) );
        assertEquals( long[].class, ClassUtils.getClass( ""\rlong\t[\n]\r"" ) );
        assertEquals( short[].class, ClassUtils.getClass( ""\tshort                \t\t[]"" ) );
        assertEquals( byte[].class, ClassUtils.getClass( ""byte[\t\t\n\r]   "" ) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4581]])
98,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementShortArray(),"    @Test
    public void testRemoveElementShortArray() {
        short[] array;
        array = ArrayUtils.removeElement((short[]) null, (short) 1);
        assertNull(array);
        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new short[] {1}, (short) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new short[] {1, 2}, (short) 1);
        assertTrue(Arrays.equals(new short[] {2}, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new short[] {1, 2, 1}, (short) 1);
        assertTrue(Arrays.equals(new short[] {2, 1}, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4581]])
903,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testEscapeSurrogatePairs(),"    @Test
    public void testEscapeSurrogatePairs() throws Exception {
        assertEquals(""\uD83D\uDE30"", StringEscapeUtils.escapeCsv(""\uD83D\uDE30""));
        // Examples from https://en.wikipedia.org/wiki/UTF-16
        assertEquals(""\uD800\uDC00"", StringEscapeUtils.escapeCsv(""\uD800\uDC00""));
        assertEquals(""\uD834\uDD1E"", StringEscapeUtils.escapeCsv(""\uD834\uDD1E""));
        assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeCsv(""\uDBFF\uDFFD""));
        assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeHtml3(""\uDBFF\uDFFD""));
        assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeHtml4(""\uDBFF\uDFFD""));
        assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeXml(""\uDBFF\uDFFD""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4579]])
24,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectAtIndex(),"    @Test
    public void testAddObjectAtIndex() {
        Object[] newArray;
        newArray = ArrayUtils.add((Object[])null, 0, ""a"");
        assertTrue(Arrays.equals(new String[]{""a""}, newArray));
        assertTrue(Arrays.equals(new Object[]{""a""}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        final String[] stringArray1 = new String[]{""a"", ""b"", ""c""};
        newArray = ArrayUtils.add(stringArray1, 0, null);
        assertTrue(Arrays.equals(new String[]{null, ""a"", ""b"", ""c""}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(stringArray1, 1, null);
        assertTrue(Arrays.equals(new String[]{""a"", null, ""b"", ""c""}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(stringArray1, 3, null);
        assertTrue(Arrays.equals(new String[]{""a"", ""b"", ""c"", null}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(stringArray1, 3, ""d"");
        assertTrue(Arrays.equals(new String[]{""a"", ""b"", ""c"", ""d""}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());
        assertEquals(String.class, newArray.getClass().getComponentType());

        final Object[] o = new Object[] {""1"", ""2"", ""4""};
        final Object[] result = ArrayUtils.add(o, 2, ""3"");
        final Object[] result2 = ArrayUtils.add(o, 3, ""5"");

        assertNotNull(result);
        assertEquals(4, result.length);
        assertEquals(""1"", result[0]);
        assertEquals(""2"", result[1]);
        assertEquals(""3"", result[2]);
        assertEquals(""4"", result[3]);
        assertNotNull(result2);
        assertEquals(4, result2.length);
        assertEquals(""1"", result2[0]);
        assertEquals(""2"", result2[1]);
        assertEquals(""4"", result2[2]);
        assertEquals(""5"", result2[3]);

        // boolean tests
        boolean[] booleanArray = ArrayUtils.add( null, 0, true );
        assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) );
        try {
            booleanArray = ArrayUtils.add( null, -1, true );
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 0"", e.getMessage());
        }
        booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false);
        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );
        booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true);
        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );
        booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true);
        assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) );
        try {
            booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: 4, Length: 2"", e.getMessage());
        }
        try {
            booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 2"", e.getMessage());
        }

        // char tests
        char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' );
        assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) );
        try {
            charArray = ArrayUtils.add( (char[]) null, -1, 'a' );
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 0"", e.getMessage());
        }
        charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b');
        assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) );
        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c');
        assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) );
        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k');
        assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) );
        charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't');
        assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) );
        try {
            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c');
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: 4, Length: 2"", e.getMessage());
        }
        try {
            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c');
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 2"", e.getMessage());
        }

        // short tests
        short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2);
        assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) );
        try {
            shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 0"", e.getMessage());
        }
        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10);
        assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) );
        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4);
        assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) );
        shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1);
        assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) );
        try {
            shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: 4, Length: 2"", e.getMessage());
        }
        try {
            shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 2"", e.getMessage());
        }

        // byte tests
        byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2);
        assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) );
        try {
            byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 0"", e.getMessage());
        }
        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3);
        assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) );
        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1);
        assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) );
        byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1);
        assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) );
        try {
            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: 4, Length: 2"", e.getMessage());
        }
        try {
            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 2"", e.getMessage());
        }

        // int tests
        int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2);
        assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) );
        try {
            intArray = ArrayUtils.add( (int[]) null, -1, 2);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 0"", e.getMessage());
        }
        intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10);
        assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) );
        intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4);
        assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) );
        intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1);
        assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) );
        try {
            intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: 4, Length: 2"", e.getMessage());
        }
        try {
            intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 2"", e.getMessage());
        }

        // long tests
        long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L);
        assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) );
        try {
            longArray = ArrayUtils.add( (long[]) null, -1, 2L);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 0"", e.getMessage());
        }
        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L);
        assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) );
        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L);
        assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) );
        longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L);
        assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) );
        try {
            longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: 4, Length: 2"", e.getMessage());
        }
        try {
            longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 2"", e.getMessage());
        }

        // float tests
        float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f);
        assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) );
        try {
            floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 0"", e.getMessage());
        }
        floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f);
        assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) );
        floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f);
        assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) );
        floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f);
        assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) );
        try {
            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: 4, Length: 2"", e.getMessage());
        }
        try {
            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 2"", e.getMessage());
        }

        // double tests
        double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2);
        assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) );
        try {
          doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 0"", e.getMessage());
        }
        doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5);
        assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) );
        doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8);
        assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) );
        doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0);
        assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) );
        try {
            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: 4, Length: 2"", e.getMessage());
        }
        try {
            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5);
        } catch(final IndexOutOfBoundsException e) {
            assertEquals(""Index: -1, Length: 2"", e.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4577]])
79,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementShortArray(),"    @Test
    public void testRemoveElementShortArray() {
        short[] array;
        array = ArrayUtils.removeElements((short[]) null, (short) 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1);
        assertTrue(Arrays.equals(new short[] { 2 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1);
        assertTrue(Arrays.equals(new short[] { 2, 1 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeElements((short[]) null, (short) 1, (short) 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1, (short) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1, (short) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 1);
        assertTrue(Arrays.equals(new short[] { 2 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1);
        assertTrue(Arrays.equals(new short[] { 2 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 2);
        assertTrue(Arrays.equals(new short[] { 1 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1, (short) 1, (short) 1);
        assertTrue(Arrays.equals(new short[] { 2 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4574]])
132,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDouble(),"    @Test
    public void testNullToEmptyDouble() {
        // Test null handling
        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null));
        // Test valid array handling
        final double[] original = new double[] {1L, 2L};
        assertEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final double[] empty = new double[]{};
        final double[] result = ArrayUtils.nullToEmpty(empty);
        assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4572]])
428,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_NoAutoboxing(),"    @Test
    public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception {
        final Class<?>[] array2 = new Class[] {Object.class, Object.class};
        final Class<?>[] array1 = new Class[] {Object.class};
        final Class<?>[] array1s = new Class[] {String.class};
        final Class<?>[] array0 = new Class[] {};
        final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };
        final Class<?>[] arrayWrappers = { Integer.class, Boolean.class };

        assertFalse(ClassUtils.isAssignable(array1, array2, false));
        assertFalse(ClassUtils.isAssignable(null, array2, false));
        assertTrue(ClassUtils.isAssignable(null, array0, false));
        assertTrue(ClassUtils.isAssignable(array0, array0, false));
        assertTrue(ClassUtils.isAssignable(array0, null, false));
        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false));

        assertFalse(ClassUtils.isAssignable(array1, array1s, false));
        assertTrue(ClassUtils.isAssignable(array1s, array1s, false));
        assertTrue(ClassUtils.isAssignable(array1s, array1, false));

        assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false));
        assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false));
        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false));
        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false));
        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false));
        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4571]])
175,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfWithStartIndex(),"    @Test
    public void testLastIndexOfWithStartIndex() {
        final Object[] array = new Object[] { ""0"", ""1"", ""2"", ""3"", null, ""0"" };
        assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(null, ""0"", 2));
        assertEquals(0, ArrayUtils.lastIndexOf(array, ""0"", 2));
        assertEquals(1, ArrayUtils.lastIndexOf(array, ""1"", 2));
        assertEquals(2, ArrayUtils.lastIndexOf(array, ""2"", 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, ""3"", 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, ""3"", -1));
        assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, ""notInArray"", 5));
        
        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));
        assertEquals(5, ArrayUtils.lastIndexOf(array, ""0"", 88));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4568]])
210,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContainsDouble(),"    @SuppressWarnings(""cast"")
    @Test
    public void testContainsDouble() {
        double[] array = null;
        assertFalse(ArrayUtils.contains(array, (double) 1));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertTrue(ArrayUtils.contains(array, (double) 0));
        assertTrue(ArrayUtils.contains(array, (double) 1));
        assertTrue(ArrayUtils.contains(array, (double) 2));
        assertTrue(ArrayUtils.contains(array, (double) 3));
        assertFalse(ArrayUtils.contains(array, (double) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4567]])
760,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringCharArray(),"    @Test
    public void testIndexOfAny_StringCharArray() {
        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));
        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));
        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));

        assertEquals(-1, StringUtils.indexOfAny("""", (char[]) null));
        assertEquals(-1, StringUtils.indexOfAny("""", new char[0]));
        assertEquals(-1, StringUtils.indexOfAny("""", new char[] {'a','b'}));

        assertEquals(-1, StringUtils.indexOfAny(""zzabyycdxx"", (char[]) null));
        assertEquals(-1, StringUtils.indexOfAny(""zzabyycdxx"", new char[0]));
        assertEquals(0, StringUtils.indexOfAny(""zzabyycdxx"", new char[] {'z','a'}));
        assertEquals(3, StringUtils.indexOfAny(""zzabyycdxx"", new char[] {'b','y'}));
        assertEquals(-1, StringUtils.indexOfAny(""ab"", new char[] {'z'}));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4560]])
74,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementCharArray(),"    @Test
    public void testRemoveElementCharArray() {
        char[] array;
        array = ArrayUtils.removeElements((char[]) null, 'a');
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new char[] { 'a' }, 'a');
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a');
        assertTrue(Arrays.equals(new char[] { 'b' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a');
        assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeElements((char[]) null, 'a', 'b');
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a', 'b');
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new char[] { 'a' }, 'a', 'b');
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'b');
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'a');
        assertTrue(Arrays.equals(new char[] { 'b' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'b');
        assertTrue(Arrays.equals(new char[] { 'a' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a');
        assertTrue(Arrays.equals(new char[] { 'b' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a', 'a', 'a');
        assertTrue(Arrays.equals(new char[] { 'b' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4559]])
251,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testGetLength(),"    @Test
    public void testGetLength() {
        assertEquals(0, ArrayUtils.getLength(null));
        
        final Object[] emptyObjectArray = new Object[0];
        final Object[] notEmptyObjectArray = new Object[] {""aValue""};
        assertEquals(0, ArrayUtils.getLength((Object[]) null));
        assertEquals(0, ArrayUtils.getLength(emptyObjectArray));
        assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));
 
        final int[] emptyIntArray = new int[] {};
        final int[] notEmptyIntArray = new int[] { 1 };
        assertEquals(0, ArrayUtils.getLength((int[]) null));
        assertEquals(0, ArrayUtils.getLength(emptyIntArray));
        assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));

        final short[] emptyShortArray = new short[] {};
        final short[] notEmptyShortArray = new short[] { 1 };
        assertEquals(0, ArrayUtils.getLength((short[]) null));
        assertEquals(0, ArrayUtils.getLength(emptyShortArray));
        assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));

        final char[] emptyCharArray = new char[] {};
        final char[] notEmptyCharArray = new char[] { 1 };
        assertEquals(0, ArrayUtils.getLength((char[]) null));
        assertEquals(0, ArrayUtils.getLength(emptyCharArray));
        assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));

        final byte[] emptyByteArray = new byte[] {};
        final byte[] notEmptyByteArray = new byte[] { 1 };
        assertEquals(0, ArrayUtils.getLength((byte[]) null));
        assertEquals(0, ArrayUtils.getLength(emptyByteArray));
        assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));

        final double[] emptyDoubleArray = new double[] {};
        final double[] notEmptyDoubleArray = new double[] { 1.0 };
        assertEquals(0, ArrayUtils.getLength((double[]) null));
        assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));
        assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));

        final float[] emptyFloatArray = new float[] {};
        final float[] notEmptyFloatArray = new float[] { 1.0F };
        assertEquals(0, ArrayUtils.getLength((float[]) null));
        assertEquals(0, ArrayUtils.getLength(emptyFloatArray));
        assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));

        final boolean[] emptyBooleanArray = new boolean[] {};
        final boolean[] notEmptyBooleanArray = new boolean[] { true };
        assertEquals(0, ArrayUtils.getLength((boolean[]) null));
        assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));
        assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));
        
        try {
            ArrayUtils.getLength(""notAnArray"");
            fail(""IllegalArgumentException should have been thrown"");
        } catch (final IllegalArgumentException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4557]])
234,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int(),"     @Test
     public void testToPrimitive_int() {
         final Integer[] b = null;
         assertEquals(null, ArrayUtils.toPrimitive(b));
         assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));
         assertTrue(Arrays.equals(
             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), 
                 Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)}))
         );

         try {
             ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), null});
             fail();
         } catch (final NullPointerException ex) {}
     }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4557]])
109,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndirectEmptyArrayCreation(),"    @Test
    public void testIndirectEmptyArrayCreation()
    {
        final String[] array = ArrayUtilsTest.<String>toArrayPropagatingType();
        assertEquals(0, array.length);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4553]])
813,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayCharSeparator(),"    @Test
    public void testJoin_ArrayCharSeparator() {
        assertEquals(null, StringUtils.join((Object[]) null, ','));
        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));
        assertEquals("""", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));
        assertEquals("";;foo"", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));
        assertEquals(""foo;2"", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));

        assertEquals(""/"", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));
        assertEquals(""foo"", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));
        assertEquals(""null"", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));
        assertEquals(""foo/2"", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));
        assertEquals(""2"", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));
        assertEquals("""", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4553]])
576,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,"org.apache.commons.lang3.LocaleUtilsTest.assertLanguageByCountry(java.lang.String, java.lang.String[])","    private void assertLanguageByCountry(final String country, final String[] languages) {
        final List<Locale> list = LocaleUtils.languagesByCountry(country);
        final List<Locale> list2 = LocaleUtils.languagesByCountry(country);
        assertNotNull(list);
        assertSame(list, list2);
        //search through langauges
        for (final String language : languages) {
            final Iterator<Locale> iterator = list.iterator();
            boolean found = false;
            // see if it was returned by the set
            while (iterator.hasNext()) {
                final Locale locale = iterator.next();
                // should have an en empty variant
                assertTrue(locale.getVariant() == null
                        || locale.getVariant().isEmpty());
                assertEquals(country, locale.getCountry());
                if (language.equals(locale.getLanguage())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                fail(""Cound not find language: "" + language
                        + "" for country: "" + country);
            }
        }
        assertUnmodifiableCollection(list);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4552]])
172,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOf(),"    @Test
    public void testIndexOf() {
        final Object[] array = new Object[] { ""0"", ""1"", ""2"", ""3"", null, ""0"" };
        assertEquals(-1, ArrayUtils.indexOf(null, null));
        assertEquals(-1, ArrayUtils.indexOf(null, ""0""));
        assertEquals(-1, ArrayUtils.indexOf(new Object[0], ""0""));
        assertEquals(0, ArrayUtils.indexOf(array, ""0""));
        assertEquals(1, ArrayUtils.indexOf(array, ""1""));
        assertEquals(2, ArrayUtils.indexOf(array, ""2""));
        assertEquals(3, ArrayUtils.indexOf(array, ""3""));
        assertEquals(4, ArrayUtils.indexOf(array, null));
        assertEquals(-1, ArrayUtils.indexOf(array, ""notInArray""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4550]])
265,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testSetBoolean(),"    @Test
    public void testSetBoolean() {
        assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));
        assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));
        assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true));
        assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));
        assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));
        assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4550]])
816,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfInts(),"    @Test
    public void testJoin_ArrayOfInts() {
        assertEquals(null, StringUtils.join((int[]) null, ','));
        assertEquals(""1;2"", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR));
        assertEquals(""2"", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4547]])
680,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamBadStream(),"    @Test
    public void testDeserializeStreamBadStream() throws Exception {
        try {
            SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0]));
        } catch (final SerializationException ex) {
            return;
        }
        fail();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4544]])
30,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNumberArray(),"    @Test
    public void testRemoveAllNumberArray() {
        final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) };
        assertEquals(3, inarray.length);
        Number[] outarray;
        outarray = ArrayUtils.removeAll(inarray, 1);
        assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray);
        assertEquals(Number.class, outarray.getClass().getComponentType());
        outarray = ArrayUtils.removeAll(outarray, 1);
        assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray);
        assertEquals(Number.class, outarray.getClass().getComponentType());
        outarray = ArrayUtils.removeAll(outarray, 0);
        assertEquals(0, outarray.length);
        assertEquals(Number.class, outarray.getClass().getComponentType());

        outarray = ArrayUtils.removeAll(inarray, 0, 1);
        assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray);
        assertEquals(Number.class, outarray.getClass().getComponentType());
        outarray = ArrayUtils.removeAll(inarray, 0, 2);
        assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray);
        assertEquals(Number.class, outarray.getClass().getComponentType());
        outarray = ArrayUtils.removeAll(inarray, 1, 2);
        assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray);
        assertEquals(Number.class, outarray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4538]])
590,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testHashCodeMulti_multiple_emptyArray(),"    @Test
    public void testHashCodeMulti_multiple_emptyArray() {
        final Object[] array = new Object[0];
        assertEquals(1, ObjectUtils.hashCodeMulti(array));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4535]])
93,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementCharArray(),"    @Test
    public void testRemoveElementCharArray() {
        char[] array;
        array = ArrayUtils.removeElement((char[]) null, 'a');
        assertNull(array);
        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new char[] {'a'}, 'a');
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a');
        assertTrue(Arrays.equals(new char[] {'b'}, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new char[] {'a', 'b', 'a'}, 'a');
        assertTrue(Arrays.equals(new char[] {'b', 'a'}, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4534]])
934,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SystemUtilsTest.java,org.apache.commons.lang3.SystemUtilsTest.testOSMatchesNameAndVersion(),"    @Test
    public void testOSMatchesNameAndVersion() {
        String osName = null;
        String osVersion = null;
        assertFalse(SystemUtils.isOSMatch(osName, osVersion, ""Windows 9"", ""4.1""));
        osName = """";
        osVersion = """";
        assertFalse(SystemUtils.isOSMatch(osName, osVersion, ""Windows 9"", ""4.1""));
        osName = ""Windows 95"";
        osVersion = ""4.0"";
        assertFalse(SystemUtils.isOSMatch(osName, osVersion, ""Windows 9"", ""4.1""));
        osName = ""Windows 95"";
        osVersion = ""4.1"";
        assertTrue(SystemUtils.isOSMatch(osName, osVersion, ""Windows 9"", ""4.1""));
        osName = ""Windows 98"";
        osVersion = ""4.1"";
        assertTrue(SystemUtils.isOSMatch(osName, osVersion, ""Windows 9"", ""4.1""));
        osName = ""Windows NT"";
        osVersion = ""4.0"";
        assertFalse(SystemUtils.isOSMatch(osName, osVersion, ""Windows 9"", ""4.1""));
        osName = ""OS/2"";
        osVersion = ""4.0"";
        assertFalse(SystemUtils.isOSMatch(osName, osVersion, ""Windows 9"", ""4.1""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4531]])
236,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_intNull(),"    @Test
    public void testToPrimitive_intNull() {
        final Integer[] iArray = null;
        assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4526]])
669,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testSerializeStream(),"    @Test
    public void testSerializeStream() throws Exception {
        final ByteArrayOutputStream streamTest = new ByteArrayOutputStream();
        SerializationUtils.serialize(iMap, streamTest);

        final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
        final ObjectOutputStream oos = new ObjectOutputStream(streamReal);
        oos.writeObject(iMap);
        oos.flush();
        oos.close();

        final byte[] testBytes = streamTest.toByteArray();
        final byte[] realBytes = streamReal.toByteArray();
        assertEquals(testBytes.length, realBytes.length);
        for (int i = 0; i < realBytes.length; i++) {
            assertEquals(realBytes[i], testBytes[i]);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4520]])
651,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testGetMaximum(),"    @Test
    public void testGetMaximum() {
        assertEquals(20, (int) intRange.getMaximum());
        assertEquals(20L, (long) longRange.getMaximum());
        assertEquals(20f, floatRange.getMaximum(), 0.00001f);
        assertEquals(20d, doubleRange.getMaximum(), 0.00001d);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4517]])
173,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfWithStartIndex(),"    @Test
    public void testIndexOfWithStartIndex() {
        final Object[] array = new Object[] { ""0"", ""1"", ""2"", ""3"", null, ""0"" };
        assertEquals(-1, ArrayUtils.indexOf(null, null, 2));
        assertEquals(-1, ArrayUtils.indexOf(new Object[0], ""0"", 0));
        assertEquals(-1, ArrayUtils.indexOf(null, ""0"", 2));
        assertEquals(5, ArrayUtils.indexOf(array, ""0"", 2));
        assertEquals(-1, ArrayUtils.indexOf(array, ""1"", 2));
        assertEquals(2, ArrayUtils.indexOf(array, ""2"", 2));
        assertEquals(3, ArrayUtils.indexOf(array, ""3"", 2));
        assertEquals(4, ArrayUtils.indexOf(array, null, 2));
        assertEquals(-1, ArrayUtils.indexOf(array, ""notInArray"", 2));
        
        assertEquals(4, ArrayUtils.indexOf(array, null, -1));
        assertEquals(-1, ArrayUtils.indexOf(array, null, 8));
        assertEquals(-1, ArrayUtils.indexOf(array, ""0"", 8));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4517]])
90,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementObjectArray(),"    @Test
    public void testRemoveElementObjectArray() {
        Object[] array;
        array = ArrayUtils.removeElement((Object[]) null, ""a"");
        assertNull(array);
        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, ""a"");
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new Object[] {""a""}, ""a"");
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new Object[] {""a"", ""b""}, ""a"");
        assertTrue(Arrays.equals(new Object[] {""b""}, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new Object[] {""a"", ""b"", ""a""}, ""a"");
        assertTrue(Arrays.equals(new Object[] {""b"", ""a""}, array));
        assertEquals(Object.class, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4514]])
678,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamOfNull(),"    @Test
    public void testDeserializeStreamOfNull() throws Exception {
        final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
        final ObjectOutputStream oos = new ObjectOutputStream(streamReal);
        oos.writeObject(null);
        oos.flush();
        oos.close();

        final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());
        final Object test = SerializationUtils.deserialize(inTest);
        assertNull(test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4510]])
220,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfBooleanWithStartIndex(),"    @Test
    public void testLastIndexOfBooleanWithStartIndex() {
        boolean[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));
        array = new boolean[0];
        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));
        array = new boolean[] { true, false, true };
        assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));
        assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));
        assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));
        array = new boolean[] { true, true };
        assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4509]])
448,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testGetInnerClass(),"    @Test
    public void testGetInnerClass() throws ClassNotFoundException {
        assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( ""org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested"" ) );
        assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( ""org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested"" ) );
        assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( ""org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested"" ) );
        assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( ""org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested"" ) );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4508]])
566,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,"org.apache.commons.lang3.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String, java.lang.String)","    private void assertValidToLocale(
            final String localeString, final String language, 
            final String country, final String variant) {
        final Locale locale = LocaleUtils.toLocale(localeString);
        assertNotNull(""valid locale"", locale);
        assertEquals(language, locale.getLanguage());
        assertEquals(country, locale.getCountry());
        assertEquals(variant, locale.getVariant());
        
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4506]])
472,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryToHexDigit_2args(),"    @Test
    public void testBinaryToHexDigit_2args() {
        final boolean[] shortArray = new boolean[]{false, true, true};
        assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0));
        assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1));
        assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2));
        final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true};
        assertEquals('5', Conversion.binaryToHexDigit(longArray, 0));
        assertEquals('2', Conversion.binaryToHexDigit(longArray, 1));
        assertEquals('9', Conversion.binaryToHexDigit(longArray, 2));
        assertEquals('c', Conversion.binaryToHexDigit(longArray, 3));
        assertEquals('6', Conversion.binaryToHexDigit(longArray, 4));
        assertEquals('3', Conversion.binaryToHexDigit(longArray, 5));
        assertEquals('1', Conversion.binaryToHexDigit(longArray, 6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4505]])
571,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testLocaleLookupList_Locale(),"    @Test
    public void testLocaleLookupList_Locale() {
        assertLocaleLookupList(null, null, new Locale[0]);
        assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});
        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US, null,
            new Locale[] {
                LOCALE_EN_US,
                LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN});
    }        
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4499]])
26,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayRemoveNone(),"    @Test
    public void testRemoveAllObjectArrayRemoveNone() {
        final Object[] array1 = new Object[] { ""foo"", ""bar"", ""baz"" };
        final Object[] array2 = ArrayUtils.removeAll(array1);
        assertNotSame(array1, array2);
        assertArrayEquals(array1, array2);
        assertEquals(Object.class, array2.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4498]])
659,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testIsAfterRange(),"    @Test
    public void testIsAfterRange() {
        assertFalse(intRange.isAfterRange(null));
        
        assertTrue(intRange.isAfterRange(Range.between(5, 9)));
        
        assertFalse(intRange.isAfterRange(Range.between(5, 10)));
        assertFalse(intRange.isAfterRange(Range.between(5, 20)));
        assertFalse(intRange.isAfterRange(Range.between(5, 25)));
        assertFalse(intRange.isAfterRange(Range.between(15, 25)));
        
        assertFalse(intRange.isAfterRange(Range.between(21, 25)));
        
        assertFalse(intRange.isAfterRange(Range.between(10, 20)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4496]])
887,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringStringInt(),"    @Test
    public void testGetLevenshteinDistance_StringStringInt() {
        // empty strings
        assertEquals(0, StringUtils.getLevenshteinDistance("""", """", 0));
        assertEquals(7, StringUtils.getLevenshteinDistance(""aaapppp"", """", 8));
        assertEquals(7, StringUtils.getLevenshteinDistance(""aaapppp"", """", 7));
        assertEquals(-1, StringUtils.getLevenshteinDistance(""aaapppp"", """", 6));

        // unequal strings, zero threshold
        assertEquals(-1, StringUtils.getLevenshteinDistance(""b"", ""a"", 0));
        assertEquals(-1, StringUtils.getLevenshteinDistance(""a"", ""b"", 0));
    
        // equal strings
        assertEquals(0, StringUtils.getLevenshteinDistance(""aa"", ""aa"", 0));
        assertEquals(0, StringUtils.getLevenshteinDistance(""aa"", ""aa"", 2));

        // same length
        assertEquals(-1, StringUtils.getLevenshteinDistance(""aaa"", ""bbb"", 2));
        assertEquals(3, StringUtils.getLevenshteinDistance(""aaa"", ""bbb"", 3));
    
        // big stripe
        assertEquals(6, StringUtils.getLevenshteinDistance(""aaaaaa"", ""b"", 10));

        // distance less than threshold
        assertEquals(7, StringUtils.getLevenshteinDistance(""aaapppp"", ""b"", 8));
        assertEquals(3, StringUtils.getLevenshteinDistance(""a"", ""bbb"", 4));
    
        // distance equal to threshold
        assertEquals(7, StringUtils.getLevenshteinDistance(""aaapppp"", ""b"", 7));
        assertEquals(3, StringUtils.getLevenshteinDistance(""a"", ""bbb"", 3));

        // distance greater than threshold
        assertEquals(-1, StringUtils.getLevenshteinDistance(""a"", ""bbb"", 2));
        assertEquals(-1, StringUtils.getLevenshteinDistance(""bbb"", ""a"", 2));
        assertEquals(-1, StringUtils.getLevenshteinDistance(""aaapppp"", ""b"", 6));

        // stripe runs off array, strings not similar
        assertEquals(-1, StringUtils.getLevenshteinDistance(""a"", ""bbb"", 1));
        assertEquals(-1, StringUtils.getLevenshteinDistance(""bbb"", ""a"", 1));

        // stripe runs off array, strings are similar
        assertEquals(-1, StringUtils.getLevenshteinDistance(""12345"", ""1234567"", 1));
        assertEquals(-1, StringUtils.getLevenshteinDistance(""1234567"", ""12345"", 1));

        // old getLevenshteinDistance test cases
        assertEquals(1, StringUtils.getLevenshteinDistance(""frog"", ""fog"",1) );
        assertEquals(3, StringUtils.getLevenshteinDistance(""fly"", ""ant"",3) );
        assertEquals(7, StringUtils.getLevenshteinDistance(""elephant"", ""hippo"",7) );
        assertEquals(-1, StringUtils.getLevenshteinDistance(""elephant"", ""hippo"",6) );
        assertEquals(7, StringUtils.getLevenshteinDistance(""hippo"", ""elephant"",7) );
        assertEquals(-1, StringUtils.getLevenshteinDistance(""hippo"", ""elephant"",6) );
        assertEquals(8, StringUtils.getLevenshteinDistance(""hippo"", ""zzzzzzzz"",8) );
        assertEquals(8, StringUtils.getLevenshteinDistance(""zzzzzzzz"", ""hippo"",8) );
        assertEquals(1, StringUtils.getLevenshteinDistance(""hello"", ""hallo"",1) );

        // exceptions
        try {
            @SuppressWarnings(""unused"")
            final
            int d = StringUtils.getLevenshteinDistance(""a"", null, 0);
            fail(""expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            // empty
        }
        try {
            @SuppressWarnings(""unused"")
            final
            int d = StringUtils.getLevenshteinDistance(null, ""a"", 0);
            fail(""expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            // empty
        }

        try {
            @SuppressWarnings(""unused"")
            final
            int d = StringUtils.getLevenshteinDistance(""a"", ""a"", -1);
            fail(""expecting IllegalArgumentException"");
        } catch (final IllegalArgumentException ex) {
            // empty
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4496]])
905,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testUnescapeSurrogatePairs(),"    @Test
    public void testUnescapeSurrogatePairs() throws Exception {
        assertEquals(""\uD83D\uDE30"", StringEscapeUtils.unescapeCsv(""\uD83D\uDE30""));
        // Examples from https://en.wikipedia.org/wiki/UTF-16
        assertEquals(""\uD800\uDC00"", StringEscapeUtils.unescapeCsv(""\uD800\uDC00""));
        assertEquals(""\uD834\uDD1E"", StringEscapeUtils.unescapeCsv(""\uD834\uDD1E""));
        assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.unescapeCsv(""\uDBFF\uDFFD""));
        assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.unescapeHtml3(""\uDBFF\uDFFD""));
        assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.unescapeHtml4(""\uDBFF\uDFFD""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4483]])
152,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSubarrayBoolean(),"    @Test
    public void testSubarrayBoolean() {
        final boolean[] nullArray = null;
        final boolean[] array = { true, true, false, true, false, true };
        final boolean[] leftSubarray  = { true, true, false, true  };
        final boolean[] midSubarray   = { true, false, true, false };
        final boolean[] rightSubarray = { false, true, false, true };


        assertTrue(""0 start, mid end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, 0, 4)));

        assertTrue(""0 start, length end"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, 0, array.length)));

        assertTrue(""mid start, mid end"",
            ArrayUtils.isEquals(midSubarray,
                ArrayUtils.subarray(array, 1, 5)));

        assertTrue(""mid start, length end"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, array.length)));


        assertNull(""null input"", ArrayUtils.subarray(nullArray, 0, 3));

        assertEquals(""empty array"", ArrayUtils.EMPTY_BOOLEAN_ARRAY,
            ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));

        assertEquals(""start > end"", ArrayUtils.EMPTY_BOOLEAN_ARRAY,
            ArrayUtils.subarray(array, 4, 2));

        assertEquals(""start == end"", ArrayUtils.EMPTY_BOOLEAN_ARRAY,
            ArrayUtils.subarray(array, 3, 3));

        assertTrue(""start undershoot, normal end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, -2, 4)));

        assertEquals(""start overshoot, any end"",
            ArrayUtils.EMPTY_BOOLEAN_ARRAY,
                ArrayUtils.subarray(array, 33, 4));

        assertTrue(""normal start, end overshoot"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, 33)));

        assertTrue(""start undershoot, end overshoot"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, -2, 12)));

        // empty-return tests

        assertSame(""empty array, object test"",
            ArrayUtils.EMPTY_BOOLEAN_ARRAY,
                ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));

        assertSame(""start > end, object test"",
            ArrayUtils.EMPTY_BOOLEAN_ARRAY,
                ArrayUtils.subarray(array, 4, 1));

        assertSame(""start == end, object test"",
            ArrayUtils.EMPTY_BOOLEAN_ARRAY,
                ArrayUtils.subarray(array, 3, 3));

        assertSame(""start overshoot, any end, object test"",
            ArrayUtils.EMPTY_BOOLEAN_ARRAY,
                ArrayUtils.subarray(array, 8733, 4));

        // array type tests

        assertSame(""boolean type"", boolean.class,
            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4475]])
156,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameLengthInt(),"    @Test
    public void testSameLengthInt() {
        final int[] nullArray = null;
        final int[] emptyArray = new int[0];
        final int[] oneArray = new int[] {4};
        final int[] twoArray = new int[] {5, 7};
        
        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
        
        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4472]])
975,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ValidateTest.java,org.apache.commons.lang3.ValidateTest.testValidIndex_collection(),"    @Test
    public void testValidIndex_collection() {
        final Collection<String> coll = new ArrayList<String>();
        coll.add(null);
        coll.add(null);
        Validate.validIndex(coll, 0);
        Validate.validIndex(coll, 1);
        try {
            Validate.validIndex(coll, -1);
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""The validated collection index is invalid: -1"", ex.getMessage());
        }
        try {
            Validate.validIndex(coll, 2);
            fail(""Expecting IndexOutOfBoundsException"");
        } catch (final IndexOutOfBoundsException ex) {
            assertEquals(""The validated collection index is invalid: 2"", ex.getMessage());
        }
        
        final List<String> strColl = Arrays.asList(new String[] {""Hi""});
        final List<String> test = Validate.validIndex(strColl, 0);
        assertSame(strColl, test);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4467]])
578,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,"org.apache.commons.lang3.LocaleUtilsTest.assertCountriesByLanguage(java.lang.String, java.lang.String[])","    private void assertCountriesByLanguage(final String language, final String[] countries) {
        final List<Locale> list = LocaleUtils.countriesByLanguage(language);
        final List<Locale> list2 = LocaleUtils.countriesByLanguage(language);
        assertNotNull(list);
        assertSame(list, list2);
        //search through langauges
        for (final String countrie : countries) {
            final Iterator<Locale> iterator = list.iterator();
            boolean found = false;
            // see if it was returned by the set
            while (iterator.hasNext()) {
                final Locale locale = iterator.next();
                // should have an en empty variant
                assertTrue(locale.getVariant() == null
                        || locale.getVariant().isEmpty());
                assertEquals(language, locale.getLanguage());
                if (countrie.equals(locale.getCountry())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                fail(""Cound not find language: "" + countrie
                        + "" for country: "" + language);
            }
        }
        assertUnmodifiableCollection(list);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4465]])
839,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testDeleteWhitespace_String(),"    @Test
    public void testDeleteWhitespace_String() {
        assertEquals(null, StringUtils.deleteWhitespace(null));
        assertEquals("""", StringUtils.deleteWhitespace(""""));
        assertEquals("""", StringUtils.deleteWhitespace(""  \u000C  \t\t\u001F\n\n \u000B  ""));
        assertEquals("""", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));
        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));
        // Note: u-2007 and u-000A both cause problems in the source code
        // it should ignore 2007 but delete 000A
        assertEquals(""\u00A0\u202F"", StringUtils.deleteWhitespace(""  \u00A0  \t\t\n\n \u202F  ""));
        assertEquals(""\u00A0\u202F"", StringUtils.deleteWhitespace(""\u00A0\u202F""));
        assertEquals(""test"", StringUtils.deleteWhitespace(""\u000Bt  \t\n\u0009e\rs\n\n   \tt""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4463]])
356,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testHashCode(),"    @Test
    public void testHashCode() {
        final CharRange rangea = CharRange.is('a');
        final CharRange rangeae = CharRange.isIn('a', 'e');
        final CharRange rangenotbf = CharRange.isIn('b', 'f');

        assertTrue(rangea.hashCode() == rangea.hashCode());
        assertTrue(rangea.hashCode() == CharRange.is('a').hashCode());
        assertTrue(rangeae.hashCode() == rangeae.hashCode());
        assertTrue(rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode());
        assertTrue(rangenotbf.hashCode() == rangenotbf.hashCode());
        assertTrue(rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());

        assertFalse(rangea.hashCode() == rangeae.hashCode());
        assertFalse(rangea.hashCode() == rangenotbf.hashCode());
        assertFalse(rangeae.hashCode() == rangea.hashCode());
        assertFalse(rangeae.hashCode() == rangenotbf.hashCode());
        assertFalse(rangenotbf.hashCode() == rangea.hashCode());
        assertFalse(rangenotbf.hashCode() == rangeae.hashCode());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4457]])
15,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayChar(),"    @Test
    public void testAddObjectArrayChar() {
        char[] newArray;
        newArray = ArrayUtils.add((char[])null, (char)0);
        assertTrue(Arrays.equals(new char[]{0}, newArray));
        assertEquals(Character.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add((char[])null, (char)1);
        assertTrue(Arrays.equals(new char[]{1}, newArray));
        assertEquals(Character.TYPE, newArray.getClass().getComponentType());
        final char[] array1 = new char[]{1, 2, 3};
        newArray = ArrayUtils.add(array1, (char)0);
        assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray));
        assertEquals(Character.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(array1, (char)4);
        assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));
        assertEquals(Character.TYPE, newArray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4451]])
572,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testLocaleLookupList_LocaleLocale(),"    @Test
    public void testLocaleLookupList_LocaleLocale() {
        assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, 
                new Locale[]{LOCALE_QQ});
        assertLocaleLookupList(LOCALE_EN, LOCALE_EN, 
                new Locale[]{LOCALE_EN});
        
        assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, 
            new Locale[]{
                LOCALE_EN_US,
                LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,
            new Locale[] {
                LOCALE_EN_US,
                LOCALE_EN,
                LOCALE_QQ});
        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,
            new Locale[] {
                LOCALE_EN_US,
                LOCALE_EN,
                LOCALE_QQ_ZZ});
        
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN,
                LOCALE_QQ});
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN,
                LOCALE_QQ_ZZ});
        assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,
            new Locale[] {
                LOCALE_FR_CA,
                LOCALE_FR,
                LOCALE_EN});
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4443]])
41,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArray(),"    @Test
    public void testRemoveAllCharArray() {
        char[] array;
        array = ArrayUtils.removeAll(new char[] { 'a' }, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b' }, 0);
        assertTrue(Arrays.equals(new char[] { 'b' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b' }, 1);
        assertTrue(Arrays.equals(new char[] { 'a' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 1);
        assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeAll(new char[] { 'a', 'b' }, 0, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 0, 1);
        assertTrue(Arrays.equals(new char[] { 'c' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 1, 2);
        assertTrue(Arrays.equals(new char[] { 'a' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c' }, 0, 2);
        assertTrue(Arrays.equals(new char[] { 'b' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e' }, 1, 3);
        assertTrue(Arrays.equals(new char[] { 'a', 'c', 'e' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e' }, 0, 2, 4);
        assertTrue(Arrays.equals(new char[] { 'b', 'd' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g' }, 1, 3, 5);
        assertTrue(Arrays.equals(new char[] { 'a', 'c', 'e', 'g' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g' }, 0, 2, 4, 6);
        assertTrue(Arrays.equals(new char[] { 'b', 'd', 'f' }, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4432]])
846,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray(),"    @Test
    public void testReplace_StringStringArrayStringArray() {
        //JAVADOC TESTS START
        assertNull(StringUtils.replaceEach(null, new String[]{""a""}, new String[]{""b""}));
        assertEquals(StringUtils.replaceEach("""", new String[]{""a""}, new String[]{""b""}),"""");
        assertEquals(StringUtils.replaceEach(""aba"", null, null),""aba"");
        assertEquals(StringUtils.replaceEach(""aba"", new String[0], null),""aba"");
        assertEquals(StringUtils.replaceEach(""aba"", null, new String[0]),""aba"");
        assertEquals(StringUtils.replaceEach(""aba"", new String[]{""a""}, null),""aba"");

        assertEquals(StringUtils.replaceEach(""aba"", new String[]{""a""}, new String[]{""""}),""b"");
        assertEquals(StringUtils.replaceEach(""aba"", new String[]{null}, new String[]{""a""}),""aba"");
        assertEquals(StringUtils.replaceEach(""abcde"", new String[]{""ab"", ""d""}, new String[]{""w"", ""t""}),""wcte"");
        assertEquals(StringUtils.replaceEach(""abcde"", new String[]{""ab"", ""d""}, new String[]{""d"", ""t""}),""dcte"");
        //JAVADOC TESTS END

        assertEquals(""bcc"", StringUtils.replaceEach(""abc"", new String[]{""a"", ""b""}, new String[]{""b"", ""c""}));
        assertEquals(""q651.506bera"", StringUtils.replaceEach(""d216.102oren"",
            new String[]{""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", 
                ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z"", ""A"", ""B"", ""C"", ""D"", 
                ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", 
                ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""},
            new String[]{""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z"", ""a"", 
                ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""N"", ""O"", ""P"", ""Q"", 
                ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z"", ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", 
                ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""5"", ""6"", ""7"", ""8"", ""9"", ""1"", ""2"", ""3"", ""4""}));

        // Test null safety inside arrays - LANG-552
        assertEquals(StringUtils.replaceEach(""aba"", new String[]{""a""}, new String[]{null}),""aba"");
        assertEquals(StringUtils.replaceEach(""aba"", new String[]{""a"", ""b""}, new String[]{""c"", null}),""cbc"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4432]])
28,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayOutOfBoundsIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllObjectArrayOutOfBoundsIndex() {
        ArrayUtils.removeAll(new Object[] { ""a"", ""b"" }, 2);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4432]])
516,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_getEnum(),"    @Test
    public void test_getEnum() {
        assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, ""RED""));
        assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, ""AMBER""));
        assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, ""GREEN""));
        assertEquals(null, EnumUtils.getEnum(Traffic.class, ""PURPLE""));
        assertEquals(null, EnumUtils.getEnum(Traffic.class, null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4426]])
64,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayOutOfBoundsIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllLongArrayOutOfBoundsIndex() {
        ArrayUtils.removeAll(new long[] { 1, 2 }, 2);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4419]])
218,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfBooleanWithStartIndex(),"    @Test
    public void testIndexOfBooleanWithStartIndex() {
        boolean[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));
        array = new boolean[0];
        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));
        array = new boolean[] { true, false, true };
        assertEquals(2, ArrayUtils.indexOf(array, true, 1));
        assertEquals(-1, ArrayUtils.indexOf(array, false, 2));
        assertEquals(1, ArrayUtils.indexOf(array, false, 0));
        assertEquals(1, ArrayUtils.indexOf(array, false, -1));
        array = new boolean[] { true, true };
        assertEquals(-1, ArrayUtils.indexOf(array, false, 0));
        assertEquals(-1, ArrayUtils.indexOf(array, false, -1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4418]])
492,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryToInt(),"    @Test
    public void testBinaryToInt() {
        final boolean[] src = new boolean[]{
            false, false, true, true, true, false, true, true, true, true, true, true, true,
            false, false, false, true, true, true, true, false, false, false, false, false,
            false, true, true, true, false, false, false, false, false, false, false, true,
            true, true, true, true, false, false, false, false, true, false, false, true, true,
            false, false, false, false, true, false, true, false, true, false, false, true,
            true, false, true, true, true, false, false, false, false, true};
        // conversion of ""CDF1F0C10F12345678"" by HexToBinary
        assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4));
        assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4));
        assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4));
        assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4));
        assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4));
        assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4417]])
71,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementsObjectArray(),"    @Test
    public void testRemoveElementsObjectArray() {
        Object[] array;
        array = ArrayUtils.removeElements((Object[]) null, ""a"");
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, ""a"");
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new Object[] { ""a"" }, ""a"");
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new Object[] { ""a"", ""b"" }, ""a"");
        assertTrue(Arrays.equals(new Object[] { ""b"" }, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new Object[] { ""a"", ""b"", ""a"" }, ""a"");
        assertTrue(Arrays.equals(new Object[] { ""b"", ""a"" }, array));
        assertEquals(Object.class, array.getClass().getComponentType());

        array = ArrayUtils.removeElements((Object[]) null, ""a"", ""b"");
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, ""a"", ""b"");
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new Object[] { ""a"" }, ""a"", ""b"");
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new Object[] { ""a"", ""b"" }, ""a"", ""c"");
        assertTrue(Arrays.equals(new Object[] { ""b"" }, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new Object[] { ""a"", ""b"", ""a"" }, ""a"");
        assertTrue(Arrays.equals(new Object[] { ""b"", ""a"" }, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new Object[] { ""a"", ""b"", ""a"" }, ""a"", ""b"");
        assertTrue(Arrays.equals(new Object[] { ""a"" }, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new Object[] { ""a"", ""b"", ""a"" }, ""a"", ""a"");
        assertTrue(Arrays.equals(new Object[] { ""b"" }, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new Object[] { ""a"", ""b"", ""a"" }, ""a"", ""a"", ""a"", ""a"");
        assertTrue(Arrays.equals(new Object[] { ""b"" }, array));
        assertEquals(Object.class, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4410]])
569,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.testToLocale_3Part(),"    @Test
    public void testToLocale_3Part() {
        assertValidToLocale(""us_EN_A"", ""us"", ""EN"", ""A"");
        // this isn't pretty, but was caused by a jdk bug it seems
        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525
        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {
            assertValidToLocale(""us_EN_a"", ""us"", ""EN"", ""a"");
            assertValidToLocale(""us_EN_SFsafdFDsdfF"", ""us"", ""EN"", ""SFsafdFDsdfF"");
        } else {
            assertValidToLocale(""us_EN_a"", ""us"", ""EN"", ""A"");
            assertValidToLocale(""us_EN_SFsafdFDsdfF"", ""us"", ""EN"", ""SFSAFDFDSDFF"");
        }
        
        try {
            LocaleUtils.toLocale(""us_EN-a"");
            fail(""Should fail as not underscore"");
        } catch (final IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""uu_UU_"");
            fail(""Must be 3, 5 or 7+ in length"");
        } catch (final IllegalArgumentException iae) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4399]])
195,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfCharWithStartIndex(),"    @Test
    public void testLastIndexOfCharWithStartIndex() {
        char[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));
        array = new char[] { 'a', 'b', 'c', 'd', 'a' };
        assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2));
        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2));
        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));
        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4393]])
0,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.setup(),"    @Before
    public void setup() throws Exception {
        field1 = getClass().getDeclaredField(""dummy1"");
        field2 = getClass().getDeclaredField(""dummy2"");
        field3 = getClass().getDeclaredField(""dummy3"");
        field4 = getClass().getDeclaredField(""dummy4"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4393]])
501,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testLongToHex(),"    @Test
    public void testLongToHex() {
        assertEquals("""", Conversion.longToHex(0x0000000000000000L, 0, """", 0, 0));
        assertEquals("""", Conversion.longToHex(0x0000000000000000L, 100, """", 0, 0));
        assertEquals("""", Conversion.longToHex(0x0000000000000000L, 0, """", 100, 0));
        assertEquals(
            ""ffffffffffffffffffffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 0, ""ffffffffffffffffffffffff"", 0, 0));
        assertEquals(
            ""3fffffffffffffffffffffff"",
            Conversion.longToHex(0x1234567890ABCDE3L, 0, ""ffffffffffffffffffffffff"", 0, 1));
        assertEquals(
            ""feffffffffffffffffffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 0, ""ffffffffffffffffffffffff"", 0, 2));
        assertEquals(
            ""fedcffffffffffffffffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 0, ""ffffffffffffffffffffffff"", 0, 4));
        assertEquals(
            ""fedcba098765432fffffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 0, ""ffffffffffffffffffffffff"", 0, 15));
        assertEquals(
            ""fedcba0987654321ffffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 0, ""ffffffffffffffffffffffff"", 0, 16));
        assertEquals(
            ""fff3ffffffffffffffffffff"",
            Conversion.longToHex(0x1234567890ABCDE3L, 0, ""ffffffffffffffffffffffff"", 3, 1));
        assertEquals(
            ""ffffefffffffffffffffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 0, ""ffffffffffffffffffffffff"", 3, 2));
        assertEquals(
            ""ffffedcfffffffffffffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 0, ""ffffffffffffffffffffffff"", 3, 4));
        assertEquals(
            ""ffffedcba098765432ffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 0, ""ffffffffffffffffffffffff"", 3, 15));
        assertEquals(
            ""ffffedcba0987654321fffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 0, ""ffffffffffffffffffffffff"", 3, 16));
        assertEquals(
            ""7fffffffffffffffffffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 1, ""ffffffffffffffffffffffff"", 0, 1));
        assertEquals(
            ""bfffffffffffffffffffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 2, ""ffffffffffffffffffffffff"", 0, 1));
        assertEquals(
            ""fffdb975121fca86420fffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 3, ""ffffffffffffffffffffffff"", 3, 16));
        // assertEquals(""ffffffffffffffffffffffff"",Conversion.longToHex(0x1234567890ABCDEFL,4,""ffffffffffffffffffffffff"",3,16));//rejected
        // by assertion
        assertEquals(
            ""fffedcba0987654321ffffff"",
            Conversion.longToHex(0x1234567890ABCDEFL, 4, ""ffffffffffffffffffffffff"", 3, 15));
        assertEquals(
            ""fedcba0987654321"", Conversion.longToHex(0x1234567890ABCDEFL, 0, """", 0, 16));
        try {
            Conversion.longToHex(0x1234567890ABCDEFL, 0, """", 1, 8);
            fail(""Thrown "" + StringIndexOutOfBoundsException.class.getName() + "" expected"");
        } catch (final StringIndexOutOfBoundsException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4390]])
92,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementByteArray(),"    @Test
    public void testRemoveElementByteArray() {
        byte[] array;
        array = ArrayUtils.removeElement((byte[]) null, (byte) 1);
        assertNull(array);
        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1);
        assertTrue(Arrays.equals(new byte[] {2}, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1);
        assertTrue(Arrays.equals(new byte[] {2, 1}, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4389]])
807,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.Anonymous-75f13cda-c425-4738-a09c-8a8ff83b8481.toString(),"            @Override
            public String toString() {
                return null;
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4387]])
244,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_double(),"     @Test
     public void testToPrimitive_double() {
         final Double[] b = null;
         assertEquals(null, ArrayUtils.toPrimitive(b));
         
         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, 
            ArrayUtils.toPrimitive(new Double[0]));
         
         assertTrue(Arrays.equals(
             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE), 
                 Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)}))
         );

         try {
             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null});
             fail();
         } catch (final NullPointerException ex) {}
     }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4387]])
869,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar(),"    @Test
    public void testReverseDelimited_StringChar() {
        assertEquals(null, StringUtils.reverseDelimited(null, '.') );
        assertEquals("""", StringUtils.reverseDelimited("""", '.') );
        assertEquals(""c.b.a"", StringUtils.reverseDelimited(""a.b.c"", '.') );
        assertEquals(""a b c"", StringUtils.reverseDelimited(""a b c"", '.') );
        assertEquals("""", StringUtils.reverseDelimited("""", '.') );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4384]])
504,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testByteToHex(),"    @Test
    public void testByteToHex() {
        assertEquals("""", Conversion.byteToHex((byte)0x00, 0, """", 0, 0));
        assertEquals("""", Conversion.byteToHex((byte)0x00, 100, """", 0, 0));
        assertEquals("""", Conversion.byteToHex((byte)0x00, 0, """", 100, 0));
        assertEquals(""00000"", Conversion.byteToHex((byte)0xEF, 0, ""00000"", 0, 0));
        assertEquals(""f0000"", Conversion.byteToHex((byte)0xEF, 0, ""00000"", 0, 1));
        assertEquals(""fe000"", Conversion.byteToHex((byte)0xEF, 0, ""00000"", 0, 2));
        assertEquals(""000f0"", Conversion.byteToHex((byte)0xEF, 0, ""00000"", 3, 1));
        assertEquals(""000fe"", Conversion.byteToHex((byte)0xEF, 0, ""00000"", 3, 2));
        assertEquals(""70000"", Conversion.byteToHex((byte)0xEF, 1, ""00000"", 0, 1));
        assertEquals(""b0000"", Conversion.byteToHex((byte)0xEF, 2, ""00000"", 0, 1));
        assertEquals(""000df"", Conversion.byteToHex((byte)0xEF, 3, ""00000"", 3, 2));
        // assertEquals(""00000"",Conversion.byteToHex((byte)0xEF, 4,""00000"",3,2));//rejected by
        // assertion
        assertEquals(""000e0"", Conversion.byteToHex((byte)0xEF, 4, ""00000"", 3, 1));
        assertEquals(""fe"", Conversion.byteToHex((byte)0xEF, 0, """", 0, 2));
        try {
            Conversion.byteToHex((byte)0xEF, 0, """", 1, 2);
            fail(""Thrown "" + StringIndexOutOfBoundsException.class.getName() + "" expected"");
        } catch (final StringIndexOutOfBoundsException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4379]])
43,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllCharArrayNegativeIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllCharArrayNegativeIndex() {
        ArrayUtils.removeAll(new char[] { 'a', 'b' }, -1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4377]])
245,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_double_double(),"     @Test
     public void testToPrimitive_double_double() {
         final Double[] l = null;
         assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE));
         
         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, 
         ArrayUtils.toPrimitive(new Double[0], 1));
         
         assertTrue(Arrays.equals(
             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE), 
                 Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)},1)));
         
         assertTrue(Arrays.equals(
             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE), 
                 null, Double.valueOf(9999999)}, Double.MAX_VALUE))
         );
     }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4372]])
708,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXml(),"    @Test
    public void testEscapeXml() throws Exception {
        assertEquals(""&lt;abc&gt;"", StringEscapeUtils.escapeXml(""<abc>""));
        assertEquals(""<abc>"", StringEscapeUtils.unescapeXml(""&lt;abc&gt;""));

        assertEquals(""XML should not escape >0x7f values"",
                ""\u00A1"", StringEscapeUtils.escapeXml(""\u00A1""));
        assertEquals(""XML should be able to unescape >0x7f values"",
                ""\u00A0"", StringEscapeUtils.unescapeXml(""&#160;""));
        assertEquals(""XML should be able to unescape >0x7f values with one leading 0"",
                ""\u00A0"", StringEscapeUtils.unescapeXml(""&#0160;""));
        assertEquals(""XML should be able to unescape >0x7f values with two leading 0s"",
                ""\u00A0"", StringEscapeUtils.unescapeXml(""&#00160;""));
        assertEquals(""XML should be able to unescape >0x7f values with three leading 0s"",
                ""\u00A0"", StringEscapeUtils.unescapeXml(""&#000160;""));

        assertEquals(""ain't"", StringEscapeUtils.unescapeXml(""ain&apos;t""));
        assertEquals(""ain&apos;t"", StringEscapeUtils.escapeXml(""ain't""));
        assertEquals("""", StringEscapeUtils.escapeXml(""""));
        assertEquals(null, StringEscapeUtils.escapeXml(null));
        assertEquals(null, StringEscapeUtils.unescapeXml(null));

        StringWriter sw = new StringWriter();
        try {
            StringEscapeUtils.ESCAPE_XML.translate(""<abc>"", sw);
        } catch (final IOException e) {
        }
        assertEquals(""XML was escaped incorrectly"", ""&lt;abc&gt;"", sw.toString() );

        sw = new StringWriter();
        try {
            StringEscapeUtils.UNESCAPE_XML.translate(""&lt;abc&gt;"", sw);
        } catch (final IOException e) {
        }
        assertEquals(""XML was unescaped incorrectly"", ""<abc>"", sw.toString() );
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4363]])
703,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtml(),"    @Test
    public void testEscapeHtml() {
        for (int i = 0; i < HTML_ESCAPES.length; ++i) {
            final String message = HTML_ESCAPES[i][0];
            final String expected = HTML_ESCAPES[i][1];
            final String original = HTML_ESCAPES[i][2];
            assertEquals(message, expected, StringEscapeUtils.escapeHtml4(original));
            final StringWriter sw = new StringWriter();
            try {
                StringEscapeUtils.ESCAPE_HTML4.translate(original, sw);
            } catch (final IOException e) {
            }
            final String actual = original == null ? null : sw.toString();
            assertEquals(message, expected, actual);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4354]])
354,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Reversed(),"    @Test
    public void testConstructorAccessors_isNotIn_Reversed() {
        final CharRange rangea = CharRange.isNotIn('e', 'a');
        assertEquals('a', rangea.getStart());
        assertEquals('e', rangea.getEnd());
        assertTrue(rangea.isNegated());
        assertEquals(""^a-e"", rangea.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4354]])
353,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isNotIn_Normal(),"    @Test
    public void testConstructorAccessors_isNotIn_Normal() {
        final CharRange rangea = CharRange.isNotIn('a', 'e');
        assertEquals('a', rangea.getStart());
        assertEquals('e', rangea.getEnd());
        assertTrue(rangea.isNegated());
        assertEquals(""^a-e"", rangea.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4350]])
117,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testClone(),"    @Test
    public void testClone() {
        assertArrayEquals(null, ArrayUtils.clone((Object[]) null));
        Object[] original1 = new Object[0];
        Object[] cloned1 = ArrayUtils.clone(original1);
        assertTrue(Arrays.equals(original1, cloned1));
        assertTrue(original1 != cloned1);
        
        final StringBuffer buf = new StringBuffer(""pick"");
        original1 = new Object[] {buf, ""a"", new String[] {""stick""}};
        cloned1 = ArrayUtils.clone(original1);
        assertTrue(Arrays.equals(original1, cloned1));
        assertTrue(original1 != cloned1);
        assertSame(original1[0], cloned1[0]);
        assertSame(original1[1], cloned1[1]);
        assertSame(original1[2], cloned1[2]);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4349]])
73,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementByteArray(),"    @Test
    public void testRemoveElementByteArray() {
        byte[] array;
        array = ArrayUtils.removeElements((byte[]) null, (byte) 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1);
        assertTrue(Arrays.equals(new byte[] { 2 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1);
        assertTrue(Arrays.equals(new byte[] { 2, 1 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeElements((byte[]) null, (byte) 1, (byte) 2);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1, (byte) 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1, (byte) 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 1);
        assertTrue(Arrays.equals(new byte[] { 2 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 2);
        assertTrue(Arrays.equals(new byte[] { 1 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1);
        assertTrue(Arrays.equals(new byte[] { 2 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1, (byte) 1, (byte) 1);
        assertTrue(Arrays.equals(new byte[] { 2 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4347]])
464,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Object(),"    @Test
    public void test_getPackageCanonicalName_Object() {
        assertEquals(""<null>"", ClassUtils.getPackageCanonicalName(null, ""<null>""));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(new ClassUtils(), ""<null>""));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(new ClassUtils[0], ""<null>""));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], ""<null>""));
        assertEquals("""", ClassUtils.getPackageCanonicalName(new int[0], ""<null>""));
        assertEquals("""", ClassUtils.getPackageCanonicalName(new int[0][0], ""<null>""));
        
        // Inner types
        class Named extends Object {}
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(new Object(){}, ""<null>""));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(new Named(), ""<null>""));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(new Inner(), ""<null>""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4346]])
343,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharEncodingTest.java,org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_1_8(),"    @Test
    public void testWorksOnJava1_1_8() {
        //
        // In this test, I simply deleted the encodings from the 1.3.1 list.
        // The Javadoc do not specify which encodings are required.
        //
        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_1)) {
            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);
            this.assertSupportedEncoding(CharEncoding.US_ASCII);
            this.assertSupportedEncoding(CharEncoding.UTF_8);
        } else {
            this.warn(""Java 1.1 tests not run since the current version is "" + SystemUtils.JAVA_SPECIFICATION_VERSION);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4335]])
29,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullObjectArray(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllNullObjectArray() {
        ArrayUtils.remove((Object[]) null, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4335]])
658,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testContainsRange(),"    @Test
    public void testContainsRange() {

        // null handling
        assertFalse(intRange.containsRange(null));

        // easy inside range
        assertTrue(intRange.containsRange(Range.between(12, 18)));

        // outside range on each side
        assertFalse(intRange.containsRange(Range.between(32, 45)));
        assertFalse(intRange.containsRange(Range.between(2, 8)));

        // equals range
        assertTrue(intRange.containsRange(Range.between(10, 20)));

        // overlaps
        assertFalse(intRange.containsRange(Range.between(9, 14)));
        assertFalse(intRange.containsRange(Range.between(16, 21)));

        // touches lower boundary
        assertTrue(intRange.containsRange(Range.between(10, 19)));
        assertFalse(intRange.containsRange(Range.between(10, 21)));

        // touches upper boundary
        assertTrue(intRange.containsRange(Range.between(11, 20)));
        assertFalse(intRange.containsRange(Range.between(9, 20)));
        
        // negative
        assertFalse(intRange.containsRange(Range.between(-11, -18)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4334]])
426,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray(),"    @Test
    public void test_isAssignable_ClassArray_ClassArray() throws Exception {
        final Class<?>[] array2 = new Class[] {Object.class, Object.class};
        final Class<?>[] array1 = new Class[] {Object.class};
        final Class<?>[] array1s = new Class[] {String.class};
        final Class<?>[] array0 = new Class[] {};
        final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };
        final Class<?>[] arrayWrappers = { Integer.class, Boolean.class };

        assertFalse(ClassUtils.isAssignable(array1, array2));
        assertFalse(ClassUtils.isAssignable(null, array2));
        assertTrue(ClassUtils.isAssignable(null, array0));
        assertTrue(ClassUtils.isAssignable(array0, array0));
//        assertTrue(ClassUtils.isAssignable(array0, null)); 
        assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); // explicit cast to avoid warning
        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null));

        assertFalse(ClassUtils.isAssignable(array1, array1s));
        assertTrue(ClassUtils.isAssignable(array1s, array1s));
        assertTrue(ClassUtils.isAssignable(array1s, array1));

        final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5);

        assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers));
        assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives));
        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1));
        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1));
        assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2));
        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4331]])
681,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamClassNotFound(),"    @Test
    public void testDeserializeStreamClassNotFound() throws Exception {
        final ByteArrayOutputStream streamReal = new ByteArrayOutputStream();
        final ObjectOutputStream oos = new ObjectOutputStream(streamReal);
        oos.writeObject(new ClassNotFoundSerialization());
        oos.flush();
        oos.close();

        final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());
        try {
            @SuppressWarnings(""unused"")
            final
            Object test = SerializationUtils.deserialize(inTest);
        } catch(final SerializationException se) {
            assertEquals(""java.lang.ClassNotFoundException: "" + CLASS_NOT_FOUND_MESSAGE, se.getMessage());
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4330]])
543,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_processBitVector(),"    @Test
    public void test_processBitVector() {
        assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L));
        assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L));
        assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L));
        assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L));
        assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4330]])
39,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArrayOutOfBoundsIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllByteArrayOutOfBoundsIndex() {
        ArrayUtils.removeAll(new byte[] { 1, 2 }, 2);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4325]])
502,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testIntToHex(),"    @Test
    public void testIntToHex() {
        assertEquals("""", Conversion.intToHex(0x00000000, 0, """", 0, 0));
        assertEquals("""", Conversion.intToHex(0x00000000, 100, """", 0, 0));
        assertEquals("""", Conversion.intToHex(0x00000000, 0, """", 100, 0));
        assertEquals(
            ""ffffffffffffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 0, ""ffffffffffffffffffffffff"", 0, 0));
        assertEquals(
            ""3fffffffffffffffffffffff"",
            Conversion.intToHex(0x90ABCDE3, 0, ""ffffffffffffffffffffffff"", 0, 1));
        assertEquals(
            ""feffffffffffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 0, ""ffffffffffffffffffffffff"", 0, 2));
        assertEquals(
            ""fedcffffffffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 0, ""ffffffffffffffffffffffff"", 0, 4));
        assertEquals(
            ""fedcba0fffffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 0, ""ffffffffffffffffffffffff"", 0, 7));
        assertEquals(
            ""fedcba09ffffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 0, ""ffffffffffffffffffffffff"", 0, 8));
        assertEquals(
            ""fff3ffffffffffffffffffff"",
            Conversion.intToHex(0x90ABCDE3, 0, ""ffffffffffffffffffffffff"", 3, 1));
        assertEquals(
            ""ffffefffffffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 0, ""ffffffffffffffffffffffff"", 3, 2));
        assertEquals(
            ""ffffedcfffffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 0, ""ffffffffffffffffffffffff"", 3, 4));
        assertEquals(
            ""ffffedcba0ffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 0, ""ffffffffffffffffffffffff"", 3, 7));
        assertEquals(
            ""ffffedcba09fffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 0, ""ffffffffffffffffffffffff"", 3, 8));
        assertEquals(
            ""7fffffffffffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 1, ""ffffffffffffffffffffffff"", 0, 1));
        assertEquals(
            ""bfffffffffffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 2, ""ffffffffffffffffffffffff"", 0, 1));
        assertEquals(
            ""fffdb97512ffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 3, ""ffffffffffffffffffffffff"", 3, 8));
        // assertEquals(""ffffffffffffffffffffffff"",Conversion.intToHex(0x90ABCDEF,
        // 4,""ffffffffffffffffffffffff"",3,8));//rejected by assertion
        assertEquals(
            ""fffedcba09ffffffffffffff"",
            Conversion.intToHex(0x90ABCDEF, 4, ""ffffffffffffffffffffffff"", 3, 7));
        assertEquals(""fedcba09"", Conversion.intToHex(0x90ABCDEF, 0, """", 0, 8));
        try {
            Conversion.intToHex(0x90ABCDEF, 0, """", 1, 8);
            fail(""Thrown "" + StringIndexOutOfBoundsException.class.getName() + "" expected"");
        } catch (final StringIndexOutOfBoundsException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4323]])
521,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullIterable(),"    @Test(expected=NullPointerException.class)
    public void test_generateBitVectors_nullIterable() {
        EnumUtils.generateBitVectors(null, (Iterable<Traffic>) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4322]])
194,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfChar(),"    @Test
    public void testLastIndexOfChar() {
        char[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));
        array = new char[] { 'a', 'b', 'c', 'd', 'a' };
        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a'));
        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b'));
        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c'));
        assertEquals(3, ArrayUtils.lastIndexOf(array, 'd'));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4319]])
84,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveCharArray(),"    @Test
    public void testRemoveCharArray() {
        char[] array;
        array = ArrayUtils.remove(new char[] {'a'}, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new char[] {'a', 'b'}, 0);
        assertTrue(Arrays.equals(new char[] {'b'}, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new char[] {'a', 'b'}, 1);
        assertTrue(Arrays.equals(new char[] {'a'}, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new char[] {'a', 'b', 'c'}, 1);
        assertTrue(Arrays.equals(new char[] {'a', 'c'}, array));
        assertEquals(Character.TYPE, array.getClass().getComponentType());
        try {
            ArrayUtils.remove(new char[] {'a', 'b'}, -1);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove(new char[] {'a', 'b'}, 2);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove((char[]) null, 0);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4316]])
344,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharEncodingTest.java,org.apache.commons.lang3.CharEncodingTest.testWorksOnJava1_2_2(),"    @Test
    public void testWorksOnJava1_2_2() {
        //
        // In this test, I simply deleted the encodings from the 1.3.1 list.
        // The Javadoc do not specify which encodings are required.
        //
        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_2)) {
            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);
            this.assertSupportedEncoding(CharEncoding.US_ASCII);
            this.assertSupportedEncoding(CharEncoding.UTF_8);
        } else {
            this.warn(""Java 1.2 tests not run since the current version is "" + SystemUtils.JAVA_SPECIFICATION_VERSION);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4316]])
402,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharUtilsTest.java,org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_char(),"    @Test
    public void testToUnicodeEscaped_char() {
        assertEquals(""\\u0041"", CharUtils.unicodeEscaped('A'));
       
        for (int i = 0; i < 196; i++) {
            final String str = CharUtils.unicodeEscaped((char) i);
            assertEquals(6, str.length());
            final int val = Integer.parseInt(str.substring(2), 16);
            assertEquals(i, val);
        }
        assertEquals(""\\u0999"", CharUtils.unicodeEscaped((char) 0x999));
        assertEquals(""\\u1001"", CharUtils.unicodeEscaped((char) 0x1001));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4307]])
120,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testCloneInt(),"    @Test
    public void testCloneInt() {
        assertEquals(null, ArrayUtils.clone((int[]) null));
        final int[] original = new int[] {5, 8};
        final int[] cloned = ArrayUtils.clone(original);
        assertTrue(Arrays.equals(original, cloned));
        assertTrue(original != cloned);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4304]])
350,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Normal(),"    @Test
    public void testConstructorAccessors_isIn_Normal() {
        final CharRange rangea = CharRange.isIn('a', 'e');
        assertEquals('a', rangea.getStart());
        assertEquals('e', rangea.getEnd());
        assertFalse(rangea.isNegated());
        assertEquals(""a-e"", rangea.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4304]])
670,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamUnserializable(),"    @Test
    public void testSerializeStreamUnserializable() throws Exception {
        final ByteArrayOutputStream streamTest = new ByteArrayOutputStream();
        try {
            iMap.put(new Object(), new Object());
            SerializationUtils.serialize(iMap, streamTest);
        } catch (final SerializationException ex) {
            return;
        }
        fail();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4304]])
723,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testLang720(),"    @Test
    public void testLang720() {
        final String input = new StringBuilder(""\ud842\udfb7"").append(""A"").toString();
        final String escaped = StringEscapeUtils.escapeXml(input);
        assertEquals(input, escaped);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4302]])
97,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementLongArray(),"    @Test
    @SuppressWarnings(""cast"")
    public void testRemoveElementLongArray() {
        long[] array;
        array = ArrayUtils.removeElement((long[]) null, (long) 1);
        assertNull(array);
        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new long[] {1}, (long) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new long[] {1, 2}, (long) 1);
        assertTrue(Arrays.equals(new long[] {2}, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new long[] {1, 2, 1}, (long) 1);
        assertTrue(Arrays.equals(new long[] {2, 1}, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4296]])
37,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArrayRemoveNone(),"    @Test
    public void testRemoveAllByteArrayRemoveNone() {
        final byte[] array1 = new byte[] { 1, 2 };
        final byte[] array2 = ArrayUtils.removeAll(array1);
        assertNotSame(array1, array2);
        assertArrayEquals(array1, array2);
        assertEquals(byte.class, array2.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4295]])
177,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfLong(),"    @Test
    public void testIndexOfLong() {
        long[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, 0));
        array = new long[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.indexOf(array, 0));
        assertEquals(1, ArrayUtils.indexOf(array, 1));
        assertEquals(2, ArrayUtils.indexOf(array, 2));
        assertEquals(3, ArrayUtils.indexOf(array, 3));
        assertEquals(-1, ArrayUtils.indexOf(array, 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4292]])
78,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementLongArray(),"    @Test
    @SuppressWarnings(""cast"")
    public void testRemoveElementLongArray() {
        long[] array;
        array = ArrayUtils.removeElements((long[]) null, (long) 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1);
        assertTrue(Arrays.equals(new long[] { 2 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1);
        assertTrue(Arrays.equals(new long[] { 2, 1 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1);
        assertTrue(Arrays.equals(new long[] { 2 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1);
        assertTrue(Arrays.equals(new long[] { 2 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2);
        assertTrue(Arrays.equals(new long[] { 1 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1);
        assertTrue(Arrays.equals(new long[] { 2 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4292]])
763,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringArray(),"    @Test
    public void testIndexOfAny_StringStringArray() {
        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));
        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));
        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));
        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));
        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));
        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));
        assertEquals(-1, StringUtils.indexOfAny("""", new String[0]));
        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {""llll""}));
        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""""}));
        assertEquals(0, StringUtils.indexOfAny("""", new String[] {""""}));
        assertEquals(-1, StringUtils.indexOfAny("""", new String[] {""a""}));
        assertEquals(-1, StringUtils.indexOfAny("""", new String[] {null}));
        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));
        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4291]])
683,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesUnserializable(),"    @Test
    public void testSerializeBytesUnserializable() throws Exception {
        try {
            iMap.put(new Object(), new Object());
            SerializationUtils.serialize(iMap);
        } catch (final SerializationException ex) {
            return;
        }
        fail();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4290]])
422,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getAllInterfaces_Class(),"    @Test
    public void test_getAllInterfaces_Class() {
        final List<?> list = ClassUtils.getAllInterfaces(CY.class);
        assertEquals(6, list.size());
        assertEquals(IB.class, list.get(0));
        assertEquals(IC.class, list.get(1));
        assertEquals(ID.class, list.get(2));
        assertEquals(IE.class, list.get(3));
        assertEquals(IF.class, list.get(4));
        assertEquals(IA.class, list.get(5));

        assertEquals(null, ClassUtils.getAllInterfaces(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4283]])
515,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_isEnum_nullClass(),"    @Test(expected=NullPointerException.class)
    public void test_isEnum_nullClass() {
        EnumUtils.isValidEnum((Class<Traffic>) null, ""PURPLE"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4281]])
494,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryToByte(),"    @Test
    public void testBinaryToByte() {
        final boolean[] src = new boolean[]{
            false, false, true, true, true, false, true, true, true, true, true, true, true,
            false, false, false, true, true, true, true, false, false, false, false, false,
            false, true, true, true, false, false, false, false, false, false, false, true,
            true, true, true, true, false, false, false, false, true, false, false, true, true,
            false, false, false, false, true, false, true, false, true, false, false, true,
            true, false, true, true, true, false, false, false, false, true};
        // conversion of ""CDF1F0C10F12345678"" by HexToBinary
        assertEquals((byte)0x00, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 0 * 4));
        assertEquals((byte)0x0C, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 1 * 4));
        assertEquals((byte)0xDC, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 2 * 4));
        assertEquals((byte)0xFD, Conversion.binaryToByte(src, 1 * 4, (byte)0, 0, 2 * 4));
        assertEquals((byte)0x34, Conversion.binaryToByte(src, 0 * 4, (byte)0x34, 0, 0 * 4));
        assertEquals((byte)0x84, Conversion.binaryToByte(src, 17 * 4, (byte)0x34, 4, 1 * 4));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4279]])
237,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToObject_int(),"    @Test
    public void testToObject_int() {
        final int[] b = null;
        assertArrayEquals(null, ArrayUtils.toObject(b));
    
        assertSame(
            ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,
            ArrayUtils.toObject(new int[0]));
    
        assertTrue(
            Arrays.equals(
                new Integer[] {
                    Integer.valueOf(Integer.MIN_VALUE),
                    Integer.valueOf(Integer.MAX_VALUE),
                    Integer.valueOf(9999999)},
            ArrayUtils.toObject(
                new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 })));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4278]])
235,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_int_int(),"     @Test
     public void testToPrimitive_int_int() {
         final Long[] l = null;
         assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));
         assertSame(ArrayUtils.EMPTY_INT_ARRAY, 
         ArrayUtils.toPrimitive(new Integer[0], 1));
         assertTrue(Arrays.equals(
             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), 
                 Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)},1)));
         assertTrue(Arrays.equals(
             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), 
                 null, Integer.valueOf(9999999)}, Integer.MAX_VALUE))
         );
     }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4275]])
351,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testConstructorAccessors_isIn_Reversed(),"    @Test
    public void testConstructorAccessors_isIn_Reversed() {
        final CharRange rangea = CharRange.isIn('e', 'a');
        assertEquals('a', rangea.getStart());
        assertEquals('e', rangea.getEnd());
        assertFalse(rangea.isNegated());
        assertEquals(""a-e"", rangea.toString());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4268]])
820,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfShorts(),"    @Test
    public void testJoin_ArrayOfShorts() {
        assertEquals(null, StringUtils.join((short[]) null, ','));
        assertEquals(""1;2"", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR));
        assertEquals(""2"", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4261]])
716,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,"org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvEscapeWriter(java.lang.String, java.lang.String)","    private void checkCsvEscapeWriter(final String expected, final String value) {
        try {
            final StringWriter writer = new StringWriter();
            StringEscapeUtils.ESCAPE_CSV.translate(value, writer);
            assertEquals(expected, writer.toString());
        } catch (final IOException e) {
            fail(""Threw: "" + e);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4260]])
818,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayOfFloats(),"    @Test
    public void testJoin_ArrayOfFloats() {
        assertEquals(null, StringUtils.join((float[]) null, ','));
        assertEquals(""1.0;2.0"", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR));
        assertEquals(""2.0"", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4256]])
853,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testChop(),"    @Test
    public void testChop() {

        final String[][] chopCases = {
            { FOO_UNCAP + ""\r\n"", FOO_UNCAP } ,
            { FOO_UNCAP + ""\n"" , FOO_UNCAP } ,
            { FOO_UNCAP + ""\r"", FOO_UNCAP },
            { FOO_UNCAP + "" \r"", FOO_UNCAP + "" "" },
            { ""foo"", ""fo""},
            { ""foo\nfoo"", ""foo\nfo"" },
            { ""\n"", """" },
            { ""\r"", """" },
            { ""\r\n"", """" },
            { null, null },
            { """", """" },
            { ""a"", """" },
        };
        for (final String[] chopCase : chopCases) {
            final String original = chopCase[0];
            final String expectedResult = chopCase[1];
            assertEquals(""chop(String) failed"",
                    expectedResult, StringUtils.chop(original));
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4250]])
246,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToObject_double(),"    @Test
    public void testToObject_double() {
        final double[] b = null;
        assertArrayEquals(null, ArrayUtils.toObject(b));
    
        assertSame(
            ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,
            ArrayUtils.toObject(new double[0]));
    
        assertTrue(
            Arrays.equals(
                new Double[] {
                    Double.valueOf(Double.MIN_VALUE),
                    Double.valueOf(Double.MAX_VALUE),
                    Double.valueOf(9999999)},
            ArrayUtils.toObject(
                new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4248]])
462,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getShortCanonicalName_Class(),"    @Test
    public void test_getShortCanonicalName_Class() {
        assertEquals(""ClassUtils"", ClassUtils.getShortCanonicalName(ClassUtils.class));
        assertEquals(""ClassUtils[]"", ClassUtils.getShortCanonicalName(ClassUtils[].class));
        assertEquals(""ClassUtils[][]"", ClassUtils.getShortCanonicalName(ClassUtils[][].class));
        assertEquals(""int[]"", ClassUtils.getShortCanonicalName(int[].class));
        assertEquals(""int[][]"", ClassUtils.getShortCanonicalName(int[][].class));
        
        // Inner types
        class Named extends Object {}
        assertEquals(""ClassUtilsTest.7"", ClassUtils.getShortCanonicalName(new Object(){}.getClass()));
        assertEquals(""ClassUtilsTest.6Named"", ClassUtils.getShortCanonicalName(Named.class));
        assertEquals(""ClassUtilsTest.Inner"", ClassUtils.getShortCanonicalName(Inner.class));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4247]])
704,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHtml4(),"    @Test
    public void testUnescapeHtml4() {
        for (int i = 0; i < HTML_ESCAPES.length; ++i) {
            final String message = HTML_ESCAPES[i][0];
            final String expected = HTML_ESCAPES[i][2];
            final String original = HTML_ESCAPES[i][1];
            assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original));
            
            final StringWriter sw = new StringWriter();
            try {
                StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw);
            } catch (final IOException e) {
            }
            final String actual = original == null ? null : sw.toString();
            assertEquals(message, expected, actual);
        }
        // \u00E7 is a cedilla (c with wiggle under)
        // note that the test string must be 7-bit-clean (Unicode escaped) or else it will compile incorrectly
        // on some locales        
        assertEquals(""funny chars pass through OK"", ""Fran\u00E7ais"", StringEscapeUtils.unescapeHtml4(""Fran\u00E7ais""));
        
        assertEquals(""Hello&;World"", StringEscapeUtils.unescapeHtml4(""Hello&;World""));
        assertEquals(""Hello&#;World"", StringEscapeUtils.unescapeHtml4(""Hello&#;World""));
        assertEquals(""Hello&# ;World"", StringEscapeUtils.unescapeHtml4(""Hello&# ;World""));
        assertEquals(""Hello&##;World"", StringEscapeUtils.unescapeHtml4(""Hello&##;World""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4247]])
259,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testSetShortValue(),"    @Test
    public void testSetShortValue() {
        for (int j = 0; j < 128; j++) {
            assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);
            assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));
        }
        for (int j = 0; j < 128; j++) {
            assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0);
            assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) 0);
        }

        // verify that excess bits are stripped off
        assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);
        for (int j = 0; j < 2; j++) {
            assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);
            assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));
        }

        // verify that excess bits are stripped off
        assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4239]])
536,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector(),"    @Test
    public void test_generateBitVector() {
        assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class)));
        assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED)));
        assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER)));
        assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN)));
        assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)));
        assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)));
        assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)));
        assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4238]])
21,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayObject(),"    @Test
    public void testAddObjectArrayObject() {
        Object[] newArray;

        //show that not casting is okay
        newArray = ArrayUtils.add((Object[])null, ""a"");
        assertTrue(Arrays.equals(new String[]{""a""}, newArray));
        assertTrue(Arrays.equals(new Object[]{""a""}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());

        //show that not casting to Object[] is okay and will assume String based on ""a""
        final String[] newStringArray = ArrayUtils.add(null, ""a"");
        assertTrue(Arrays.equals(new String[]{""a""}, newStringArray));
        assertTrue(Arrays.equals(new Object[]{""a""}, newStringArray));
        assertEquals(String.class, newStringArray.getClass().getComponentType());

        final String[] stringArray1 = new String[]{""a"", ""b"", ""c""};
        newArray = ArrayUtils.add(stringArray1, null);
        assertTrue(Arrays.equals(new String[]{""a"", ""b"", ""c"", null}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());

        newArray = ArrayUtils.add(stringArray1, ""d"");
        assertTrue(Arrays.equals(new String[]{""a"", ""b"", ""c"", ""d""}, newArray));
        assertEquals(String.class, newArray.getClass().getComponentType());

        Number[] numberArray1 = new Number[]{Integer.valueOf(1), Double.valueOf(2)};
        newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));
        assertTrue(Arrays.equals(new Number[]{Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3)}, newArray));
        assertEquals(Number.class, newArray.getClass().getComponentType());

        numberArray1 = null;
        newArray = ArrayUtils.add(numberArray1, Float.valueOf(3));
        assertTrue(Arrays.equals(new Float[]{Float.valueOf(3)}, newArray));
        assertEquals(Float.class, newArray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4236]])
7,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/AnnotationUtilsTest.java,org.apache.commons.lang3.AnnotationUtilsTest.testIsValidAnnotationMemberType(),"    @Test
    public void testIsValidAnnotationMemberType() {
        for (final Class<?> type : new Class[] { byte.class, short.class, int.class, char.class,
                long.class, float.class, double.class, boolean.class, String.class, Class.class,
                NestAnnotation.class, TestAnnotation.class, Stooge.class, ElementType.class }) {
            assertTrue(AnnotationUtils.isValidAnnotationMemberType(type));
            assertTrue(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0)
                    .getClass()));
        }
        for (final Class<?> type : new Class[] { Object.class, Map.class, Collection.class }) {
            assertFalse(AnnotationUtils.isValidAnnotationMemberType(type));
            assertFalse(AnnotationUtils.isValidAnnotationMemberType(Array.newInstance(type, 0)
                    .getClass()));
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4232]])
258,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/BitFieldTest.java,org.apache.commons.lang3.BitFieldTest.testSetValue(),"    @Test
    public void testSetValue() {
        for (int j = 0; j < 128; j++) {
            assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);
            assertEquals(bf_multi.setValue(0, j), j << 7);
        }
        for (int j = 0; j < 128; j++) {
          assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0);
          assertEquals(bf_zero.setValue(0, j), 0);
      }

        // verify that excess bits are stripped off
        assertEquals(bf_multi.setValue(0x3f80, 128), 0);
        for (int j = 0; j < 2; j++) {
            assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);
            assertEquals(bf_single.setValue(0, j), j << 14);
        }

        // verify that excess bits are stripped off
        assertEquals(bf_single.setValue(0x4000, 2), 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4229]])
69,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayOutOfBoundsIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllShortArrayOutOfBoundsIndex() {
        ArrayUtils.removeAll(new short[] { 1, 2 }, 2, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4227]])
622,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.NonComparableCharSequence.length(),"        @Override
        public int length() {
            return value.length();
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4220]])
153,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameLength(),"    @Test
    public void testSameLength() {
        final Object[] nullArray = null;
        final Object[] emptyArray = new Object[0];
        final Object[] oneArray = new Object[] {""pick""};
        final Object[] twoArray = new Object[] {""pick"", ""stick""};
        
        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
        
        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4220]])
427,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray_Autoboxing(),"    @Test
    public void test_isAssignable_ClassArray_ClassArray_Autoboxing() throws Exception {
        final Class<?>[] array2 = new Class[] {Object.class, Object.class};
        final Class<?>[] array1 = new Class[] {Object.class};
        final Class<?>[] array1s = new Class[] {String.class};
        final Class<?>[] array0 = new Class[] {};
        final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };
        final Class<?>[] arrayWrappers = { Integer.class, Boolean.class };

        assertFalse(ClassUtils.isAssignable(array1, array2, true));
        assertFalse(ClassUtils.isAssignable(null, array2, true));
        assertTrue(ClassUtils.isAssignable(null, array0, true));
        assertTrue(ClassUtils.isAssignable(array0, array0, true));
        assertTrue(ClassUtils.isAssignable(array0, null, true));
        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, true));

        assertFalse(ClassUtils.isAssignable(array1, array1s, true));
        assertTrue(ClassUtils.isAssignable(array1s, array1s, true));
        assertTrue(ClassUtils.isAssignable(array1s, array1, true));

        assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, true));
        assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, true));
        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, true));
        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, true));
        assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2, true));
        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4218]])
439,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.testWrapperToPrimitive(),"    @Test
    public void testWrapperToPrimitive() {
        // an array with classes to convert
        final Class<?>[] primitives = {
                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,
                Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE
        };
        for (final Class<?> primitive : primitives) {
            final Class<?> wrapperCls = ClassUtils.primitiveToWrapper(primitive);
            assertFalse(""Still primitive"", wrapperCls.isPrimitive());
            assertEquals(wrapperCls + "" -> "" + primitive, primitive,
                    ClassUtils.wrapperToPrimitive(wrapperCls));
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4212]])
421,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getAllSuperclasses_Class(),"    @Test
    public void test_getAllSuperclasses_Class() {
        final List<?> list = ClassUtils.getAllSuperclasses(CY.class);
        assertEquals(2, list.size());
        assertEquals(CX.class, list.get(0));
        assertEquals(Object.class, list.get(1));

        assertEquals(null, ClassUtils.getAllSuperclasses(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4210]])
482,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testShortArrayToLong(),"    @Test
    public void testShortArrayToLong() {
        final short[] src = new short[]{
            (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800};
        assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0));
        assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1));
        assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2));
        assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4));
        assertEquals(
            0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));
        assertEquals(
            0x123456CDF1BCDEF0L,
            Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));
        assertEquals(
            0x123478003456DEF0L,
            Conversion.shortArrayToLong(src, 3, 0x123456789ABCDEF0L, 16, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4206]])
83,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveByteArray(),"    @Test
    public void testRemoveByteArray() {
        byte[] array;
        array = ArrayUtils.remove(new byte[] {1}, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new byte[] {1, 2}, 0);
        assertTrue(Arrays.equals(new byte[] {2}, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new byte[] {1, 2}, 1);
        assertTrue(Arrays.equals(new byte[] {1}, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new byte[] {1, 2, 1}, 1);
        assertTrue(Arrays.equals(new byte[] {1, 1}, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        try {
            ArrayUtils.remove(new byte[] {1, 2}, -1);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove(new byte[] {1, 2}, 2);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove((byte[]) null, 0);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4204]])
25,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArray(),"    @Test
    public void testRemoveAllObjectArray() {
        Object[] array;
        array = ArrayUtils.removeAll(new Object[] { ""a"" }, 0);
        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"" }, 0, 1);
        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"", ""c"" }, 1, 2);
        assertArrayEquals(new Object[] { ""a"" }, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"", ""c"", ""d"" }, 1, 2);
        assertArrayEquals(new Object[] { ""a"", ""d"" }, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"", ""c"", ""d"" }, 0, 3);
        assertArrayEquals(new Object[] { ""b"", ""c"" }, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"", ""c"", ""d"" }, 0, 1, 3);
        assertArrayEquals(new Object[] { ""c"" }, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"", ""c"", ""d"", ""e"" }, 0, 1, 3);
        assertArrayEquals(new Object[] { ""c"", ""e"" }, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"", ""c"", ""d"", ""e"" }, 0, 2, 4);
        assertArrayEquals(new Object[] { ""b"", ""d"" }, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"", ""c"", ""d"" }, 0, 1, 3, 0, 1, 3);
        assertArrayEquals(new Object[] { ""c"" }, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"", ""c"", ""d"" }, 2, 1, 0, 3);
        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new Object[] { ""a"", ""b"", ""c"", ""d"" }, 2, 0, 1, 3, 0, 2, 1, 3);
        assertArrayEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, array);
        assertEquals(Object.class, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4199]])
718,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeCsvWriter(),"    @Test
    public void testUnescapeCsvWriter() throws Exception {
        checkCsvUnescapeWriter(""foo.bar"",        ""foo.bar"");
        checkCsvUnescapeWriter(""foo,bar"",    ""\""foo,bar\"""");
        checkCsvUnescapeWriter(""foo\nbar"",   ""\""foo\nbar\"""");
        checkCsvUnescapeWriter(""foo\rbar"",   ""\""foo\rbar\"""");
        checkCsvUnescapeWriter(""foo\""bar"", ""\""foo\""\""bar\"""");
        checkCsvUnescapeWriter("""", null);
        checkCsvUnescapeWriter("""", """");

        checkCsvUnescapeWriter(""\""foo.bar\"""",        ""\""foo.bar\"""");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4193]])
474,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_4bits_2args(),"    @Test
    public void testBinaryToHexDigitMsb0_4bits_2args() {
        // boolean[] shortArray = new boolean[]{true,true,false};
        // assertEquals('6', Conversion.BinaryToHexDigitMsb0(shortArray,0));
        // assertEquals('3', Conversion.BinaryToHexDigitMsb0(shortArray,1));
        // assertEquals('1', Conversion.BinaryToHexDigitMsb0(shortArray,2));
        final boolean[] shortArray = new boolean[]{true, true, false, true};
        assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(shortArray, 0));
        final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true};
        assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(longArray, 0));
        assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(longArray, 1));
        assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(longArray, 2));
        assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(longArray, 3));
        // assertEquals('6', Conversion.BinaryToHexDigitMsb0(longArray,4));
        // assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray,5));
        // assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray,6));
        final boolean[] maxLengthArray = new boolean[]{
            true, false, true, false, false, true, true, true};
        assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 0));
        assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 1));
        assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 2));
        assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 3));
        assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(maxLengthArray, 4));
        // assertEquals('7', Conversion.BinaryToHexDigitMsb0(longArray,5));
        // assertEquals('3', Conversion.BinaryToHexDigitMsb0(longArray,6));
        // assertEquals('1', Conversion.BinaryToHexDigitMsb0(longArray,7));
        final boolean[] javaDocCheck = new boolean[]{
            true, false, false, true, true, false, true, false};
        assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(javaDocCheck, 3));

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4190]])
62,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayRemoveNone(),"    @Test
    public void testRemoveAllLongArrayRemoveNone() {
        final long[] array1 = new long[] { 1, 2 };
        final long[] array2 = ArrayUtils.removeAll(array1);
        assertNotSame(array1, array2);
        assertArrayEquals(array1, array2);
        assertEquals(long.class, array2.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4186]])
36,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArray(),"    @Test
    public void testRemoveAllByteArray() {
        byte[] array;
        array = ArrayUtils.removeAll(new byte[] { 1 }, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2 }, 0);
        assertTrue(Arrays.equals(new byte[] { 2 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2 }, 1);
        assertTrue(Arrays.equals(new byte[] { 1 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2, 1 }, 1);
        assertTrue(Arrays.equals(new byte[] { 1, 1 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeAll(new byte[] { 1, 2 }, 0, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2, 3 }, 0, 1);
        assertTrue(Arrays.equals(new byte[] { 3 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2, 3 }, 1, 2);
        assertTrue(Arrays.equals(new byte[] { 1 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2, 3 }, 0, 2);
        assertTrue(Arrays.equals(new byte[] { 2 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5 }, 1, 3);
        assertTrue(Arrays.equals(new byte[] { 1, 3, 5 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5 }, 0, 2, 4);
        assertTrue(Arrays.equals(new byte[] { 2, 4 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);
        assertTrue(Arrays.equals(new byte[] { 1, 3, 5, 7 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new byte[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);
        assertTrue(Arrays.equals(new byte[] { 2, 4, 6 }, array));
        assertEquals(Byte.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4166]])
59,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArrayOutOfBoundsIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllIntArrayOutOfBoundsIndex() {
        ArrayUtils.removeAll(new int[] { 1, 2 }, 2);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4161]])
142,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyDoubleObject(),"    @Test
    public void testNullToEmptyDoubleObject() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null));
        // Test valid array handling
        final Double[] original = new Double[] {1D, 2D};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final Double[] empty = new Double[]{};
        final Double[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4156]])
692,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testPrimitiveTypeClassSerialization(),"    @Test
    public void testPrimitiveTypeClassSerialization() {
        final Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class,
                boolean.class, char.class, void.class };

        for (final Class<?> primitiveType : primitiveTypes) {
            final Class<?> clone = SerializationUtils.clone(primitiveType);
            assertEquals(primitiveType, clone);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4146]])
179,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLong(),"    @Test
    public void testLastIndexOfLong() {
        long[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));
        array = new long[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));
        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));
        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));
        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4137]])
691,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.testCloneUnserializable(),"    @Test
    public void testCloneUnserializable() throws Exception {
        try {
            iMap.put(new Object(), new Object());
            SerializationUtils.clone(iMap);
        } catch (final SerializationException ex) {
            return;
        }
        fail();
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4127]])
513,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_getEnumList(),"    @Test
    public void test_getEnumList() {
        final List<Traffic> test = EnumUtils.getEnumList(Traffic.class);
        assertEquals(3, test.size());
        assertEquals(Traffic.RED, test.get(0));
        assertEquals(Traffic.AMBER, test.get(1));
        assertEquals(Traffic.GREEN, test.get(2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4125]])
145,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSubarrayLong(),"    @Test
    public void testSubarrayLong() {
        final long[] nullArray = null;
        final long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 };
        final long[] leftSubarray     = { 999910, 999911, 999912, 999913 };
        final long[] midSubarray      = { 999911, 999912, 999913, 999914 };
        final long[] rightSubarray    = { 999912, 999913, 999914, 999915 };

        assertTrue(""0 start, mid end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, 0, 4)));

        assertTrue(""0 start, length end"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, 0, array.length)));

        assertTrue(""mid start, mid end"",
            ArrayUtils.isEquals(midSubarray,
                ArrayUtils.subarray(array, 1, 5)));

        assertTrue(""mid start, length end"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, array.length)));


        assertNull(""null input"", ArrayUtils.subarray(nullArray, 0, 3));

        assertEquals(""empty array"", ArrayUtils.EMPTY_LONG_ARRAY,
            ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));

        assertEquals(""start > end"", ArrayUtils.EMPTY_LONG_ARRAY,
            ArrayUtils.subarray(array, 4, 2));

        assertEquals(""start == end"", ArrayUtils.EMPTY_LONG_ARRAY,
            ArrayUtils.subarray(array, 3, 3));

        assertTrue(""start undershoot, normal end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, -2, 4)));

        assertEquals(""start overshoot, any end"",
            ArrayUtils.EMPTY_LONG_ARRAY,
                ArrayUtils.subarray(array, 33, 4));

        assertTrue(""normal start, end overshoot"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, 33)));

        assertTrue(""start undershoot, end overshoot"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, -2, 12)));

        // empty-return tests

        assertSame(""empty array, object test"",
            ArrayUtils.EMPTY_LONG_ARRAY,
                ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));

        assertSame(""start > end, object test"",
            ArrayUtils.EMPTY_LONG_ARRAY,
                ArrayUtils.subarray(array, 4, 1));

        assertSame(""start == end, object test"",
            ArrayUtils.EMPTY_LONG_ARRAY,
                ArrayUtils.subarray(array, 3, 3));

        assertSame(""start overshoot, any end, object test"",
            ArrayUtils.EMPTY_LONG_ARRAY,
                ArrayUtils.subarray(array, 8733, 4));

        // array type tests

        assertSame(""long type"", long.class,
            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4122]])
192,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfChar(),"    @Test
    public void testIndexOfChar() {
        char[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, 'a'));
        array = new char[] { 'a', 'b', 'c', 'd', 'a' };
        assertEquals(0, ArrayUtils.indexOf(array, 'a'));
        assertEquals(1, ArrayUtils.indexOf(array, 'b'));
        assertEquals(2, ArrayUtils.indexOf(array, 'c'));
        assertEquals(3, ArrayUtils.indexOf(array, 'd'));
        assertEquals(-1, ArrayUtils.indexOf(array, 'e'));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4116]])
537,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors(),"    @Test
    public void test_generateBitVectors() {
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4115]])
538,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectorFromArray(),"    @Test
    public void test_generateBitVectorFromArray() {
        assertEquals(0L, EnumUtils.generateBitVector(Traffic.class));
        assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED));
        assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER));
        assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, Traffic.GREEN));
        assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER));
        assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.GREEN));
        assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER, Traffic.GREEN));
        assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN));
        //gracefully handles duplicates:
        assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4112]])
216,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContainsFloat(),"    @SuppressWarnings(""cast"")
    @Test
    public void testContainsFloat() {
        float[] array = null;
        assertFalse(ArrayUtils.contains(array, (float) 1));
        array = new float[] { 0, 1, 2, 3, 0 };
        assertTrue(ArrayUtils.contains(array, (float) 0));
        assertTrue(ArrayUtils.contains(array, (float) 1));
        assertTrue(ArrayUtils.contains(array, (float) 2));
        assertTrue(ArrayUtils.contains(array, (float) 3));
        assertFalse(ArrayUtils.contains(array, (float) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4106]])
38,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllByteArrayNegativeIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllByteArrayNegativeIndex() {
        ArrayUtils.removeAll(new byte[] { 1, 2 }, -1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4104]])
544,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_processBitVectors(),"    @Test
    public void test_processBitVectors() {
        assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L));
        assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 1L));
        assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 2L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 3L));
        assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 4L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 5L));
        assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 6L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 7L));

        assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 0L, 0L));
        assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 0L, 1L));
        assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 2L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 0L, 3L));
        assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 4L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 5L));
        assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 6L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 0L, 7L));

        // demonstrate tolerance of irrelevant high-order digits:
        assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVectors(Traffic.class, 666L, 0L));
        assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVectors(Traffic.class, 666L, 1L));
        assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 2L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVectors(Traffic.class, 666L, 3L));
        assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 4L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 5L));
        assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 6L));
        assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVectors(Traffic.class, 666L, 7L));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4104]])
75,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementDoubleArray(),"    @Test
    @SuppressWarnings(""cast"")
    public void testRemoveElementDoubleArray() {
        double[] array;
        array = ArrayUtils.removeElements((double[]) null, (double) 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1);
        assertTrue(Arrays.equals(new double[] { 2 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1);
        assertTrue(Arrays.equals(new double[] { 2, 1 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1);
        assertTrue(Arrays.equals(new double[] { 2 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2);
        assertTrue(Arrays.equals(new double[] { 1 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1);
        assertTrue(Arrays.equals(new double[] { 2 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1);
        assertTrue(Arrays.equals(new double[] { 2 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4103]])
27,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllObjectArrayNegativeIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllObjectArrayNegativeIndex() {
        ArrayUtils.removeAll(new Object[] { ""a"", ""b"" }, -1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4101]])
241,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_float(),"     @Test
     public void testToPrimitive_float() {
         final Float[] b = null;
         assertEquals(null, ArrayUtils.toPrimitive(b));
         
         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, 
            ArrayUtils.toPrimitive(new Float[0]));
         
         assertTrue(Arrays.equals(
             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), 
                 Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)}))
         );

         try {
             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null});
             fail();
         } catch (final NullPointerException ex) {}
     }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4100]])
94,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementDoubleArray(),"    @Test
    @SuppressWarnings(""cast"")
    public void testRemoveElementDoubleArray() {
        double[] array;
        array = ArrayUtils.removeElement((double[]) null, (double) 1);
        assertNull(array);
        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new double[] {1}, (double) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new double[] {1, 2}, (double) 1);
        assertTrue(Arrays.equals(new double[] {2}, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new double[] {1, 2, 1}, (double) 1);
        assertTrue(Arrays.equals(new double[] {2, 1}, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4095]])
49,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArrayOutOfBoundsIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllDoubleArrayOutOfBoundsIndex() {
        ArrayUtils.removeAll(new double[] { 1, 2 }, 2);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4092]])
96,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementIntArray(),"    @Test
    public void testRemoveElementIntArray() {
        int[] array;
        array = ArrayUtils.removeElement((int[]) null, 1);
        assertNull(array);
        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new int[] {1}, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new int[] {1, 2}, 1);
        assertTrue(Arrays.equals(new int[] {2}, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new int[] {1, 2, 1}, 1);
        assertTrue(Arrays.equals(new int[] {2, 1}, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4089]])
615,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testCloneOfPrimitiveArray(),"    @Test
    public void testCloneOfPrimitiveArray() {
        assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1})));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4087]])
487,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testHexToLong(),"    @Test
    public void testHexToLong() {
        final String src = ""CDF1F0C10F12345678"";
        assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0));
        assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1));
        assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8));
        assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8));
        assertEquals(
            0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0));
        assertEquals(
            0x1234567876BCDEF0L, Conversion.hexToLong(src, 15, 0x123456798ABCDEF0L, 24, 3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4086]])
211,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testContainsDoubleTolerance(),"    @SuppressWarnings(""cast"")
    @Test
    public void testContainsDoubleTolerance() {
        double[] array = null;
        assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertFalse(ArrayUtils.contains(array, (double) 4.0, (double) 0.33));
        assertFalse(ArrayUtils.contains(array, (double) 2.5, (double) 0.49));
        assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.50));
        assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.51));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4082]])
171,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testReverseBoolean(),"    @Test
    public void testReverseBoolean() {
        boolean[] array = new boolean[] {false, false, true};
        ArrayUtils.reverse(array);
        assertTrue(array[0]);
        assertFalse(array[1]);
        assertFalse(array[2]);

        array = null;
        ArrayUtils.reverse(array);
        assertEquals(null, array);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4081]])
696,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeJavaWithSlash(),"    @Test
    public void testEscapeJavaWithSlash() {
        final String input = ""String with a slash (/) in it"";

        final String expected = input;
        final String actual = StringEscapeUtils.escapeJava(input);

        /**
         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape
         * in a Java string.
         */
        assertEquals(expected, actual);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4080]])
77,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementIntArray(),"    @Test
    public void testRemoveElementIntArray() {
        int[] array;
        array = ArrayUtils.removeElements((int[]) null, 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new int[] { 1 }, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1);
        assertTrue(Arrays.equals(new int[] { 2 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1);
        assertTrue(Arrays.equals(new int[] { 2, 1 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeElements((int[]) null, 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1);
        assertTrue(Arrays.equals(new int[] { 2 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2);
        assertTrue(Arrays.equals(new int[] { 1 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1);
        assertTrue(Arrays.equals(new int[] { 2 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1);
        assertTrue(Arrays.equals(new int[] { 2 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4077]])
14,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayByte(),"    @Test
    public void testAddObjectArrayByte() {
        byte[] newArray;
        newArray = ArrayUtils.add((byte[])null, (byte)0);
        assertTrue(Arrays.equals(new byte[]{0}, newArray));
        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add((byte[])null, (byte)1);
        assertTrue(Arrays.equals(new byte[]{1}, newArray));
        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
        final byte[] array1 = new byte[]{1, 2, 3};
        newArray = ArrayUtils.add(array1, (byte)0);
        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 0}, newArray));
        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(array1, (byte)4);
        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));
        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4076]])
520,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullIterable(),"    @Test(expected=NullPointerException.class)
    public void test_generateBitVector_nullIterable() {
        EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4076]])
715,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeCsvWriter(),"    @Test
    public void testEscapeCsvWriter() throws Exception {
        checkCsvEscapeWriter(""foo.bar"",        ""foo.bar"");
        checkCsvEscapeWriter(""\""foo,bar\"""",    ""foo,bar"");
        checkCsvEscapeWriter(""\""foo\nbar\"""",   ""foo\nbar"");
        checkCsvEscapeWriter(""\""foo\rbar\"""",   ""foo\rbar"");
        checkCsvEscapeWriter(""\""foo\""\""bar\"""", ""foo\""bar"");
        checkCsvEscapeWriter("""", null);
        checkCsvEscapeWriter("""", """");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4068]])
180,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfLongWithStartIndex(),"    @Test
    public void testLastIndexOfLongWithStartIndex() {
        long[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));
        array = new long[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));
        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));
        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));
        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4066]])
481,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testIntArrayToLong(),"    @Test
    public void testIntArrayToLong() {
        final int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000};
        assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0));
        assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0));
        assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1));
        assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2));
        assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1));
        assertEquals(
            0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));
        assertEquals(
            0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1));
        // assertEquals(0x0F12345678000000L,Conversion.intsToLong(src,1,0x123456789ABCDEF0L,32,2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4065]])
148,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSubarrChar(),"    @Test
    public void testSubarrChar() {
        final char[] nullArray = null;
        final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' };
        final char[] leftSubarray     = { 'a', 'b', 'c', 'd', };
        final char[] midSubarray      = { 'b', 'c', 'd', 'e', };
        final char[] rightSubarray    = { 'c', 'd', 'e', 'f', };


        assertTrue(""0 start, mid end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, 0, 4)));

        assertTrue(""0 start, length end"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, 0, array.length)));

        assertTrue(""mid start, mid end"",
            ArrayUtils.isEquals(midSubarray,
                ArrayUtils.subarray(array, 1, 5)));

        assertTrue(""mid start, length end"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, array.length)));


        assertNull(""null input"", ArrayUtils.subarray(nullArray, 0, 3));

        assertEquals(""empty array"", ArrayUtils.EMPTY_CHAR_ARRAY,
            ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));

        assertEquals(""start > end"", ArrayUtils.EMPTY_CHAR_ARRAY,
            ArrayUtils.subarray(array, 4, 2));

        assertEquals(""start == end"", ArrayUtils.EMPTY_CHAR_ARRAY,
            ArrayUtils.subarray(array, 3, 3));

        assertTrue(""start undershoot, normal end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, -2, 4)));

        assertEquals(""start overshoot, any end"",
            ArrayUtils.EMPTY_CHAR_ARRAY,
                ArrayUtils.subarray(array, 33, 4));

        assertTrue(""normal start, end overshoot"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, 33)));

        assertTrue(""start undershoot, end overshoot"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, -2, 12)));

        // empty-return tests

        assertSame(""empty array, object test"",
            ArrayUtils.EMPTY_CHAR_ARRAY,
                ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));

        assertSame(""start > end, object test"",
            ArrayUtils.EMPTY_CHAR_ARRAY,
                ArrayUtils.subarray(array, 4, 1));

        assertSame(""start == end, object test"",
            ArrayUtils.EMPTY_CHAR_ARRAY,
                ArrayUtils.subarray(array, 3, 3));

        assertSame(""start overshoot, any end, object test"",
            ArrayUtils.EMPTY_CHAR_ARRAY,
                ArrayUtils.subarray(array, 8733, 4));

        // array type tests

        assertSame(""char type"", char.class,
            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4054]])
466,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_String(),"    @Test
    public void test_getPackageCanonicalName_String() {
        assertEquals(""org.apache.commons.lang3"",
            ClassUtils.getPackageCanonicalName(""org.apache.commons.lang3.ClassUtils""));
        assertEquals(""org.apache.commons.lang3"",
            ClassUtils.getPackageCanonicalName(""[Lorg.apache.commons.lang3.ClassUtils;""));
        assertEquals(""org.apache.commons.lang3"",
            ClassUtils.getPackageCanonicalName(""[[Lorg.apache.commons.lang3.ClassUtils;""));
        assertEquals(""org.apache.commons.lang3"",
            ClassUtils.getPackageCanonicalName(""org.apache.commons.lang3.ClassUtils[]""));
        assertEquals(""org.apache.commons.lang3"",
            ClassUtils.getPackageCanonicalName(""org.apache.commons.lang3.ClassUtils[][]""));
        assertEquals("""", ClassUtils.getPackageCanonicalName(""[I""));
        assertEquals("""", ClassUtils.getPackageCanonicalName(""[[I""));
        assertEquals("""", ClassUtils.getPackageCanonicalName(""int[]""));
        assertEquals("""", ClassUtils.getPackageCanonicalName(""int[][]""));
        
        // Inner types
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(""org.apache.commons.lang3.ClassUtilsTest$6""));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(""org.apache.commons.lang3.ClassUtilsTest$5Named""));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(""org.apache.commons.lang3.ClassUtilsTest$Inner""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4052]])
61,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArray(),"    @Test
    public void testRemoveAllLongArray() {
        long[] array;
        array = ArrayUtils.removeAll(new long[] { 1 }, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0);
        assertTrue(Arrays.equals(new long[] { 2 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2 }, 1);
        assertTrue(Arrays.equals(new long[] { 1 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2, 1 }, 1);
        assertTrue(Arrays.equals(new long[] { 1, 1 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeAll(new long[] { 1, 2 }, 0, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 1);
        assertTrue(Arrays.equals(new long[] { 3 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 1, 2);
        assertTrue(Arrays.equals(new long[] { 1 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2, 3 }, 0, 2);
        assertTrue(Arrays.equals(new long[] { 2 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 1, 3);
        assertTrue(Arrays.equals(new long[] { 1, 3, 5 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5 }, 0, 2, 4);
        assertTrue(Arrays.equals(new long[] { 2, 4 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);
        assertTrue(Arrays.equals(new long[] { 1, 3, 5, 7 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new long[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);
        assertTrue(Arrays.equals(new long[] { 2, 4, 6 }, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4049]])
160,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameLengthDouble(),"    @Test
    public void testSameLengthDouble() {
        final double[] nullArray = null;
        final double[] emptyArray = new double[0];
        final double[] oneArray = new double[] {1.3d};
        final double[] twoArray = new double[] {4.5d, 6.3d};
        
        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
        
        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4048]])
735,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_LocaleIndependence(),"    @Test
    public void testContainsIgnoreCase_LocaleIndependence() {
        final Locale orig = Locale.getDefault();

        final Locale[] locales = { Locale.ENGLISH, new Locale(""tr""), Locale.getDefault() };

        final String[][] tdata = {
            { ""i"", ""I"" },
            { ""I"", ""i"" },
            { ""\u03C2"", ""\u03C3"" },
            { ""\u03A3"", ""\u03C2"" },
            { ""\u03A3"", ""\u03C3"" },
        };

        final String[][] fdata = {
            { ""\u00DF"", ""SS"" },
        };

        try {
            for (final Locale locale : locales) {
                Locale.setDefault(locale);
                for (int j = 0; j < tdata.length; j++) {
                    assertTrue(Locale.getDefault() + "": "" + j + "" "" + tdata[j][0] + "" "" + tdata[j][1], StringUtils
                            .containsIgnoreCase(tdata[j][0], tdata[j][1]));
                }
                for (int j = 0; j < fdata.length; j++) {
                    assertFalse(Locale.getDefault() + "": "" + j + "" "" + fdata[j][0] + "" "" + fdata[j][1], StringUtils
                            .containsIgnoreCase(fdata[j][0], fdata[j][1]));
                }
            }
        } finally {
            Locale.setDefault(orig);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4044]])
490,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testHexToByte(),"    @Test
    public void testHexToByte() {
        final String src = ""CDF1F0C10F12345678"";
        assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0));
        assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1));
        assertEquals((byte)0xDC, Conversion.hexToByte(src, 0, (byte)0, 0, 2));
        assertEquals((byte)0xFD, Conversion.hexToByte(src, 1, (byte)0, 0, 2));
        assertEquals((byte)0x34, Conversion.hexToByte(src, 0, (byte)0x34, 0, 0));
        assertEquals((byte)0x84, Conversion.hexToByte(src, 17, (byte)0x34, 4, 1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4044]])
47,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArrayRemoveNone(),"    @Test
    public void testRemoveAllDoubleArrayRemoveNone() {
        final double[] array1 = new double[] { 1, 2 };
        final double[] array2 = ArrayUtils.removeAll(array1);
        assertNotSame(array1, array2);
        assertTrue(Arrays.equals(array1, array2));
        assertEquals(double.class, array2.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4042]])
80,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveObjectArray(),"    @Test
    public void testRemoveObjectArray() {
        Object[] array;
        array = ArrayUtils.remove(new Object[] {""a""}, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.remove(new Object[] {""a"", ""b""}, 0);
        assertTrue(Arrays.equals(new Object[] {""b""}, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.remove(new Object[] {""a"", ""b""}, 1);
        assertTrue(Arrays.equals(new Object[] {""a""}, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        array = ArrayUtils.remove(new Object[] {""a"", ""b"", ""c""}, 1);
        assertTrue(Arrays.equals(new Object[] {""a"", ""c""}, array));
        assertEquals(Object.class, array.getClass().getComponentType());
        try {
            ArrayUtils.remove(new Object[] {""a"", ""b""}, -1);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove(new Object[] {""a"", ""b""}, 2);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove((Object[]) null, 0);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4035]])
106,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testArrayCreationWithDifferentTypes(),"    @Test
    public void testArrayCreationWithDifferentTypes()
    {
        final Number[] array = ArrayUtils.<Number>toArray(Integer.valueOf(42), Double.valueOf(Math.PI));
        assertEquals(2, array.length);
        assertEquals(Integer.valueOf(42), array[0]);
        assertEquals(Double.valueOf(Math.PI), array[1]);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4035]])
101,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testHashCode(),"    @Test
    public void testHashCode() {
        final long[][] array1 = new long[][] {{2,5}, {4,5}};
        final long[][] array2 = new long[][] {{2,5}, {4,6}};
        assertTrue(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array1));
        assertFalse(ArrayUtils.hashCode(array1) == ArrayUtils.hashCode(array2));
        
        final Object[] array3 = new Object[] {new String(new char[] {'A', 'B'})};
        final Object[] array4 = new Object[] {""AB""};
        assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array3));
        assertTrue(ArrayUtils.hashCode(array3) == ArrayUtils.hashCode(array4));
        
        final Object[] arrayA = new Object[] {new boolean[] {true, false}, new int[] {6, 7}};
        final Object[] arrayB = new Object[] {new boolean[] {true, false}, new int[] {6, 7}};
        assertTrue(ArrayUtils.hashCode(arrayB) == ArrayUtils.hashCode(arrayA));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4026]])
499,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testIntToByteArray(),"    @Test
    public void testIntToByteArray() {
        assertArrayEquals(
            new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 0, 0));
        assertArrayEquals(
            new byte[]{}, Conversion.intToByteArray(0x00000000, 100, new byte[]{}, 0, 0));
        assertArrayEquals(
            new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 100, 0));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,
                (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));
        assertArrayEquals(
            new byte[]{
                (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 1, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 2, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85,
                (byte)0xFC, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 5, new byte[]{
                -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));
        // assertArrayEquals(new
        // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xFC,(byte)0x00,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.intToByteArray(0x90ABCDEF,13,new
        // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,4));//rejected by assertion
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xFC,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.intToByteArray(0x90ABCDEF, 13, new byte[]{
                -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4022]])
465,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_getPackageCanonicalName_Class(),"    @Test
    public void test_getPackageCanonicalName_Class() {
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(ClassUtils.class));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(ClassUtils[].class));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));
        assertEquals("""", ClassUtils.getPackageCanonicalName(int[].class));
        assertEquals("""", ClassUtils.getPackageCanonicalName(int[][].class));
        
        // Inner types
        class Named extends Object {}
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(new Object(){}.getClass()));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(Named.class));
        assertEquals(""org.apache.commons.lang3"", ClassUtils.getPackageCanonicalName(Inner.class));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4020]])
55,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullFloatArray(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllNullFloatArray() {
        ArrayUtils.removeAll((float[]) null, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4020]])
489,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testHexToShort(),"    @Test
    public void testHexToShort() {
        final String src = ""CDF1F0C10F12345678"";
        assertEquals((short)0x0000, Conversion.hexToShort(src, 0, (short)0, 0, 0));
        assertEquals((short)0x000C, Conversion.hexToShort(src, 0, (short)0, 0, 1));
        assertEquals((short)0x1FDC, Conversion.hexToShort(src, 0, (short)0, 0, 4));
        assertEquals((short)0xF1FD, Conversion.hexToShort(src, 1, (short)0, 0, 4));
        assertEquals((short)0x1234, Conversion.hexToShort(src, 0, (short)0x1234, 0, 0));
        assertEquals((short)0x8764, Conversion.hexToShort(src, 15, (short)0x1234, 4, 3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4017]])
199,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByte(),"    @Test
    public void testLastIndexOfByte() {
        byte[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));
        array = new byte[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));
        assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4015]])
423,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_convertClassNamesToClasses_List(),"    @Test
    public void test_convertClassNamesToClasses_List() {
        final List<String> list = new ArrayList<String>();
        List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list);
        assertEquals(0, result.size());

        list.add(""java.lang.String"");
        list.add(""java.lang.xxx"");
        list.add(""java.lang.Object"");
        result = ClassUtils.convertClassNamesToClasses(list);
        assertEquals(3, result.size());
        assertEquals(String.class, result.get(0));
        assertEquals(null, result.get(1));
        assertEquals(Object.class, result.get(2));

        @SuppressWarnings(""unchecked"") // test what happens when non-generic code adds wrong type of element
        final
        List<Object> olist = (List<Object>)(List<?>)list;
        olist.add(new Object());
        try {
            ClassUtils.convertClassNamesToClasses(list);
            fail(""Should not have been able to convert list"");
        } catch (final ClassCastException expected) {}
        assertEquals(null, ClassUtils.convertClassNamesToClasses(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4013]])
178,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfLongWithStartIndex(),"    @Test
    public void testIndexOfLongWithStartIndex() {
        long[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));
        array = new long[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));
        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));
        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));
        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));
        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));
        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));
        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4012]])
57,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArrayRemoveNone(),"    @Test
    public void testRemoveAllIntArrayRemoveNone() {
        final int[] array1 = new int[] { 1, 2 };
        final int[] array2 = ArrayUtils.removeAll(array1);
        assertNotSame(array1, array2);
        assertArrayEquals(array1, array2);
        assertEquals(int.class, array2.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4009]])
483,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testByteArrayToLong(),"    @Test
    public void testByteArrayToLong() {
        final byte[] src = new byte[]{
            (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,
            (byte)0x56, (byte)0x78};
        assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0));
        assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1));
        assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4));
        assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4));
        assertEquals(
            0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0));
        assertEquals(
            0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1));
        assertEquals(
            0x123456789A7856F0L, Conversion.byteArrayToLong(src, 7, 0x123456789ABCDEF0L, 8, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4006]])
484,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testShortArrayToInt(),"    @Test
    public void testShortArrayToInt() {
        final short[] src = new short[]{
            (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800};
        assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0));
        assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1));
        assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2));
        assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2));
        assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0));
        assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1));
        // assertEquals(0x34567800,Conversion.ShortArrayToInt(src, 3, 0x12345678, 16, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4006]])
56,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArray(),"    @Test
    public void testRemoveAllIntArray() {
        int[] array;
        array = ArrayUtils.removeAll(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.EMPTY_INT_ARRAY);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        array = ArrayUtils.removeAll(new int[] { 1 }, ArrayUtils.EMPTY_INT_ARRAY);
        assertTrue(Arrays.equals(new int[] { 1 }, array));
        array = ArrayUtils.removeAll(new int[] { 1 }, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0);
        assertTrue(Arrays.equals(new int[] { 2 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2 }, 1);
        assertTrue(Arrays.equals(new int[] { 1 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2, 1 }, 1);
        assertTrue(Arrays.equals(new int[] { 1, 1 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 1);
        assertTrue(Arrays.equals(new int[] { 3 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 1, 2);
        assertTrue(Arrays.equals(new int[] { 1 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 2);
        assertTrue(Arrays.equals(new int[] { 2 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 1, 3);
        assertTrue(Arrays.equals(new int[] { 1, 3, 5 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 0, 2, 4);
        assertTrue(Arrays.equals(new int[] { 2, 4 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);
        assertTrue(Arrays.equals(new int[] { 1, 3, 5, 7 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);
        assertTrue(Arrays.equals(new int[] { 2, 4, 6 }, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4002]])
19,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayLong(),"    @Test
    public void testAddObjectArrayLong() {
        long[] newArray;
        newArray = ArrayUtils.add((long[])null, 0);
        assertTrue(Arrays.equals(new long[]{0}, newArray));
        assertEquals(Long.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add((long[])null, 1);
        assertTrue(Arrays.equals(new long[]{1}, newArray));
        assertEquals(Long.TYPE, newArray.getClass().getComponentType());
        final long[] array1 = new long[]{1, 2, 3};
        newArray = ArrayUtils.add(array1, 0);
        assertTrue(Arrays.equals(new long[]{1, 2, 3, 0}, newArray));
        assertEquals(Long.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(array1, 4);
        assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));
        assertEquals(Long.TYPE, newArray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.4001]])
20,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayShort(),"    @Test
    public void testAddObjectArrayShort() {
        short[] newArray;
        newArray = ArrayUtils.add((short[])null, (short)0);
        assertTrue(Arrays.equals(new short[]{0}, newArray));
        assertEquals(Short.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add((short[])null, (short)1);
        assertTrue(Arrays.equals(new short[]{1}, newArray));
        assertEquals(Short.TYPE, newArray.getClass().getComponentType());
        final short[] array1 = new short[]{1, 2, 3};
        newArray = ArrayUtils.add(array1, (short)0);
        assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray));
        assertEquals(Short.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(array1, (short)4);
        assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));
        assertEquals(Short.TYPE, newArray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3993]])
496,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testLongToShortArray(),"    @Test
    public void testLongToShortArray() {
        assertArrayEquals(
            new short[]{},
            Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0));
        assertArrayEquals(
            new short[]{},
            Conversion.longToShortArray(0x0000000000000000L, 100, new short[]{}, 0, 0));
        assertArrayEquals(
            new short[]{},
            Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 100, 0));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0));
        assertArrayEquals(
            new short[]{(short)0xCDEF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new short[]{(short)0xCDEF, (short)0x90AB, (short)0xFFFF, (short)0xFFFF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 2));
        assertArrayEquals(
            new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0xFFFF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 3));
        assertArrayEquals(
            new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0x1234},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 4));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xCDEF, (short)0x90AB, (short)0x5678},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 1, 3));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0x90AB},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 2));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0xFFFF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xCDEF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 3, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xE6F7, (short)0xFFFF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xF37B, (short)0xFFFF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 2, new short[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x79BD, (short)0xFFFF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 3, new short[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xBCDE, (short)0xFFFF},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 4, new short[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new short[]{(short)0xE6F7, (short)0x4855, (short)0x2B3C, (short)0x091A},
            Conversion.longToShortArray(
                0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 0, 4));
        assertArrayEquals(
            new short[]{(short)0x2B3C},
            Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3987]])
66,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArray(),"    @Test
    public void testRemoveAllShortArray() {
        short[] array;
        array = ArrayUtils.removeAll(new short[] { 1 }, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2 }, 0);
        assertTrue(Arrays.equals(new short[] { 2 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2 }, 1);
        assertTrue(Arrays.equals(new short[] { 1 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2, 1 }, 1);
        assertTrue(Arrays.equals(new short[] { 1, 1 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeAll(new short[] { 1, 2 }, 0, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2, 3 }, 0, 1);
        assertTrue(Arrays.equals(new short[] { 3 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2, 3 }, 1, 2);
        assertTrue(Arrays.equals(new short[] { 1 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2, 3 }, 0, 2);
        assertTrue(Arrays.equals(new short[] { 2 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5 }, 1, 3);
        assertTrue(Arrays.equals(new short[] { 1, 3, 5 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5 }, 0, 2, 4);
        assertTrue(Arrays.equals(new short[] { 2, 4 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);
        assertTrue(Arrays.equals(new short[] { 1, 3, 5, 7 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new short[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);
        assertTrue(Arrays.equals(new short[] { 2, 4, 6 }, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3986]])
497,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testIntToShortArray(),"    @Test
    public void testIntToShortArray() {
        assertArrayEquals(
            new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 0, 0));
        assertArrayEquals(
            new short[]{}, Conversion.intToShortArray(0x00000000, 100, new short[]{}, 0, 0));
        assertArrayEquals(
            new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 100, 0));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},
            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0));
        assertArrayEquals(
            new short[]{(short)0x5678, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},
            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new short[]{(short)0x5678, (short)0x1234, (short)0xFFFF, (short)0xFFFF},
            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 2));
        // assertArrayEquals(new
        // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0xFFFF},Conversion.intToShortArray(0x12345678,
        // 0,new short[]{-1,-1,-1,-1},0,3));//rejected by assertion
        // assertArrayEquals(new
        // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0x1234},Conversion.intToShortArray(0x12345678,
        // 0,new short[]{-1,-1,-1,-1},0,4));
        // assertArrayEquals(new
        // short[]{(short)0xFFFF,(short)0x5678,(short)0x1234,(short)0x5678},Conversion.intToShortArray(0x12345678,
        // 0,new short[]{-1,-1,-1,-1},1,3));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0x1234},
            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 2));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0xFFFF},
            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0x5678},
            Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 3, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x2B3C, (short)0xFFFF},
            Conversion.intToShortArray(0x12345678, 1, new short[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x159E, (short)0xFFFF},
            Conversion.intToShortArray(0x12345678, 2, new short[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x8ACF, (short)0xFFFF},
            Conversion.intToShortArray(0x12345678, 3, new short[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x4567, (short)0xFFFF},
            Conversion.intToShortArray(0x12345678, 4, new short[]{-1, -1, -1, -1}, 2, 1));
        // assertArrayEquals(new
        // short[]{(short)0xE6F7,(short)0x4855,(short)0x2B3C,(short)0x091A},Conversion.intToShortArray(0x12345678,
        // 1,new short[]{-1,-1,-1,-1},0,4));//rejected by assertion
        // assertArrayEquals(new
        // short[]{(short)0x2B3C},Conversion.intToShortArray(0x12345678,33,new
        // short[]{0},0,1));//rejected by assertion
        assertArrayEquals(
            new short[]{(short)0x091A},
            Conversion.intToShortArray(0x12345678, 17, new short[]{0}, 0, 1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3981]])
67,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayRemoveNone(),"    @Test
    public void testRemoveAllShortArrayRemoveNone() {
        final short[] array1 = new short[] { 1, 2 };
        final short[] array2 = ArrayUtils.removeAll(array1);
        assertNotSame(array1, array2);
        assertArrayEquals(array1, array2);
        assertEquals(short.class, array2.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3981]])
133,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloat(),"    @Test
    public void testNullToEmptyFloat() {
        // Test null handling
        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, ArrayUtils.nullToEmpty((float[]) null));
        // Test valid array handling
        final float[] original = new float[] {2.6f, 3.8f};
        assertEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final float[] empty = new float[]{};
        final float[] result = ArrayUtils.nullToEmpty(empty);
        assertEquals(ArrayUtils.EMPTY_FLOAT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3980]])
485,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testByteArrayToInt(),"    @Test
    public void testByteArrayToInt() {
        final byte[] src = new byte[]{
            (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,
            (byte)0x56, (byte)0x78};
        assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0));
        assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1));
        assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4));
        assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4));
        assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0));
        assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1));
        // assertEquals(0x56341278,Conversion.ByteArrayToInt(src, 5, 0x01234567, 8, 4));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3973]])
721,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHiragana(),"    @Test
    public void testEscapeHiragana() {
        // Some random Japanese Unicode characters
        final String original = ""\u304B\u304C\u3068"";
        final String escaped = StringEscapeUtils.escapeHtml4(original);
        assertEquals( ""Hiragana character Unicode behaviour should not be being escaped by escapeHtml4"",
        original, escaped);

        final String unescaped = StringEscapeUtils.unescapeHtml4( escaped );

        assertEquals( ""Hiragana character Unicode behaviour has changed - expected no unescaping"", escaped, unescaped);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3972]])
89,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveShortArray(),"    @Test
    public void testRemoveShortArray() {
        short[] array;
        array = ArrayUtils.remove(new short[] {1}, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new short[] {1, 2}, 0);
        assertTrue(Arrays.equals(new short[] {2}, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new short[] {1, 2}, 1);
        assertTrue(Arrays.equals(new short[] {1}, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new short[] {1, 2, 1}, 1);
        assertTrue(Arrays.equals(new short[] {1, 1}, array));
        assertEquals(Short.TYPE, array.getClass().getComponentType());
        try {
            ArrayUtils.remove(new short[] {1, 2}, -1);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove(new short[] {1, 2}, 2);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove((short[]) null, 0);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3956]])
545,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_processBitVector_longClass(),"    @Test(expected=IllegalArgumentException.class)
    public void test_processBitVector_longClass() {
        EnumUtils.processBitVector(TooMany.class, 0L);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3954]])
163,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testReverse(),"    @Test
    public void testReverse() {
        final StringBuffer str1 = new StringBuffer(""pick"");
        final String str2 = ""a"";
        final String[] str3 = new String[] {""stick""};
        final String str4 = ""up"";
        
        Object[] array = new Object[] {str1, str2, str3};
        ArrayUtils.reverse(array);
        assertEquals(array[0], str3);
        assertEquals(array[1], str2);
        assertEquals(array[2], str1);
        
        array = new Object[] {str1, str2, str3, str4};
        ArrayUtils.reverse(array);
        assertEquals(array[0], str4);
        assertEquals(array[1], str3);
        assertEquals(array[2], str2);
        assertEquals(array[3], str1);

        array = null;
        ArrayUtils.reverse(array);
        assertArrayEquals(null, array);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3952]])
529,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullArrayElement(),"    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVectors_nullArrayElement() {
        EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3945]])
193,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfCharWithStartIndex(),"    @Test
    public void testIndexOfCharWithStartIndex() {
        char[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));
        array = new char[] { 'a', 'b', 'c', 'd', 'a' };
        assertEquals(4, ArrayUtils.indexOf(array, 'a', 2));
        assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2));
        assertEquals(2, ArrayUtils.indexOf(array, 'c', 2));
        assertEquals(3, ArrayUtils.indexOf(array, 'd', 2));
        assertEquals(3, ArrayUtils.indexOf(array, 'd', -1));
        assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0));
        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3939]])
147,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSubarrayShort(),"    @Test
    public void testSubarrayShort() {
        final short[] nullArray = null;
        final short[] array = { 10, 11, 12, 13, 14, 15 };
        final short[] leftSubarray    = { 10, 11, 12, 13 };
        final short[] midSubarray     = { 11, 12, 13, 14 };
        final short[] rightSubarray   = { 12, 13, 14, 15 };


        assertTrue(""0 start, mid end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, 0, 4)));

        assertTrue(""0 start, length end"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, 0, array.length)));

        assertTrue(""mid start, mid end"",
            ArrayUtils.isEquals(midSubarray,
                ArrayUtils.subarray(array, 1, 5)));

        assertTrue(""mid start, length end"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, array.length)));


        assertNull(""null input"", ArrayUtils.subarray(nullArray, 0, 3));

        assertEquals(""empty array"", ArrayUtils.EMPTY_SHORT_ARRAY,
            ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));

        assertEquals(""start > end"", ArrayUtils.EMPTY_SHORT_ARRAY,
            ArrayUtils.subarray(array, 4, 2));

        assertEquals(""start == end"", ArrayUtils.EMPTY_SHORT_ARRAY,
            ArrayUtils.subarray(array, 3, 3));

        assertTrue(""start undershoot, normal end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, -2, 4)));

        assertEquals(""start overshoot, any end"",
            ArrayUtils.EMPTY_SHORT_ARRAY,
                ArrayUtils.subarray(array, 33, 4));

        assertTrue(""normal start, end overshoot"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, 33)));

        assertTrue(""start undershoot, end overshoot"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, -2, 12)));

        // empty-return tests

        assertSame(""empty array, object test"",
            ArrayUtils.EMPTY_SHORT_ARRAY,
                ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));

        assertSame(""start > end, object test"",
            ArrayUtils.EMPTY_SHORT_ARRAY,
                ArrayUtils.subarray(array, 4, 1));

        assertSame(""start == end, object test"",
            ArrayUtils.EMPTY_SHORT_ARRAY,
                ArrayUtils.subarray(array, 3, 3));

        assertSame(""start overshoot, any end, object test"",
            ArrayUtils.EMPTY_SHORT_ARRAY,
                ArrayUtils.subarray(array, 8733, 4));

        // array type tests

        assertSame(""short type"", short.class,
            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3938]])
705,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testUnescapeHexCharsHtml(),"    @Test
    public void testUnescapeHexCharsHtml() {
        // Simple easy to grok test 
        assertEquals(""hex number unescape"", ""\u0080\u009F"", StringEscapeUtils.unescapeHtml4(""&#x80;&#x9F;""));
        assertEquals(""hex number unescape"", ""\u0080\u009F"", StringEscapeUtils.unescapeHtml4(""&#X80;&#X9F;""));
        // Test all Character values:
        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {
            final Character c1 = new Character(i);
            final Character c2 = new Character((char)(i+1));
            final String expected = c1.toString() + c2.toString();
            final String escapedC1 = ""&#x"" + Integer.toHexString((c1.charValue())) + "";"";
            final String escapedC2 = ""&#x"" + Integer.toHexString((c2.charValue())) + "";"";
            assertEquals(""hex number unescape index "" + (int)i, expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2));
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3929]])
498,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testLongToByteArray(),"    @Test
    public void testLongToByteArray() {
        assertArrayEquals(
            new byte[]{},
            Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0));
        assertArrayEquals(
            new byte[]{},
            Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0));
        assertArrayEquals(
            new byte[]{},
            Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56,
                (byte)0x34, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56,
                (byte)0x34, (byte)0x12, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,
                (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,
                (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,
                (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0x12},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));
        assertArrayEquals(
            new byte[]{
                (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[]{
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85,
                (byte)0xC4, (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[]{
                -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));
        // assertArrayEquals(new
        // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToByteArray(0x1234567890ABCDEFL,13,new
        // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xC4,
                (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00, (byte)0xFF},
            Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[]{
                -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3925]])
63,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllLongArrayNegativeIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllLongArrayNegativeIndex() {
        ArrayUtils.removeAll(new long[] { 1, 2 }, -1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3922]])
639,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testComparableConstructors(),"    @SuppressWarnings({ ""rawtypes"", ""unchecked"" })
    @Test
    public void testComparableConstructors() {
        final Comparable c = 
            new Comparable() { 
                @Override
                public int compareTo(final Object other) {
                    return 1;
                }
            };
        final Range r1 = Range.is(c);
        final Range r2 = Range.between(c, c);
        assertEquals(true, r1.isNaturalOrdering());
        assertEquals(true, r2.isNaturalOrdering());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3913]])
570,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,"org.apache.commons.lang3.LocaleUtilsTest.assertLocaleLookupList(java.util.Locale, java.util.Locale, java.util.Locale[])","    private void assertLocaleLookupList(final Locale locale, final Locale defaultLocale, final Locale[] expected) {
        final List<Locale> localeList = defaultLocale == null ?
                LocaleUtils.localeLookupList(locale) :
                LocaleUtils.localeLookupList(locale, defaultLocale);
        
        assertEquals(expected.length, localeList.size());
        assertEquals(Arrays.asList(expected), localeList);
        assertUnmodifiableCollection(localeList);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3911]])
533,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nonEnumClass(),"    @SuppressWarnings(""unchecked"")
    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVectors_nonEnumClass() {
        @SuppressWarnings(""rawtypes"")
        final
        Class rawType = Object.class;
        @SuppressWarnings(""rawtypes"")
        final
        List rawList = new ArrayList();
        EnumUtils.generateBitVectors(rawType, rawList);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3901]])
528,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullArrayElement(),"    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVector_nullArrayElement() {
        EnumUtils.generateBitVector(Traffic.class, Traffic.RED, null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3896]])
541,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_processBitVector_nullClass(),"    @Test(expected=NullPointerException.class)
    public void test_processBitVector_nullClass() {
        final Class<Traffic> empty = null;
        EnumUtils.processBitVector(empty, 0L);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3893]])
624,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.NonComparableCharSequence.toString(),"        @Override
        public String toString() {
            return value;
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3893]])
532,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nonEnumClass(),"    @SuppressWarnings(""unchecked"")
    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVector_nonEnumClass() {
        @SuppressWarnings(""rawtypes"")
        final
        Class rawType = Object.class;
        @SuppressWarnings(""rawtypes"")
        final
        List rawList = new ArrayList();
        EnumUtils.generateBitVector(rawType, rawList);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3890]])
189,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShort(),"    @Test
    public void testLastIndexOfShort() {
        short[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));
        array = new short[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));
        assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3887]])
182,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfInt(),"    @Test
    public void testIndexOfInt() {
        int[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, 0));
        array = new int[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.indexOf(array, 0));
        assertEquals(1, ArrayUtils.indexOf(array, 1));
        assertEquals(2, ArrayUtils.indexOf(array, 2));
        assertEquals(3, ArrayUtils.indexOf(array, 3));
        assertEquals(-1, ArrayUtils.indexOf(array, 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3884]])
197,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfByte(),"    @Test
    public void testIndexOfByte() {
        byte[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));
        array = new byte[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));
        assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));
        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));
        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));
        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3881]])
530,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_longClass(),"    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVector_longClass() {
        EnumUtils.generateBitVector(TooMany.class, EnumSet.of(TooMany.A1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3878]])
88,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveLongArray(),"    @Test
    public void testRemoveLongArray() {
        long[] array;
        array = ArrayUtils.remove(new long[] {1}, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new long[] {1, 2}, 0);
        assertTrue(Arrays.equals(new long[] {2}, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new long[] {1, 2}, 1);
        assertTrue(Arrays.equals(new long[] {1}, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new long[] {1, 2, 1}, 1);
        assertTrue(Arrays.equals(new long[] {1, 1}, array));
        assertEquals(Long.TYPE, array.getClass().getComponentType());
        try {
            ArrayUtils.remove(new long[] {1, 2}, -1);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove(new long[] {1, 2}, 2);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove((long[]) null, 0);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3873]])
621,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.NonComparableCharSequence.charAt(int),"        @Override
        public char charAt(final int arg0) {
            return value.charAt(arg0);
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3864]])
209,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndexTolerance(),"    @SuppressWarnings(""cast"")
    @Test
    public void testLastIndexOfDoubleWithStartIndexTolerance() {
        double[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));
        array = new double[0];
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));
        array = new double[] { (double) 3 };
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));
        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35));
        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3859]])
124,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testCloneDouble(),"    @Test
    public void testCloneDouble() {
        assertEquals(null, ArrayUtils.clone((double[]) null));
        final double[] original = new double[] {2.4d, 5.7d};
        final double[] cloned = ArrayUtils.clone(original);
        assertTrue(Arrays.equals(original, cloned));
        assertTrue(original != cloned);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3855]])
345,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharEncodingTest.java,org.apache.commons.lang3.CharEncodingTest.warn(java.lang.String),"    void warn(final String msg) {
        System.err.println(msg);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3851]])
206,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDouble(),"    @SuppressWarnings(""cast"")
    @Test
    public void testLastIndexOfDouble() {
        double[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));
        array = new double[0];
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));
        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3851]])
478,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testIntToHexDigitMsb0(),"    @Test
    public void testIntToHexDigitMsb0() {
        assertEquals('0', Conversion.intToHexDigitMsb0(0));
        assertEquals('8', Conversion.intToHexDigitMsb0(1));
        assertEquals('4', Conversion.intToHexDigitMsb0(2));
        assertEquals('c', Conversion.intToHexDigitMsb0(3));
        assertEquals('2', Conversion.intToHexDigitMsb0(4));
        assertEquals('a', Conversion.intToHexDigitMsb0(5));
        assertEquals('6', Conversion.intToHexDigitMsb0(6));
        assertEquals('e', Conversion.intToHexDigitMsb0(7));
        assertEquals('1', Conversion.intToHexDigitMsb0(8));
        assertEquals('9', Conversion.intToHexDigitMsb0(9));
        assertEquals('5', Conversion.intToHexDigitMsb0(10));
        assertEquals('d', Conversion.intToHexDigitMsb0(11));
        assertEquals('3', Conversion.intToHexDigitMsb0(12));
        assertEquals('b', Conversion.intToHexDigitMsb0(13));
        assertEquals('7', Conversion.intToHexDigitMsb0(14));
        assertEquals('f', Conversion.intToHexDigitMsb0(15));
        try {
            Conversion.intToHexDigitMsb0(16);
            fail(""Thrown "" + IllegalArgumentException.class.getName() + "" expected"");
        } catch (final IllegalArgumentException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3849]])
523,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullElement(),"    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVectors_nullElement() {
        EnumUtils.generateBitVectors(Traffic.class, Arrays.asList(Traffic.RED, null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3847]])
522,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullElement(),"    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVector_nullElement() {
        EnumUtils.generateBitVector(Traffic.class, Arrays.asList(Traffic.RED, null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3846]])
539,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectorsFromArray(),"    @Test
    public void test_generateBitVectorsFromArray() {
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L);
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L);
        //gracefully handles duplicates:
        assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3845]])
185,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfIntWithStartIndex(),"    @Test
    public void testLastIndexOfIntWithStartIndex() {
        int[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));
        array = new int[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));
        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));
        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));
        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3843]])
184,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfInt(),"    @Test
    public void testLastIndexOfInt() {
        int[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));
        array = new int[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));
        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));
        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));
        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3843]])
200,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfByteWithStartIndex(),"    @Test
    public void testLastIndexOfByteWithStartIndex() {
        byte[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));
        array = new byte[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));
        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3834]])
531,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_longClassWithArray(),"    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVector_longClassWithArray() {
        EnumUtils.generateBitVector(TooMany.class, TooMany.A1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3827]])
242,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToPrimitive_float_float(),"     @Test
     public void testToPrimitive_float_float() {
         final Float[] l = null;
         assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE));
         
         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, 
         ArrayUtils.toPrimitive(new Float[0], 1));
         
         assertTrue(Arrays.equals(
             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), 
                 Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1)));
         
         assertTrue(Arrays.equals(
             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},
             ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), 
                 null, Float.valueOf(9999999)}, Float.MAX_VALUE))
         );
     }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3820]])
202,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDouble(),"    @SuppressWarnings(""cast"")
    @Test
    public void testIndexOfDouble() {
        double[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));
        array = new double[0];
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.indexOf(array, (double) 0));
        assertEquals(1, ArrayUtils.indexOf(array, (double) 1));
        assertEquals(2, ArrayUtils.indexOf(array, (double) 2));
        assertEquals(3, ArrayUtils.indexOf(array, (double) 3));
        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3819]])
747,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence.length(),"        @Override
        public int length() {
            return seq.length();
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3805]])
495,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testLongToIntArray(),"    @Test
    public void testLongToIntArray() {
        assertArrayEquals(
            new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 0, 0));
        assertArrayEquals(
            new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[]{}, 0, 0));
        assertArrayEquals(
            new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 100, 0));
        assertArrayEquals(
            new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 0));
        assertArrayEquals(
            new int[]{0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new int[]{0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 2));
        // assertArrayEquals(new
        // int[]{0x90ABCDEF,0x12345678,0x90ABCDEF,0x12345678},Conversion.longToIntArray(0x1234567890ABCDEFL,
        // 0,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion
        // assertArrayEquals(new
        // int[]{0xFFFFFFFF,0x90ABCDEF,0x12345678,0x90ABCDEF},Conversion.longToIntArray(0x1234567890ABCDEFL,
        // 0,new int[]{-1,-1,-1,-1},1,3));
        assertArrayEquals(
            new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 2));
        assertArrayEquals(
            new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 3, 1));
        assertArrayEquals(
            new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[]{-1, -1, -1, -1}, 2, 1));
        assertArrayEquals(
            new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[]{-1, -1, -1, -1}, 2, 1));
        // assertArrayEquals(new
        // int[]{0x4855E6F7,0x091A2B3C,0x4855E6F7,0x091A2B3C},Conversion.longToIntArray(0x1234567890ABCDEFL,
        // 1,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion
        assertArrayEquals(
            new int[]{0x091A2B3C},
            Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[]{0}, 0, 1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3796]])
592,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.testHashCodeMulti_multiple_likeList(),"    @Test
    public void testHashCodeMulti_multiple_likeList() {
        final List<Object> list0 = new ArrayList<Object>(Arrays.asList());
        assertEquals(list0.hashCode(), ObjectUtils.hashCodeMulti());
        
        final List<Object> list1 = new ArrayList<Object>(Arrays.asList(""a""));
        assertEquals(list1.hashCode(), ObjectUtils.hashCodeMulti(""a""));
        
        final List<Object> list2 = new ArrayList<Object>(Arrays.asList(""a"", ""b""));
        assertEquals(list2.hashCode(), ObjectUtils.hashCodeMulti(""a"", ""b""));
        
        final List<Object> list3 = new ArrayList<Object>(Arrays.asList(""a"", ""b"", ""c""));
        assertEquals(list3.hashCode(), ObjectUtils.hashCodeMulti(""a"", ""b"", ""c""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3795]])
542,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_processBitVectors_nullClass(),"    @Test(expected=NullPointerException.class)
    public void test_processBitVectors_nullClass() {
        final Class<Traffic> empty = null;
        EnumUtils.processBitVectors(empty, 0L);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3789]])
116,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.Anonymous-743011de-3551-44a2-932f-18252c5e9d98.hashCode(),"            @Override
            public int hashCode() {
                throw new UnsupportedOperationException();
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3787]])
149,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSubarrayByte(),"    @Test
    public void testSubarrayByte() {
        final byte[] nullArray = null;
        final byte[] array = { 10, 11, 12, 13, 14, 15 };
        final byte[] leftSubarray     = { 10, 11, 12, 13 };
        final byte[] midSubarray      = { 11, 12, 13, 14 };
        final byte[] rightSubarray = { 12, 13, 14, 15 };


        assertTrue(""0 start, mid end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, 0, 4)));

        assertTrue(""0 start, length end"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, 0, array.length)));

        assertTrue(""mid start, mid end"",
            ArrayUtils.isEquals(midSubarray,
                ArrayUtils.subarray(array, 1, 5)));

        assertTrue(""mid start, length end"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, array.length)));


        assertNull(""null input"", ArrayUtils.subarray(nullArray, 0, 3));

        assertEquals(""empty array"", ArrayUtils.EMPTY_BYTE_ARRAY,
            ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));

        assertEquals(""start > end"", ArrayUtils.EMPTY_BYTE_ARRAY,
            ArrayUtils.subarray(array, 4, 2));

        assertEquals(""start == end"", ArrayUtils.EMPTY_BYTE_ARRAY,
            ArrayUtils.subarray(array, 3, 3));

        assertTrue(""start undershoot, normal end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, -2, 4)));

        assertEquals(""start overshoot, any end"",
            ArrayUtils.EMPTY_BYTE_ARRAY,
                ArrayUtils.subarray(array, 33, 4));

        assertTrue(""normal start, end overshoot"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, 33)));

        assertTrue(""start undershoot, end overshoot"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, -2, 12)));

        // empty-return tests

        assertSame(""empty array, object test"",
            ArrayUtils.EMPTY_BYTE_ARRAY,
                ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));

        assertSame(""start > end, object test"",
            ArrayUtils.EMPTY_BYTE_ARRAY,
                ArrayUtils.subarray(array, 4, 1));

        assertSame(""start == end, object test"",
            ArrayUtils.EMPTY_BYTE_ARRAY,
                ArrayUtils.subarray(array, 3, 3));

        assertSame(""start overshoot, any end, object test"",
            ArrayUtils.EMPTY_BYTE_ARRAY,
                ArrayUtils.subarray(array, 8733, 4));

        // array type tests

        assertSame(""byte type"", byte.class,
            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3785]])
46,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArray(),"    @Test
    public void testRemoveAllDoubleArray() {
        double[] array;
        array = ArrayUtils.removeAll(new double[] { 1 }, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0);
        assertTrue(Arrays.equals(new double[] { 2 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2 }, 1);
        assertTrue(Arrays.equals(new double[] { 1 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2, 1 }, 1);
        assertTrue(Arrays.equals(new double[] { 1, 1 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeAll(new double[] { 1, 2 }, 0, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 1);
        assertTrue(Arrays.equals(new double[] { 3 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 1, 2);
        assertTrue(Arrays.equals(new double[] { 1 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2, 3 }, 0, 2);
        assertTrue(Arrays.equals(new double[] { 2 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 1, 3);
        assertTrue(Arrays.equals(new double[] { 1, 3, 5 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5 }, 0, 2, 4);
        assertTrue(Arrays.equals(new double[] { 2, 4 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);
        assertTrue(Arrays.equals(new double[] { 1, 3, 5, 7 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new double[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);
        assertTrue(Arrays.equals(new double[] { 2, 4, 6 }, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3778]])
707,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlVersions(),"    @Test
    public void testEscapeHtmlVersions() throws Exception {
        assertEquals(""&Beta;"", StringEscapeUtils.escapeHtml4(""\u0392""));
        assertEquals(""\u0392"", StringEscapeUtils.unescapeHtml4(""&Beta;""));

        // TODO: refine API for escaping/unescaping specific HTML versions
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3774]])
85,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveDoubleArray(),"    @Test
    public void testRemoveDoubleArray() {
        double[] array;
        array = ArrayUtils.remove(new double[] {1}, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new double[] {1, 2}, 0);
        assertTrue(Arrays.equals(new double[] {2}, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new double[] {1, 2}, 1);
        assertTrue(Arrays.equals(new double[] {1}, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new double[] {1, 2, 1}, 1);
        assertTrue(Arrays.equals(new double[] {1, 1}, array));
        assertEquals(Double.TYPE, array.getClass().getComponentType());
        try {
            ArrayUtils.remove(new double[] {1, 2}, -1);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove(new double[] {1, 2}, 2);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove((double[]) null, 0);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3773]])
18,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayInt(),"    @Test
    public void testAddObjectArrayInt() {
        int[] newArray;
        newArray = ArrayUtils.add((int[])null, 0);
        assertTrue(Arrays.equals(new int[]{0}, newArray));
        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add((int[])null, 1);
        assertTrue(Arrays.equals(new int[]{1}, newArray));
        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
        final int[] array1 = new int[]{1, 2, 3};
        newArray = ArrayUtils.add(array1, 0);
        assertTrue(Arrays.equals(new int[]{1, 2, 3, 0}, newArray));
        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(array1, 4);
        assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));
        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3768]])
749,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence.equals(java.lang.Object),"        @Override
        public boolean equals(final Object obj) {
            if (obj == null || !(obj instanceof CustomCharSequence)) {
                return false;
            }
            final CustomCharSequence other = (CustomCharSequence) obj;
            return seq.equals(other.seq);
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3768]])
190,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfShortWithStartIndex(),"    @Test
    public void testLastIndexOfShortWithStartIndex() {
        short[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));
        array = new short[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));
        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3764]])
709,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlSupplementaryCharacters(),"    @Test
    public void testEscapeXmlSupplementaryCharacters() {
        final CharSequenceTranslator escapeXml = 
            StringEscapeUtils.ESCAPE_XML.with( NumericEntityEscaper.between(0x7f, Integer.MAX_VALUE) );

        assertEquals(""Supplementary character must be represented using a single escape"", ""&#144308;"",
                escapeXml.translate(""\uD84C\uDFB4""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3763]])
146,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSubarrayInt(),"    @Test
    public void testSubarrayInt() {
        final int[] nullArray = null;
        final int[] array = { 10, 11, 12, 13, 14, 15 };
        final int[] leftSubarray  = { 10, 11, 12, 13 };
        final int[] midSubarray   = { 11, 12, 13, 14 };
        final int[] rightSubarray = { 12, 13, 14, 15 };


        assertTrue(""0 start, mid end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, 0, 4)));

        assertTrue(""0 start, length end"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, 0, array.length)));

        assertTrue(""mid start, mid end"",
            ArrayUtils.isEquals(midSubarray,
                ArrayUtils.subarray(array, 1, 5)));

        assertTrue(""mid start, length end"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, array.length)));


        assertNull(""null input"", ArrayUtils.subarray(nullArray, 0, 3));

        assertEquals(""empty array"", ArrayUtils.EMPTY_INT_ARRAY,
            ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));

        assertEquals(""start > end"", ArrayUtils.EMPTY_INT_ARRAY,
            ArrayUtils.subarray(array, 4, 2));

        assertEquals(""start == end"", ArrayUtils.EMPTY_INT_ARRAY,
            ArrayUtils.subarray(array, 3, 3));

        assertTrue(""start undershoot, normal end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, -2, 4)));

        assertEquals(""start overshoot, any end"",
            ArrayUtils.EMPTY_INT_ARRAY,
                ArrayUtils.subarray(array, 33, 4));

        assertTrue(""normal start, end overshoot"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, 33)));

        assertTrue(""start undershoot, end overshoot"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, -2, 12)));

        // empty-return tests

        assertSame(""empty array, object test"",
            ArrayUtils.EMPTY_INT_ARRAY,
                ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));

        assertSame(""start > end, object test"",
            ArrayUtils.EMPTY_INT_ARRAY,
                ArrayUtils.subarray(array, 4, 1));

        assertSame(""start == end, object test"",
            ArrayUtils.EMPTY_INT_ARRAY,
                ArrayUtils.subarray(array, 3, 3));

        assertSame(""start overshoot, any end, object test"",
            ArrayUtils.EMPTY_INT_ARRAY,
                ArrayUtils.subarray(array, 8733, 4));

        // array type tests

        assertSame(""int type"", int.class,
            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3760]])
424,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ClassUtilsTest.java,org.apache.commons.lang3.ClassUtilsTest.test_convertClassesToClassNames_List(),"    @Test
    public void test_convertClassesToClassNames_List() {
        final List<Class<?>> list = new ArrayList<Class<?>>();
        List<String> result = ClassUtils.convertClassesToClassNames(list);
        assertEquals(0, result.size());

        list.add(String.class);
        list.add(null);
        list.add(Object.class);
        result = ClassUtils.convertClassesToClassNames(list);
        assertEquals(3, result.size());
        assertEquals(""java.lang.String"", result.get(0));
        assertEquals(null, result.get(1));
        assertEquals(""java.lang.Object"", result.get(2));

        @SuppressWarnings(""unchecked"") // test what happens when non-generic code adds wrong type of element
        final
        List<Object> olist = (List<Object>)(List<?>)list;
        olist.add(new Object());
        try {
            ClassUtils.convertClassesToClassNames(list);
            fail(""Should not have been able to convert list"");
        } catch (final ClassCastException expected) {}
        assertEquals(null, ClassUtils.convertClassesToClassNames(null));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3760]])
488,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testHexToInt(),"    @Test
    public void testHexToInt() {
        final String src = ""CDF1F0C10F12345678"";
        assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0));
        assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1));
        assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8));
        assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8));
        assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0));
        assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3751]])
666,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.setUp(),"    @Before
    public void setUp() {
        iString = ""foo"";
        iInteger = Integer.valueOf(7);
        iMap = new HashMap<Object, Object>();
        iMap.put(""FOO"", iString);
        iMap.put(""BAR"", iInteger);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3751]])
518,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullClass(),"    @Test(expected=NullPointerException.class)
    public void test_generateBitVector_nullClass() {
        EnumUtils.generateBitVector(null, EnumSet.of(Traffic.RED));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3750]])
500,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testShortToByteArray(),"    @Test
    public void testShortToByteArray() {
        assertArrayEquals(
            new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 0, 0));
        assertArrayEquals(
            new byte[]{}, Conversion.shortToByteArray((short)0x0000, 100, new byte[]{}, 0, 0));
        assertArrayEquals(
            new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 100, 0));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1}, 0, 0));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1}, 0, 2));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1}, 3, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,
                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{
                -1, -1, -1, -1, -1, -1, -1}, 3, 2));
        assertArrayEquals(
            new byte[]{
                (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 1, new byte[]{
                -1, -1, -1, -1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 2, new byte[]{
                -1, -1, -1, -1, -1, -1, -1}, 0, 1));
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0xFE, (byte)0xFF,
                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 5, new byte[]{
                -1, 0, -1, -1, -1, -1, -1}, 3, 2));
        // assertArrayEquals(new
        // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.shortToByteArray((short)0xCDEF,13,new
        // byte[]{-1, 0,-1,-1,-1,-1,-1},3,2));//rejected by assertion
        assertArrayEquals(
            new byte[]{
                (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0xFE, (byte)0xFF, (byte)0xFF,
                (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 13, new byte[]{
                -1, 0, -1, -1, -1, -1, -1}, 3, 1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3750]])
486,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testByteArrayToShort(),"    @Test
    public void testByteArrayToShort() {
        final byte[] src = new byte[]{
            (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,
            (byte)0x56, (byte)0x78};
        assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0));
        assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1));
        assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2));
        assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2));
        assertEquals((short)0x1234, Conversion.byteArrayToShort(src, 0, (short)0x1234, 0, 0));
        assertEquals((short)0xCD34, Conversion.byteArrayToShort(src, 0, (short)0x1234, 8, 1));
        // assertEquals((short)0x5678,Conversion.ByteArrayToShort(src, 7, (short) 0x0123, 8,
        // 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3748]])
751,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence.toString(),"        @Override
        public String toString() {
            return seq.toString();
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3748]])
87,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveIntArray(),"    @Test
    public void testRemoveIntArray() {
        int[] array;
        array = ArrayUtils.remove(new int[] {1}, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new int[] {1, 2}, 0);
        assertTrue(Arrays.equals(new int[] {2}, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new int[] {1, 2}, 1);
        assertTrue(Arrays.equals(new int[] {1}, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new int[] {1, 2, 1}, 1);
        assertTrue(Arrays.equals(new int[] {1, 1}, array));
        assertEquals(Integer.TYPE, array.getClass().getComponentType());
        try {
            ArrayUtils.remove(new int[] {1, 2}, -1);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove(new int[] {1, 2}, 2);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove((int[]) null, 0);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3748]])
719,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,"org.apache.commons.lang3.StringEscapeUtilsTest.checkCsvUnescapeWriter(java.lang.String, java.lang.String)","    private void checkCsvUnescapeWriter(final String expected, final String value) {
        try {
            final StringWriter writer = new StringWriter();
            StringEscapeUtils.UNESCAPE_CSV.translate(value, writer);
            assertEquals(expected, writer.toString());
        } catch (final IOException e) {
            fail(""Threw: "" + e);
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3748]])
557,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,"org.apache.commons.lang3.HashSetvBitSetTest.timeBitSetRemoveAll(int[], java.util.BitSet)","    private long timeBitSetRemoveAll(final int[] array, final BitSet toRemove) {
        int[] output = new int[0];
        final long start = System.nanoTime();
        for(int i = 0; i < LOOPS2; i++){
            output = (int[]) ArrayUtils.removeAll(array, toRemove);            
        }
        final long end = System.nanoTime();
        Assert.assertEquals(array.length-toRemove.cardinality(), output.length);
        return end - start;
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3747]])
243,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testToObject_float(),"    @Test
    public void testToObject_float() {
        final float[] b = null;
        assertArrayEquals(null, ArrayUtils.toObject(b));
    
        assertSame(
            ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,
            ArrayUtils.toObject(new float[0]));
    
        assertTrue(
            Arrays.equals(
                new Float[] {
                    Float.valueOf(Float.MIN_VALUE),
                    Float.valueOf(Float.MAX_VALUE),
                    Float.valueOf(9999999)},
            ArrayUtils.toObject(
                new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 })));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3742]])
534,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nonEnumClassWithArray(),"    @SuppressWarnings(""unchecked"")
    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVector_nonEnumClassWithArray() {
        @SuppressWarnings(""rawtypes"")
        final
        Class rawType = Object.class;
        EnumUtils.generateBitVector(rawType);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3740]])
546,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_processBitVectors_longClass(),"    public void test_processBitVectors_longClass() {
        assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L));
        assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 1L));
        assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 2L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 3L));
        assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 4L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 5L));
        assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 6L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 7L));

        assertEquals(EnumSet.noneOf(TooMany.class), EnumUtils.processBitVectors(TooMany.class, 0L, 0L));
        assertEquals(EnumSet.of(TooMany.A), EnumUtils.processBitVectors(TooMany.class, 0L, 1L));
        assertEquals(EnumSet.of(TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 2L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B), EnumUtils.processBitVectors(TooMany.class, 0L, 3L));
        assertEquals(EnumSet.of(TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 4L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 5L));
        assertEquals(EnumSet.of(TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 6L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C), EnumUtils.processBitVectors(TooMany.class, 0L, 7L));

        assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 0L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 1L));
        assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 2L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 3L));
        assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 4L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 5L));
        assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 6L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 7L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 1L, 7L));

        // demonstrate tolerance of irrelevant high-order digits:
        assertEquals(EnumSet.of(TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 0L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 1L));
        assertEquals(EnumSet.of(TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 2L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 3L));
        assertEquals(EnumSet.of(TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 4L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 5L));
        assertEquals(EnumSet.of(TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 6L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 7L));
        assertEquals(EnumSet.of(TooMany.A, TooMany.B, TooMany.C, TooMany.M2), EnumUtils.processBitVectors(TooMany.class, 9L, 7L));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3740]])
198,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfByteWithStartIndex(),"    @Test
    public void testIndexOfByteWithStartIndex() {
        byte[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));
        array = new byte[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));
        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));
        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));
        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));
        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));
        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));
        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3738]])
519,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullClass(),"    @Test(expected=NullPointerException.class)
    public void test_generateBitVectors_nullClass() {
        EnumUtils.generateBitVectors(null, EnumSet.of(Traffic.RED));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3734]])
76,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveElementFloatArray(),"    @Test
    @SuppressWarnings(""cast"")
    public void testRemoveElementFloatArray() {
        float[] array;
        array = ArrayUtils.removeElements((float[]) null, (float) 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1);
        assertTrue(Arrays.equals(new float[] { 2 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1);
        assertTrue(Arrays.equals(new float[] { 2, 1 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeElements((float[]) null, (float) 1, (float) 1);
        assertNull(array);
        array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1, (float) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1, (float) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 2);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 1);
        assertTrue(Arrays.equals(new float[] { 2 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1);
        assertTrue(Arrays.equals(new float[] { 2 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 2);
        assertTrue(Arrays.equals(new float[] { 1 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1, (float) 1, (float) 1);
        assertTrue(Arrays.equals(new float[] { 2 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3729]])
68,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllShortArrayNegativeIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllShortArrayNegativeIndex() {
        ArrayUtils.removeAll(new short[] { 1, 2 }, -1, 0);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3724]])
161,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSameLengthFloat(),"    @Test
    public void testSameLengthFloat() {
        final float[] nullArray = null;
        final float[] emptyArray = new float[0];
        final float[] oneArray = new float[] {2.5f};
        final float[] twoArray = new float[] {6.4f, 5.8f};
        
        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));
        
        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));
        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));
        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));
        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));
        
        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));
        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));
        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3722]])
535,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nonEnumClassWithArray(),"    @SuppressWarnings(""unchecked"")
    @Test(expected=IllegalArgumentException.class)
    public void test_generateBitVectors_nonEnumClassWithArray() {
        @SuppressWarnings(""rawtypes"")
        final
        Class rawType = Object.class;
        EnumUtils.generateBitVectors(rawType);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3721]])
524,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullClassWithArray(),"    @Test(expected=NullPointerException.class)
    public void test_generateBitVector_nullClassWithArray() {
        EnumUtils.generateBitVector(null, Traffic.RED);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3720]])
48,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllDoubleArrayNegativeIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllDoubleArrayNegativeIndex() {
        ArrayUtils.removeAll(new double[] { 1, 2 }, -1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3717]])
525,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullClassWithArray(),"    @Test(expected=NullPointerException.class)
    public void test_generateBitVectors_nullClassWithArray() {
        EnumUtils.generateBitVectors(null, Traffic.RED);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3715]])
468,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testHexDigitMsb0ToInt(),"    @Test
    public void testHexDigitMsb0ToInt() {
        assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0'));
        assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1'));
        assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2'));
        assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3'));
        assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4'));
        assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5'));
        assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6'));
        assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7'));
        assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8'));
        assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9'));
        assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A'));
        assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a'));
        assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B'));
        assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b'));
        assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C'));
        assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c'));
        assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D'));
        assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d'));
        assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E'));
        assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e'));
        assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F'));
        assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f'));
        try {
            Conversion.hexDigitMsb0ToInt('G');
            fail(""Thrown "" + IllegalArgumentException.class.getName() + "" expected"");
        } catch (final IllegalArgumentException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3713]])
517,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_getEnum_nullClass(),"    @Test(expected=NullPointerException.class)
    public void test_getEnum_nullClass() {
        EnumUtils.getEnum((Class<Traffic>) null, ""PURPLE"");
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3708]])
204,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndex(),"    @SuppressWarnings(""cast"")
    @Test
    public void testIndexOfDoubleWithStartIndex() {
        double[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));
        array = new double[0];
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));
        assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));
        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3707]])
551,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,org.apache.commons.lang3.HashSetvBitSetTest.testHashSet(int),"    @SuppressWarnings(""boxing"")
    private static int[] testHashSet(final int count) {
        final HashSet<Integer> toRemove = new HashSet<Integer>();
            int found = 0;
            for (int i = 0; i < count; i++) {
                toRemove.add(found++);
            }
            return extractIndices(toRemove);
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3707]])
95,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveElementFloatArray(),"    @Test
    @SuppressWarnings(""cast"")
    public void testRemoveElementFloatArray() {
        float[] array;
        array = ArrayUtils.removeElement((float[]) null, (float) 1);
        assertNull(array);
        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new float[] {1}, (float) 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new float[] {1, 2}, (float) 1);
        assertTrue(Arrays.equals(new float[] {2}, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeElement(new float[] {1, 2, 1}, (float) 1);
        assertTrue(Arrays.equals(new float[] {2, 1}, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3706]])
183,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfIntWithStartIndex(),"    @Test
    public void testIndexOfIntWithStartIndex() {
        int[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));
        array = new int[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));
        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));
        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));
        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));
        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));
        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));
        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3705]])
207,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleTolerance(),"    @SuppressWarnings(""cast"")
    @Test
    public void testLastIndexOfDoubleTolerance() {
        double[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));
        array = new double[0];
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35));
        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3701]])
150,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSubarrayDouble(),"    @Test
    public void testSubarrayDouble() {
        final double[] nullArray = null;
        final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 };
        final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, };
        final double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, };
        final double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 };


        assertTrue(""0 start, mid end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, 0, 4)));

        assertTrue(""0 start, length end"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, 0, array.length)));

        assertTrue(""mid start, mid end"",
            ArrayUtils.isEquals(midSubarray,
                ArrayUtils.subarray(array, 1, 5)));

        assertTrue(""mid start, length end"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, array.length)));


        assertNull(""null input"", ArrayUtils.subarray(nullArray, 0, 3));

        assertEquals(""empty array"", ArrayUtils.EMPTY_DOUBLE_ARRAY,
            ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));

        assertEquals(""start > end"", ArrayUtils.EMPTY_DOUBLE_ARRAY,
            ArrayUtils.subarray(array, 4, 2));

        assertEquals(""start == end"", ArrayUtils.EMPTY_DOUBLE_ARRAY,
            ArrayUtils.subarray(array, 3, 3));

        assertTrue(""start undershoot, normal end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, -2, 4)));

        assertEquals(""start overshoot, any end"",
            ArrayUtils.EMPTY_DOUBLE_ARRAY,
                ArrayUtils.subarray(array, 33, 4));

        assertTrue(""normal start, end overshoot"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, 33)));

        assertTrue(""start undershoot, end overshoot"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, -2, 12)));

        // empty-return tests

        assertSame(""empty array, object test"",
            ArrayUtils.EMPTY_DOUBLE_ARRAY,
                ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));

        assertSame(""start > end, object test"",
            ArrayUtils.EMPTY_DOUBLE_ARRAY,
                ArrayUtils.subarray(array, 4, 1));

        assertSame(""start == end, object test"",
            ArrayUtils.EMPTY_DOUBLE_ARRAY,
                ArrayUtils.subarray(array, 3, 3));

        assertSame(""start overshoot, any end, object test"",
            ArrayUtils.EMPTY_DOUBLE_ARRAY,
                ArrayUtils.subarray(array, 8733, 4));

        // array type tests

        assertSame(""double type"", double.class,
            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3696]])
16,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayDouble(),"    @Test
    public void testAddObjectArrayDouble() {
        double[] newArray;
        newArray = ArrayUtils.add((double[])null, 0);
        assertTrue(Arrays.equals(new double[]{0}, newArray));
        assertEquals(Double.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add((double[])null, 1);
        assertTrue(Arrays.equals(new double[]{1}, newArray));
        assertEquals(Double.TYPE, newArray.getClass().getComponentType());
        final double[] array1 = new double[]{1, 2, 3};
        newArray = ArrayUtils.add(array1, 0);
        assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray));
        assertEquals(Double.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(array1, 4);
        assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));
        assertEquals(Double.TYPE, newArray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3691]])
187,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShort(),"    @Test
    public void testIndexOfShort() {
        short[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));
        array = new short[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.indexOf(array, (short) 0));
        assertEquals(1, ArrayUtils.indexOf(array, (short) 1));
        assertEquals(2, ArrayUtils.indexOf(array, (short) 2));
        assertEquals(3, ArrayUtils.indexOf(array, (short) 3));
        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3681]])
143,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testNullToEmptyFloatObject(),"    @Test
    public void testNullToEmptyFloatObject() {
        // Test null handling
        assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Float[]) null));
        // Test valid array handling
        final Float[] original = new Float[] {2.6f, 3.8f};
        assertArrayEquals(original, ArrayUtils.nullToEmpty(original));
        // Test empty array handling
        final Float[] empty = new Float[]{};
        final Float[] result = ArrayUtils.nullToEmpty(empty);
        assertArrayEquals(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, result);
        assertTrue(empty != result);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3681]])
188,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfShortWithStartIndex(),"    @Test
    public void testIndexOfShortWithStartIndex() {
        short[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));
        array = new short[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));
        assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));
        assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));
        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));
        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));
        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));
        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3675]])
665,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.testSerializing(),"    @Test
    public void testSerializing() {
        SerializationUtils.clone(intRange);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3671]])
168,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testReverseByte(),"    @Test
    public void testReverseByte() {
        byte[] array = new byte[] {2, 3, 4};
        ArrayUtils.reverse(array);
        assertEquals(array[0], 4);
        assertEquals(array[1], 3);
        assertEquals(array[2], 2);

        array = null;
        ArrayUtils.reverse(array);
        assertEquals(null, array);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3669]])
208,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndex(),"    @SuppressWarnings(""cast"")
    @Test
    public void testLastIndexOfDoubleWithStartIndex() {
        double[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));
        array = new double[0];
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));
        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3669]])
54,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArrayOutOfBoundsIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllFloatArrayOutOfBoundsIndex() {
        ArrayUtils.removeAll(new float[] { 1, 2 }, 2);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3667]])
102,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,"org.apache.commons.lang3.ArrayUtilsTest.assertIsEquals(java.lang.Object, java.lang.Object, java.lang.Object)","    private void assertIsEquals(final Object array1, final Object array2, final Object array3) {
        assertTrue(ArrayUtils.isEquals(array1, array1));
        assertTrue(ArrayUtils.isEquals(array2, array2));
        assertTrue(ArrayUtils.isEquals(array3, array3));
        assertFalse(ArrayUtils.isEquals(array1, array2));
        assertFalse(ArrayUtils.isEquals(array2, array1));
        assertFalse(ArrayUtils.isEquals(array1, array3));
        assertFalse(ArrayUtils.isEquals(array3, array1));
        assertFalse(ArrayUtils.isEquals(array1, array2));
        assertFalse(ArrayUtils.isEquals(array2, array1));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3645]])
625,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,"org.apache.commons.lang3.ObjectUtilsTest.CharSequenceComparator.compare(java.lang.CharSequence, java.lang.CharSequence)","        @Override
        public int compare(final CharSequence o1, final CharSequence o2) {
            return o1.toString().compareTo(o2.toString());
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3620]])
52,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArrayRemoveNone(),"    @Test
    public void testRemoveAllFloatArrayRemoveNone() {
        final float[] array1 = new float[] { 1, 2 };
        final float[] array2 = ArrayUtils.removeAll(array1);
        assertNotSame(array1, array2);
        assertTrue(Arrays.equals(array1, array2));
        assertEquals(float.class, array2.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3615]])
558,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,"org.apache.commons.lang3.HashSetvBitSetTest.timeExtractRemoveAll(int[], java.util.BitSet)","    private long timeExtractRemoveAll(final int[] array, final BitSet toRemove) {
        int[] output = new int[0];
        final long start = System.nanoTime();
        for(int i = 0; i < LOOPS2; i++){
            final int[] extractIndices = extractIndices(toRemove);
            output = (int[]) ArrayUtils.removeAll((Object)array, extractIndices);
        }
        final long end = System.nanoTime();
        Assert.assertEquals(array.length-toRemove.cardinality(), output.length);
        return end - start;
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3610]])
58,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllIntArrayNegativeIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllIntArrayNegativeIndex() {
        ArrayUtils.removeAll(new int[] { 1, 2 }, -1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3588]])
722,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testLang708(),"    @Test
    public void testLang708() throws IOException {
        final String input = IOUtils.toString(new FileInputStream(""src/test/resources/lang-708-input.txt""), ""UTF-8"");
        final String escaped = StringEscapeUtils.escapeEcmaScript(input);
        // just the end:
        assertTrue(escaped, escaped.endsWith(""}]""));
        // a little more:
        assertTrue(escaped, escaped.endsWith(""\""valueCode\\\"":\\\""\\\""}]""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3570]])
203,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleTolerance(),"    @SuppressWarnings(""cast"")
    @Test
    public void testIndexOfDoubleTolerance() {
        double[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));
        array = new double[0];
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3));
        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35));
        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0));
        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3563]])
164,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testReverseLong(),"    @Test
    public void testReverseLong() {
        long[] array = new long[] {1L, 2L, 3L};
        ArrayUtils.reverse(array);
        assertEquals(array[0], 3L);
        assertEquals(array[1], 2L);
        assertEquals(array[2], 1L);

        array = null;
        ArrayUtils.reverse(array);
        assertEquals(null, array);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3556]])
125,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testCloneFloat(),"    @Test
    public void testCloneFloat() {
        assertEquals(null, ArrayUtils.clone((float[]) null));
        final float[] original = new float[] {2.6f, 6.4f};
        final float[] cloned = ArrayUtils.clone(original);
        assertTrue(Arrays.equals(original, cloned));
        assertTrue(original != cloned);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3545]])
214,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfFloat(),"    @SuppressWarnings(""cast"")
    @Test
    public void testLastIndexOfFloat() {
        float[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));
        array = new float[0];
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));
        array = new float[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));
        assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3535]])
477,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testIntToHexDigit(),"    @Test
    public void testIntToHexDigit() {
        assertEquals('0', Conversion.intToHexDigit(0));
        assertEquals('1', Conversion.intToHexDigit(1));
        assertEquals('2', Conversion.intToHexDigit(2));
        assertEquals('3', Conversion.intToHexDigit(3));
        assertEquals('4', Conversion.intToHexDigit(4));
        assertEquals('5', Conversion.intToHexDigit(5));
        assertEquals('6', Conversion.intToHexDigit(6));
        assertEquals('7', Conversion.intToHexDigit(7));
        assertEquals('8', Conversion.intToHexDigit(8));
        assertEquals('9', Conversion.intToHexDigit(9));
        assertEquals('a', Conversion.intToHexDigit(10));
        assertEquals('b', Conversion.intToHexDigit(11));
        assertEquals('c', Conversion.intToHexDigit(12));
        assertEquals('d', Conversion.intToHexDigit(13));
        assertEquals('e', Conversion.intToHexDigit(14));
        assertEquals('f', Conversion.intToHexDigit(15));
        try {
            Conversion.intToHexDigit(16);
            fail(""Thrown "" + IllegalArgumentException.class.getName() + "" expected"");
        } catch (final IllegalArgumentException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3530]])
720,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeHtmlHighUnicode(),"    @Test
    public void testEscapeHtmlHighUnicode() throws java.io.UnsupportedEncodingException {
        // this is the utf8 representation of the character:
        // COUNTING ROD UNIT DIGIT THREE
        // in Unicode
        // codepoint: U+1D362
        final byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };

        final String original = new String(data, ""UTF8"");

        final String escaped = StringEscapeUtils.escapeHtml4( original );
        assertEquals( ""High Unicode should not have been escaped"", original, escaped);

        final String unescaped = StringEscapeUtils.unescapeHtml4( escaped );
        assertEquals( ""High Unicode should have been unchanged"", original, unescaped);

// TODO: I think this should hold, needs further investigation
//        String unescapedFromEntity = StringEscapeUtils.unescapeHtml4( ""&#119650;"" );
//        assertEquals( ""High Unicode should have been unescaped"", original, unescapedFromEntity);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3510]])
212,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloat(),"    @SuppressWarnings(""cast"")
    @Test
    public void testIndexOfFloat() {
        float[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));
        array = new float[0];
        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));
        array = new float[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.indexOf(array, (float) 0));
        assertEquals(1, ArrayUtils.indexOf(array, (float) 1));
        assertEquals(2, ArrayUtils.indexOf(array, (float) 2));
        assertEquals(3, ArrayUtils.indexOf(array, (float) 3));
        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3501]])
114,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.Anonymous-d4c3943d-efb6-490b-8dfe-e25bc0014e29.setValue(java.lang.Object),"            @Override
            public Object setValue(final Object value) {
                throw new UnsupportedOperationException();
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3494]])
479,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.dbgPrint(boolean[]),"    static String dbgPrint(final boolean[] src) {
        final StringBuilder sb = new StringBuilder();
        for (final boolean e : src) {
            if (e) {
                sb.append(""1,"");
            } else {
                sb.append(""0,"");
            }
        }
        final String out = sb.toString();
        return out.substring(0, out.length() - 1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3492]])
167,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testReverseChar(),"    @Test
    public void testReverseChar() {
        char[] array = new char[] {'a', 'f', 'C'};
        ArrayUtils.reverse(array);
        assertEquals(array[0], 'C');
        assertEquals(array[1], 'f');
        assertEquals(array[2], 'a');

        array = null;
        ArrayUtils.reverse(array);
        assertEquals(null, array);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3481]])
213,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfFloatWithStartIndex(),"    @SuppressWarnings(""cast"")
    @Test
    public void testIndexOfFloatWithStartIndex() {
        float[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));
        array = new float[0];
        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));
        array = new float[] { 0, 1, 2, 3, 0 };
        assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));
        assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));
        assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));
        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));
        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));
        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));
        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3452]])
750,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence.hashCode(),"        @Override
        public int hashCode() {
            return seq.hashCode();
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3448]])
205,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIndexOfDoubleWithStartIndexTolerance(),"    @SuppressWarnings(""cast"")
    @Test
    public void testIndexOfDoubleWithStartIndexTolerance() {
        double[] array = null;
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));
        array = new double[0];
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));
        array = new double[] { 0, 1, 2, 3, 0 };
        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3));
        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3));
        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3));
        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35));
        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0));
        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001));
        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0));
        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3444]])
467,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testHexDigitToInt(),"    @Test
    public void testHexDigitToInt() {
        assertEquals(0, Conversion.hexDigitToInt('0'));
        assertEquals(1, Conversion.hexDigitToInt('1'));
        assertEquals(2, Conversion.hexDigitToInt('2'));
        assertEquals(3, Conversion.hexDigitToInt('3'));
        assertEquals(4, Conversion.hexDigitToInt('4'));
        assertEquals(5, Conversion.hexDigitToInt('5'));
        assertEquals(6, Conversion.hexDigitToInt('6'));
        assertEquals(7, Conversion.hexDigitToInt('7'));
        assertEquals(8, Conversion.hexDigitToInt('8'));
        assertEquals(9, Conversion.hexDigitToInt('9'));
        assertEquals(10, Conversion.hexDigitToInt('A'));
        assertEquals(10, Conversion.hexDigitToInt('a'));
        assertEquals(11, Conversion.hexDigitToInt('B'));
        assertEquals(11, Conversion.hexDigitToInt('b'));
        assertEquals(12, Conversion.hexDigitToInt('C'));
        assertEquals(12, Conversion.hexDigitToInt('c'));
        assertEquals(13, Conversion.hexDigitToInt('D'));
        assertEquals(13, Conversion.hexDigitToInt('d'));
        assertEquals(14, Conversion.hexDigitToInt('E'));
        assertEquals(14, Conversion.hexDigitToInt('e'));
        assertEquals(15, Conversion.hexDigitToInt('F'));
        assertEquals(15, Conversion.hexDigitToInt('f'));
        try {
            Conversion.hexDigitToInt('G');
            fail(""Thrown "" + IllegalArgumentException.class.getName() + "" expected"");
        } catch (final IllegalArgumentException e) {
            // OK
        }
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3433]])
527,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVectors_nullArray(),"    @Test(expected=NullPointerException.class)
    public void test_generateBitVectors_nullArray() {
        EnumUtils.generateBitVectors(Traffic.class, (Traffic[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3415]])
509,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testUuidToByteArray(),"    @Test
    public void testUuidToByteArray() {
        assertArrayEquals(new byte[]{
            (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
            (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
            (byte)0xff, (byte)0xff}, Conversion.uuidToByteArray(new UUID(
            0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), new byte[16], 0, 16));
        assertArrayEquals(new byte[]{
            (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc, (byte)0xdd, (byte)0xee,
            (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33, (byte)0x44, (byte)0x55,
            (byte)0x66, (byte)0x77}, Conversion.uuidToByteArray(new UUID(
            0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 0, 16));
        assertArrayEquals(new byte[]{
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x88, (byte)0x99, (byte)0xaa,
            (byte)0xbb, (byte)0xcc, (byte)0xdd, (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x00}, Conversion.uuidToByteArray(new UUID(
            0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 4, 8));
        assertArrayEquals(new byte[]{
            (byte)0x00, (byte)0x00, (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc,
            (byte)0xdd, (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33,
            (byte)0x00, (byte)0x00}, Conversion.uuidToByteArray(new UUID(
            0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 2, 12));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3409]])
358,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/CharRangeTest.java,org.apache.commons.lang3.CharRangeTest.testContains_Charrange(),"    @Test
    public void testContains_Charrange() {
        final CharRange a = CharRange.is('a');
        final CharRange b = CharRange.is('b');
        final CharRange c = CharRange.is('c');
        final CharRange c2 = CharRange.is('c');
        final CharRange d = CharRange.is('d');
        final CharRange e = CharRange.is('e');
        final CharRange cd = CharRange.isIn('c', 'd');
        final CharRange bd = CharRange.isIn('b', 'd');
        final CharRange bc = CharRange.isIn('b', 'c');
        final CharRange ab = CharRange.isIn('a', 'b');
        final CharRange de = CharRange.isIn('d', 'e');
        final CharRange ef = CharRange.isIn('e', 'f');
        final CharRange ae = CharRange.isIn('a', 'e');

        // normal/normal
        assertFalse(c.contains(b));
        assertTrue(c.contains(c));
        assertTrue(c.contains(c2));
        assertFalse(c.contains(d));

        assertFalse(c.contains(cd));
        assertFalse(c.contains(bd));
        assertFalse(c.contains(bc));
        assertFalse(c.contains(ab));
        assertFalse(c.contains(de));

        assertTrue(cd.contains(c));
        assertTrue(bd.contains(c));
        assertTrue(bc.contains(c));
        assertFalse(ab.contains(c));
        assertFalse(de.contains(c));

        assertTrue(ae.contains(b));
        assertTrue(ae.contains(ab));
        assertTrue(ae.contains(bc));
        assertTrue(ae.contains(cd));
        assertTrue(ae.contains(de));

        final CharRange notb = CharRange.isNot('b');
        final CharRange notc = CharRange.isNot('c');
        final CharRange notd = CharRange.isNot('d');
        final CharRange notab = CharRange.isNotIn('a', 'b');
        final CharRange notbc = CharRange.isNotIn('b', 'c');
        final CharRange notbd = CharRange.isNotIn('b', 'd');
        final CharRange notcd = CharRange.isNotIn('c', 'd');
        final CharRange notde = CharRange.isNotIn('d', 'e');
        final CharRange notae = CharRange.isNotIn('a', 'e');
        final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE);
        final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE);

        // normal/negated
        assertFalse(c.contains(notc));
        assertFalse(c.contains(notbd));
        assertTrue(all.contains(notc));
        assertTrue(all.contains(notbd));
        assertFalse(allbutfirst.contains(notc));
        assertFalse(allbutfirst.contains(notbd));

        // negated/normal
        assertTrue(notc.contains(a));
        assertTrue(notc.contains(b));
        assertFalse(notc.contains(c));
        assertTrue(notc.contains(d));
        assertTrue(notc.contains(e));

        assertTrue(notc.contains(ab));
        assertFalse(notc.contains(bc));
        assertFalse(notc.contains(bd));
        assertFalse(notc.contains(cd));
        assertTrue(notc.contains(de));
        assertFalse(notc.contains(ae));
        assertFalse(notc.contains(all));
        assertFalse(notc.contains(allbutfirst));

        assertTrue(notbd.contains(a));
        assertFalse(notbd.contains(b));
        assertFalse(notbd.contains(c));
        assertFalse(notbd.contains(d));
        assertTrue(notbd.contains(e));

        assertTrue(notcd.contains(ab));
        assertFalse(notcd.contains(bc));
        assertFalse(notcd.contains(bd));
        assertFalse(notcd.contains(cd));
        assertFalse(notcd.contains(de));
        assertFalse(notcd.contains(ae));
        assertTrue(notcd.contains(ef));
        assertFalse(notcd.contains(all));
        assertFalse(notcd.contains(allbutfirst));

        // negated/negated
        assertFalse(notc.contains(notb));
        assertTrue(notc.contains(notc));
        assertFalse(notc.contains(notd));

        assertFalse(notc.contains(notab));
        assertTrue(notc.contains(notbc));
        assertTrue(notc.contains(notbd));
        assertTrue(notc.contains(notcd));
        assertFalse(notc.contains(notde));

        assertFalse(notbd.contains(notb));
        assertFalse(notbd.contains(notc));
        assertFalse(notbd.contains(notd));

        assertFalse(notbd.contains(notab));
        assertFalse(notbd.contains(notbc));
        assertTrue(notbd.contains(notbd));
        assertFalse(notbd.contains(notcd));
        assertFalse(notbd.contains(notde));
        assertTrue(notbd.contains(notae));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3381]])
526,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/EnumUtilsTest.java,org.apache.commons.lang3.EnumUtilsTest.test_generateBitVector_nullArray(),"    @Test(expected=NullPointerException.class)
    public void test_generateBitVector_nullArray() {
        EnumUtils.generateBitVector(Traffic.class, (Traffic[]) null);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3374]])
86,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveTest.java,org.apache.commons.lang3.ArrayUtilsRemoveTest.testRemoveFloatArray(),"    @Test
    public void testRemoveFloatArray() {
        float[] array;
        array = ArrayUtils.remove(new float[] {1}, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new float[] {1, 2}, 0);
        assertTrue(Arrays.equals(new float[] {2}, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new float[] {1, 2}, 1);
        assertTrue(Arrays.equals(new float[] {1}, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.remove(new float[] {1, 2, 1}, 1);
        assertTrue(Arrays.equals(new float[] {1, 1}, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        try {
            ArrayUtils.remove(new float[] {1, 2}, -1);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove(new float[] {1, 2}, 2);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
        try {
            ArrayUtils.remove((float[]) null, 0);
            fail(""IndexOutOfBoundsException expected"");
        } catch (final IndexOutOfBoundsException e) {}
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3359]])
562,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/LocaleUtilsTest.java,org.apache.commons.lang3.LocaleUtilsTest.setUp(),"    @Before
    public void setUp() throws Exception {
        // Testing #LANG-304. Must be called before availableLocaleSet is called.
        LocaleUtils.isAvailableLocale(Locale.getDefault());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3358]])
51,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArray(),"    @Test
    public void testRemoveAllFloatArray() {
        float[] array;
        array = ArrayUtils.removeAll(new float[] { 1 }, 0);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2 }, 0);
        assertTrue(Arrays.equals(new float[] { 2 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2 }, 1);
        assertTrue(Arrays.equals(new float[] { 1 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2, 1 }, 1);
        assertTrue(Arrays.equals(new float[] { 1, 1 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());

        array = ArrayUtils.removeAll(new float[] { 1, 2 }, 0, 1);
        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2, 3 }, 0, 1);
        assertTrue(Arrays.equals(new float[] { 3 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2, 3 }, 1, 2);
        assertTrue(Arrays.equals(new float[] { 1 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2, 3 }, 0, 2);
        assertTrue(Arrays.equals(new float[] { 2 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5 }, 1, 3);
        assertTrue(Arrays.equals(new float[] { 1, 3, 5 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5 }, 0, 2, 4);
        assertTrue(Arrays.equals(new float[] { 2, 4 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5);
        assertTrue(Arrays.equals(new float[] { 1, 3, 5, 7 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
        array = ArrayUtils.removeAll(new float[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6);
        assertTrue(Arrays.equals(new float[] { 2, 4, 6 }, array));
        assertEquals(Float.TYPE, array.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3350]])
693,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.ClassNotFoundSerialization.readObject(java.io.ObjectInputStream),"    private void readObject(final ObjectInputStream in) throws ClassNotFoundException    {
        throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3345]])
215,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testLastIndexOfFloatWithStartIndex(),"    @SuppressWarnings(""cast"")
    @Test
    public void testLastIndexOfFloatWithStartIndex() {
        float[] array = null;
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));
        array = new float[0];
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));
        array = new float[] { 0, 1, 2, 3, 0 };
        assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));
        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));
        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));
        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));
        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3325]])
510,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ConversionTest.java,org.apache.commons.lang3.ConversionTest.testByteArrayToUuid(),"    @Test
    public void testByteArrayToUuid() {
        assertEquals(
            new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL),
            Conversion.byteArrayToUuid(new byte[]{
                (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
                (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff,
                (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff}, 0));
        assertEquals(
            new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L),
            Conversion.byteArrayToUuid(new byte[]{
                (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc, (byte)0xdd,
                (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33,
                (byte)0x44, (byte)0x55, (byte)0x66, (byte)0x77}, 0));
        assertEquals(
            new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L),
            Conversion.byteArrayToUuid(new byte[]{
                0, 0, (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc, (byte)0xdd,
                (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33,
                (byte)0x44, (byte)0x55, (byte)0x66, (byte)0x77}, 2));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3231]])
17,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsAddTest.java,org.apache.commons.lang3.ArrayUtilsAddTest.testAddObjectArrayFloat(),"    @Test
    public void testAddObjectArrayFloat() {
        float[] newArray;
        newArray = ArrayUtils.add((float[])null, 0);
        assertTrue(Arrays.equals(new float[]{0}, newArray));
        assertEquals(Float.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add((float[])null, 1);
        assertTrue(Arrays.equals(new float[]{1}, newArray));
        assertEquals(Float.TYPE, newArray.getClass().getComponentType());
        final float[] array1 = new float[]{1, 2, 3};
        newArray = ArrayUtils.add(array1, 0);
        assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray));
        assertEquals(Float.TYPE, newArray.getClass().getComponentType());
        newArray = ArrayUtils.add(array1, 4);
        assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));
        assertEquals(Float.TYPE, newArray.getClass().getComponentType());
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3222]])
620,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,org.apache.commons.lang3.ObjectUtilsTest.CloneableString.clone(),"        @Override
        public CloneableString clone() throws CloneNotSupportedException {
            return (CloneableString)super.clone();
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3209]])
675,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/SerializationUtilsTest.java,org.apache.commons.lang3.SerializationUtilsTest.Anonymous-2b060d8b-aba4-4ffe-9adc-63a1fe2d6b01.write(int),"            @Override
            public void write(final int arg0) throws IOException {
                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3202]])
854,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsTest.java,org.apache.commons.lang3.StringUtilsTest.testChomp(),"    @SuppressWarnings(""deprecation"") // intentional test of deprecated method
    @Test
    public void testChomp() {

        final String[][] chompCases = {
            { FOO_UNCAP + ""\r\n"", FOO_UNCAP },
            { FOO_UNCAP + ""\n"" , FOO_UNCAP },
            { FOO_UNCAP + ""\r"", FOO_UNCAP },
            { FOO_UNCAP + "" \r"", FOO_UNCAP + "" "" },
            { FOO_UNCAP, FOO_UNCAP },
            { FOO_UNCAP + ""\n\n"", FOO_UNCAP + ""\n""},
            { FOO_UNCAP + ""\r\n\r\n"", FOO_UNCAP + ""\r\n"" },
            { ""foo\nfoo"", ""foo\nfoo"" },
            { ""foo\n\rfoo"", ""foo\n\rfoo"" },
            { ""\n"", """" },
            { ""\r"", """" },
            { ""a"", ""a"" },
            { ""\r\n"", """" },
            { """", """" },
            { null, null },
            { FOO_UNCAP + ""\n\r"", FOO_UNCAP + ""\n""}
        };
        for (final String[] chompCase : chompCases) {
            final String original = chompCase[0];
            final String expectedResult = chompCase[1];
            assertEquals(""chomp(String) failed"",
                    expectedResult, StringUtils.chomp(original));
        }

        assertEquals(""chomp(String, String) failed"",
                ""foo"", StringUtils.chomp(""foobar"", ""bar""));
        assertEquals(""chomp(String, String) failed"",
                ""foobar"", StringUtils.chomp(""foobar"", ""baz""));
        assertEquals(""chomp(String, String) failed"",
                ""foo"", StringUtils.chomp(""foo"", ""foooo""));
        assertEquals(""chomp(String, String) failed"",
                ""foobar"", StringUtils.chomp(""foobar"", """"));
        assertEquals(""chomp(String, String) failed"",
                ""foobar"", StringUtils.chomp(""foobar"", null));
        assertEquals(""chomp(String, String) failed"",
                """", StringUtils.chomp("""", ""foo""));
        assertEquals(""chomp(String, String) failed"",
                """", StringUtils.chomp("""", null));
        assertEquals(""chomp(String, String) failed"",
                """", StringUtils.chomp("""", """"));
        assertEquals(""chomp(String, String) failed"",
                null, StringUtils.chomp(null, ""foo""));
        assertEquals(""chomp(String, String) failed"",
                null, StringUtils.chomp(null, null));
        assertEquals(""chomp(String, String) failed"",
                null, StringUtils.chomp(null, """"));
        assertEquals(""chomp(String, String) failed"",
                """", StringUtils.chomp(""foo"", ""foo""));
        assertEquals(""chomp(String, String) failed"",
                "" "", StringUtils.chomp("" foo"", ""foo""));
        assertEquals(""chomp(String, String) failed"",
                ""foo "", StringUtils.chomp(""foo "", ""foo""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3198]])
53,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java,org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllFloatArrayNegativeIndex(),"    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveAllFloatArrayNegativeIndex() {
        ArrayUtils.removeAll(new float[] { 1, 2 }, -1);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3185]])
642,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,"org.apache.commons.lang3.RangeTest.Anonymous-64a894f2-e208-45d8-92d1-7f40b5a4a065.compare(java.lang.Integer, java.lang.Integer)","            @Override
            public int compare(final Integer o1, final Integer o2) {
                return 0; // all integers are equal
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3183]])
644,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,"org.apache.commons.lang3.RangeTest.Anonymous-52a0435a-f6c1-44cf-8134-fded3c9732e7.compare(java.lang.Integer, java.lang.Integer)","            @Override
            public int compare(final Integer o1, final Integer o2) {
                return 0; // all integers are equal
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3183]])
165,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testReverseInt(),"    @Test
    public void testReverseInt() {
        int[] array = new int[] {1, 2, 3};
        ArrayUtils.reverse(array);
        assertEquals(array[0], 3);
        assertEquals(array[1], 2);
        assertEquals(array[2], 1);

        array = null;
        ArrayUtils.reverse(array);
        assertEquals(null, array);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3178]])
151,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testSubarrayFloat(),"    @Test
    public void testSubarrayFloat() {
        final float[] nullArray = null;
        final float[] array = { 10, 11, 12, 13, 14, 15 };
        final float[] leftSubarray    = { 10, 11, 12, 13 };
        final float[] midSubarray     = { 11, 12, 13, 14 };
        final float[] rightSubarray   = { 12, 13, 14, 15 };


        assertTrue(""0 start, mid end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, 0, 4)));

        assertTrue(""0 start, length end"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, 0, array.length)));

        assertTrue(""mid start, mid end"",
            ArrayUtils.isEquals(midSubarray,
                ArrayUtils.subarray(array, 1, 5)));

        assertTrue(""mid start, length end"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, array.length)));


        assertNull(""null input"", ArrayUtils.subarray(nullArray, 0, 3));

        assertEquals(""empty array"", ArrayUtils.EMPTY_FLOAT_ARRAY,
            ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));

        assertEquals(""start > end"", ArrayUtils.EMPTY_FLOAT_ARRAY,
            ArrayUtils.subarray(array, 4, 2));

        assertEquals(""start == end"", ArrayUtils.EMPTY_FLOAT_ARRAY,
            ArrayUtils.subarray(array, 3, 3));

        assertTrue(""start undershoot, normal end"",
            ArrayUtils.isEquals(leftSubarray,
                ArrayUtils.subarray(array, -2, 4)));

        assertEquals(""start overshoot, any end"",
            ArrayUtils.EMPTY_FLOAT_ARRAY,
                ArrayUtils.subarray(array, 33, 4));

        assertTrue(""normal start, end overshoot"",
            ArrayUtils.isEquals(rightSubarray,
                ArrayUtils.subarray(array, 2, 33)));

        assertTrue(""start undershoot, end overshoot"",
            ArrayUtils.isEquals(array,
                ArrayUtils.subarray(array, -2, 12)));

        // empty-return tests

        assertSame(""empty array, object test"",
            ArrayUtils.EMPTY_FLOAT_ARRAY,
                ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));

        assertSame(""start > end, object test"",
            ArrayUtils.EMPTY_FLOAT_ARRAY,
                ArrayUtils.subarray(array, 4, 1));

        assertSame(""start == end, object test"",
            ArrayUtils.EMPTY_FLOAT_ARRAY,
                ArrayUtils.subarray(array, 3, 3));

        assertSame(""start overshoot, any end, object test"",
            ArrayUtils.EMPTY_FLOAT_ARRAY,
                ArrayUtils.subarray(array, 8733, 4));

        // array type tests

        assertSame(""float type"", float.class,
            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());

    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3170]])
169,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testReverseDouble(),"    @Test
    public void testReverseDouble() {
        double[] array = new double[] {0.3d, 0.4d, 0.5d};
        ArrayUtils.reverse(array);
        assertEquals(array[0], 0.5d, 0.0d);
        assertEquals(array[1], 0.4d, 0.0d);
        assertEquals(array[2], 0.3d, 0.0d);

        array = null;
        ArrayUtils.reverse(array);
        assertEquals(null, array);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3103]])
552,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,org.apache.commons.lang3.HashSetvBitSetTest.testBitSet(int),"    private static int[] testBitSet(final int count) {
        final BitSet toRemove = new BitSet();
        int found = 0;
        for (int i = 0; i < count; i++) {
            toRemove.set(found++);
        }
        return extractIndices(toRemove);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3098]])
640,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.Anonymous-6184288c-26b0-415a-8882-338d50a28c93.compareTo(java.lang.Object),"                @Override
                public int compareTo(final Object other) {
                    return 1;
                }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3051]])
746,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence.charAt(int),"        @Override
        public char charAt(final int index) {
            return seq.charAt(index);
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.3034]])
166,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testReverseShort(),"    @Test
    public void testReverseShort() {
        short[] array = new short[] {1, 2, 3};
        ArrayUtils.reverse(array);
        assertEquals(array[0], 3);
        assertEquals(array[1], 2);
        assertEquals(array[2], 1);

        array = null;
        ArrayUtils.reverse(array);
        assertEquals(null, array);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2974]])
113,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.Anonymous-e4745d5c-5826-447f-9884-68cbbd8404d1.getValue(),"            @Override
            public Object getValue() {
                return ""bar"";
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2800]])
112,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.Anonymous-a0a946a5-8a6f-4c9d-8813-679678954105.getKey(),"            @Override
            public Object getKey() {
                return ""foo"";
            }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2746]])
623,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ObjectUtilsTest.java,"org.apache.commons.lang3.ObjectUtilsTest.NonComparableCharSequence.subSequence(int, int)","        @Override
        public CharSequence subSequence(final int arg0, final int arg1) {
            return value.subSequence(arg0, arg1);
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2735]])
710,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringEscapeUtilsTest.java,org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeXmlAllCharacters(),"    @Test
    public void testEscapeXmlAllCharacters() {
        // http://www.w3.org/TR/xml/#charsets says:
        // Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF] /* any Unicode character,
        // excluding the surrogate blocks, FFFE, and FFFF. */
        final CharSequenceTranslator escapeXml = StringEscapeUtils.ESCAPE_XML
                .with(NumericEntityEscaper.below(9), NumericEntityEscaper.between(0xB, 0xC), NumericEntityEscaper.between(0xE, 0x19),
                        NumericEntityEscaper.between(0xD800, 0xDFFF), NumericEntityEscaper.between(0xFFFE, 0xFFFF), NumericEntityEscaper.above(0x110000));

        assertEquals(""&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;"", escapeXml.translate(""\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008""));
        assertEquals(""\t"", escapeXml.translate(""\t"")); // 0x9
        assertEquals(""\n"", escapeXml.translate(""\n"")); // 0xA
        assertEquals(""&#11;&#12;"", escapeXml.translate(""\u000B\u000C""));
        assertEquals(""\r"", escapeXml.translate(""\r"")); // 0xD
        assertEquals(""Hello World! Ain&apos;t this great?"", escapeXml.translate(""Hello World! Ain't this great?""));
        assertEquals(""&#14;&#15;&#24;&#25;"", escapeXml.translate(""\u000E\u000F\u0018\u0019""));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2629]])
103,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testIsEquals(),"    @Test
    public void testIsEquals() {
        final long[][] larray1 = new long[][]{{2, 5}, {4, 5}};
        final long[][] larray2 = new long[][]{{2, 5}, {4, 6}};
        final long[] larray3 = new long[]{2, 5};
        this.assertIsEquals(larray1, larray2, larray3);

        final int[][] iarray1 = new int[][]{{2, 5}, {4, 5}};
        final int[][] iarray2 = new int[][]{{2, 5}, {4, 6}};
        final int[] iarray3 = new int[]{2, 5};
        this.assertIsEquals(iarray1, iarray2, iarray3);

        final short[][] sarray1 = new short[][]{{2, 5}, {4, 5}};
        final short[][] sarray2 = new short[][]{{2, 5}, {4, 6}};
        final short[] sarray3 = new short[]{2, 5};
        this.assertIsEquals(sarray1, sarray2, sarray3);

        final float[][] farray1 = new float[][]{{2, 5}, {4, 5}};
        final float[][] farray2 = new float[][]{{2, 5}, {4, 6}};
        final float[] farray3 = new float[]{2, 5};
        this.assertIsEquals(farray1, farray2, farray3);

        final double[][] darray1 = new double[][]{{2, 5}, {4, 5}};
        final double[][] darray2 = new double[][]{{2, 5}, {4, 6}};
        final double[] darray3 = new double[]{2, 5};
        this.assertIsEquals(darray1, darray2, darray3);

        final byte[][] byteArray1 = new byte[][]{{2, 5}, {4, 5}};
        final byte[][] byteArray2 = new byte[][]{{2, 5}, {4, 6}};
        final byte[] byteArray3 = new byte[]{2, 5};
        this.assertIsEquals(byteArray1, byteArray2, byteArray3);

        final char[][] charArray1 = new char[][]{{2, 5}, {4, 5}};
        final char[][] charArray2 = new char[][]{{2, 5}, {4, 6}};
        final char[] charArray3 = new char[]{2, 5};
        this.assertIsEquals(charArray1, charArray2, charArray3);

        final boolean[][] barray1 = new boolean[][]{{true, false}, {true, true}};
        final boolean[][] barray2 = new boolean[][]{{true, false}, {true, false}};
        final boolean[] barray3 = new boolean[]{false, true};
        this.assertIsEquals(barray1, barray2, barray3);

        final Object[] array3 = new Object[]{new String(new char[]{'A', 'B'})};
        final Object[] array4 = new Object[]{""AB""};
        assertTrue(ArrayUtils.isEquals(array3, array3));
        assertTrue(ArrayUtils.isEquals(array3, array4));

        assertTrue(ArrayUtils.isEquals(null, null));
        assertFalse(ArrayUtils.isEquals(null, array4));
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2542]])
638,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RangeTest.java,org.apache.commons.lang3.RangeTest.setUp(),"    @SuppressWarnings(""cast"") // intRange
    @Before
    public void setUp() {
        byteRange   = Range.between((byte) 0, (byte) 5);
        byteRange2  = Range.between((byte) 0, (byte) 5);
        byteRange3  = Range.between((byte) 0, (byte) 10);

        intRange    = Range.between((int) 10, (int) 20);
        longRange   = Range.between((long) 10, (long) 20);
        floatRange  = Range.between((float) 10, (float) 20);
        doubleRange = Range.between((double) 10, (double) 20);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2489]])
170,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.testReverseFloat(),"    @Test
    public void testReverseFloat() {
        float[] array = new float[] {0.3f, 0.4f, 0.5f};
        ArrayUtils.reverse(array);
        assertEquals(array[0], 0.5f, 0.0f);
        assertEquals(array[1], 0.4f, 0.0f);
        assertEquals(array[2], 0.3f, 0.0f);

        array = null;
        ArrayUtils.reverse(array);
        assertEquals(null, array);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2343]])
548,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,org.apache.commons.lang3.HashSetvBitSetTest.printTimes(int),"    private long printTimes(final int count) {
        final long hashSet = timeHashSet(count);
        final long bitSet = timeBitSet(count);
        // If percent is less than 100, then bitset is faster
        System.out.println(""Ratio=""+(bitSet*100/hashSet)+""% count=""+count+"" hash=""+hashSet+"" bits=""+bitSet);
        return bitSet - hashSet;
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2326]])
748,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,"org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.CustomCharSequence.subSequence(int, int)","        @Override
        public CharSequence subSequence(final int start, final int end) {
            return new CustomCharSequence(seq.subSequence(start, end));
        }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2204]])
556,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,"org.apache.commons.lang3.HashSetvBitSetTest.printTimes(int, int)","    private long printTimes(final int arraySize, final int bitSetSize) {
        final int[] array = new int[arraySize];
        final BitSet remove = new BitSet();
        for (int i = 0; i < bitSetSize; i++) {
            remove.set(i);
        }
        final long bitSet = timeBitSetRemoveAll(array, remove );
        final long extract = timeExtractRemoveAll(array, remove);
        // If percent is less than 100, then direct use of bitset is faster
        System.out.println(""Ratio=""+(bitSet*100/extract)+""% array=""+array.length+"" count=""+remove.cardinality()+"" extract=""+extract+"" bitset=""+bitSet);
        return bitSet - extract;
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.2019]])
554,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,org.apache.commons.lang3.HashSetvBitSetTest.extractIndices(java.util.BitSet),"    private static int[] extractIndices(final BitSet coll) {
        final int[] result = new int[coll.cardinality()];
        int i = 0;
        int j=0;
        while((j=coll.nextSetBit(j)) != -1) {
            result[i++] = j++;            
        }
        return result;
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.1676]])
553,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/HashSetvBitSetTest.java,org.apache.commons.lang3.HashSetvBitSetTest.extractIndices(java.util.HashSet<java.lang.Integer>),"    private static int[] extractIndices(final HashSet<Integer> coll) {
        final int[] result = new int[coll.size()];
        int i = 0;
        for (final Integer index : coll) {
            result[i++] = index.intValue();
        }
        return result;
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.1326]])
110,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/ArrayUtilsTest.java,org.apache.commons.lang3.ArrayUtilsTest.toArrayPropagatingType(T...),"    private static <T> T[] toArrayPropagatingType(final T... items)
    {
        return ArrayUtils.toArray(items);
    }
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.1246]])
636,org/apache/commons/lang3,org/apache/commons/lang3/StringUtils_ESTest.java,test0,"@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("""");
      assertTrue(boolean0);
  }",org.apache.commons.lang3.StringUtils.isBlank(Ljava/lang/CharSequence;)Z,org/apache/commons/lang3/RandomStringUtilsTest.java,"org.apache.commons.lang3.RandomStringUtilsTest.chiSquare(int[], int[])","    private double chiSquare(final int[] expected, final int[] observed) {
        double sumSq = 0.0d;
        double dev = 0.0d;
        for (int i = 0; i < observed.length; i++) {
            dev = observed[i] - expected[i];
            sumSq += dev * dev / expected[i];
        }
        return sumSq;
    }           
","    public static boolean isBlank(final CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
",tensor([[0.1199]])
